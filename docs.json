[
 {
  "name" : "eventcore.core",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/core.d",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 3,
    "char" : 15
   },
   {
    "name" : "eventcore.drivers.posix.cfrunloop",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.epoll",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.kqueue",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.select",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.libasync",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.winapi.driver",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "mallocT",
     "freeT"
    ]
   },
   {
    "name" : "NativeEventDriver",
    "kind" : "alias",
    "protection" : "public",
    "line" : 13,
    "char" : 32,
    "deco" : "C9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
    "originalType" : "EpollEventDriver"
   },
   {
    "name" : "eventDriver",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Returns the event driver associated to the calling thread.\n\n\tIf no driver has been created, one will be allocated lazily. The return\n\tvalue is guaranteed to be non-null.\n",
    "line" : 26,
    "char" : 29,
    "deco" : "FNbNdNiNfZC9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
    "originalType" : "nothrow @nogc @property @safe NativeEventDriver()",
    "endline" : 36,
    "endchar" : 1
   },
   {
    "name" : "tryGetEventDriver",
    "kind" : "function",
    "protection" : "public",
    "comment" : " Returns the event driver associated with the calling thread, if any.\n\n\tIf no driver has been created, this function will return `null`.\n",
    "line" : 43,
    "char" : 19,
    "deco" : "FNbNiNfZC9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
    "originalType" : "nothrow @nogc @safe NativeEventDriver()",
    "endline" : 46,
    "endchar" : 1
   },
   {
    "name" : "_staticCtor_L49_C2",
    "kind" : "static constructor",
    "protection" : "public",
    "line" : 49,
    "char" : 2,
    "storageClass" : [
     "static"
    ],
    "deco" : "FZv",
    "endline" : 54,
    "endchar" : 2
   },
   {
    "name" : "_staticDtor_L56_C2",
    "kind" : "static destructor",
    "protection" : "public",
    "line" : 56,
    "char" : 2,
    "storageClass" : [
     "static"
    ],
    "deco" : "FZv",
    "endline" : 66,
    "endchar" : 2
   },
   {
    "name" : "_sharedStaticCtor_L68_C2",
    "kind" : "shared static constructor",
    "protection" : "public",
    "line" : 68,
    "char" : 2,
    "storageClass" : [
     "static"
    ],
    "deco" : "FZv",
    "endline" : 73,
    "endchar" : 2
   },
   {
    "name" : "_sharedStaticDtor_L75_C2",
    "kind" : "shared static destructor",
    "protection" : "public",
    "line" : 75,
    "char" : 2,
    "storageClass" : [
     "static"
    ],
    "deco" : "FZv",
    "endline" : 83,
    "endchar" : 2
   },
   {
    "name" : "s_driver",
    "kind" : "variable",
    "protection" : "private",
    "line" : 94,
    "char" : 20,
    "deco" : "C9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
    "originalType" : "NativeEventDriver"
   },
   {
    "name" : "s_isMainThread",
    "kind" : "variable",
    "protection" : "private",
    "line" : 95,
    "char" : 7,
    "deco" : "b"
   },
   {
    "name" : "s_initCount",
    "kind" : "variable",
    "protection" : "private",
    "line" : 98,
    "char" : 6,
    "deco" : "i",
    "init" : "0"
   }
  ]
 },
 {
  "name" : "eventcore.driver",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/driver.d",
  "comment" : " Definition of the core event driver interface.\n\n\tThis module contains all declarations necessary for defining and using\n\tevent drivers. Event driver implementations will usually inherit from\n\t`EventDriver` using a `final` class to avoid virtual function overhead.\n\n\tCallback_Behavior:\n\t\tAll callbacks follow the same rules to enable generic implementation\n\t\tof high-level libraries, such as vibe.d. Except for \"listen\" style\n\t\tcallbacks, each callback will only ever be called at most once.\n\n\t\tIf the operation does not get canceled, the callback will be called\n\t\texactly once. In case it gets manually canceled using the corresponding\n\t\tAPI function, the callback is guaranteed to not be called. However,\n\t\tthe associated operation might still finish - either before the\n\t\tcancellation function returns, or afterwards.\n",
  "members" : [
   {
    "name" : "core.time",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Duration"
    ]
   },
   {
    "name" : "std.process",
    "kind" : "import",
    "line" : 21,
    "char" : 8,
    "protection" : "private",
    "renamed" : {
     "StdProcessConfig" : "Config"
    }
   },
   {
    "name" : "std.socket",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Address"
    ]
   },
   {
    "name" : "std.stdint",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "intptr_t"
    ]
   },
   {
    "name" : "std.typecons",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Tuple"
    ]
   },
   {
    "name" : "std.variant",
    "kind" : "import",
    "line" : 25,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Algebraic"
    ]
   },
   {
    "name" : "EventDriver",
    "kind" : "interface",
    "protection" : "public",
    "comment" : " Encapsulates a full event driver.\n\n\tThis interface provides access to the individual driver features, as well as\n\ta central `dispose` method that must be called before the driver gets\n\tdestroyed or before the process gets terminated.\n",
    "line" : 34,
    "char" : 1,
    "members" : [
     {
      "name" : "core",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Core event loop functionality\n",
      "line" : 37,
      "char" : 35,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver15EventDriverCore"
     },
     {
      "name" : "core",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Core event loop functionality\n",
      "line" : 39,
      "char" : 43,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "ONgFNbNdNfZONgC9eventcore6driver15EventDriverCore"
     },
     {
      "name" : "timers",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Single shot and recurring timers\n",
      "line" : 41,
      "char" : 37,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver17EventDriverTimers"
     },
     {
      "name" : "events",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Cross-thread events (thread local access)\n",
      "line" : 43,
      "char" : 37,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver17EventDriverEvents"
     },
     {
      "name" : "events",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Cross-thread events (cross-thread access)\n",
      "line" : 45,
      "char" : 45,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "ONgFNbNdNfZONgC9eventcore6driver17EventDriverEvents"
     },
     {
      "name" : "signals",
      "kind" : "function",
      "protection" : "public",
      "comment" : "UNIX/POSIX signal reception\n",
      "line" : 47,
      "char" : 38,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver18EventDriverSignals"
     },
     {
      "name" : "sockets",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Stream and datagram sockets\n",
      "line" : 49,
      "char" : 38,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver18EventDriverSockets"
     },
     {
      "name" : "dns",
      "kind" : "function",
      "protection" : "public",
      "comment" : "DNS queries\n",
      "line" : 51,
      "char" : 34,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver14EventDriverDNS"
     },
     {
      "name" : "files",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Local file operations\n",
      "line" : 53,
      "char" : 36,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver16EventDriverFiles"
     },
     {
      "name" : "watchers",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Directory change watching\n",
      "line" : 55,
      "char" : 39,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver19EventDriverWatchers"
     },
     {
      "name" : "processes",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Sub-process handling\n",
      "line" : 57,
      "char" : 40,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver20EventDriverProcesses"
     },
     {
      "name" : "pipes",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Pipes\n",
      "line" : 59,
      "char" : 36,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "NgFNbNdNfZNgC9eventcore6driver16EventDriverPipes"
     },
     {
      "name" : "dispose",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Releases all resources associated with the driver.\n\n\t\tIn case of any left-over referenced handles, this function returns\n\t\t`false` and does not free any resources. It may choose to free the\n\t\tresources once the last handle gets dereferenced.\n",
      "line" : 67,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfZb"
     }
    ]
   },
   {
    "name" : "EventDriverCore",
    "kind" : "interface",
    "protection" : "public",
    "comment" : " Provides generic event loop control.\n",
    "line" : 73,
    "char" : 1,
    "members" : [
     {
      "name" : "waiterCount",
      "kind" : "function",
      "protection" : "public",
      "comment" : " The number of pending callbacks.\n\n\t\tWhen this number drops to zero, the event loop can safely be quit. It is\n\t\tguaranteed that no callbacks will be made anymore, unless new callbacks\n\t\tget registered.\n",
      "line" : 80,
      "char" : 9,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfZm",
      "originalType" : "nothrow @safe size_t()"
     },
     {
      "name" : "processEvents",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Runs the event loop to process a chunk of events.\n\n\t\tThis method optionally waits for an event to arrive if none are present\n\t\tin the event queue. The function will return after either the specified\n\t\ttimeout has elapsed, or once the event queue has been fully emptied.\n\n\t\tOn implementations that support it, the function will treat\n\t\tinterruptions by POSIX signals as if an event was received and will\n\t\tcause it to return. However, note that it is generally recommended to\n\t\tuse `EventDriverSignals` instead of raw signal handlers in order to\n\t\tavoid their pitfalls as far as possible.\n\n\t\tParams:\n\t\t\ttimeout = Maximum amount of time to wait for an event. A duration of\n\t\t\t\tzero will cause the function to only process pending events. A\n\t\t\t\tduration of `Duration.max`, if necessary, will wait indefinitely\n\t\t\t\tuntil an event arrives.\n",
      "line" : 100,
      "char" : 13,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS4core4time8DurationZE9eventcore6driver10ExitReason",
      "parameters" : [
       {
        "name" : "timeout",
        "deco" : "S4core4time8Duration"
       }
      ]
     },
     {
      "name" : "exit",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Causes `processEvents` to return with `ExitReason.exited` as soon as\n\t\tpossible.\n\n\t\tA call to `processEvents` that is currently in progress will be notified\n\t\tso that it returns immediately. If no call is in progress, the next call\n\t\tto `processEvents` will immediately return with `ExitReason.exited`.\n",
      "line" : 109,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfZv"
     },
     {
      "name" : "clearExitFlag",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Resets the exit flag.\n\n\t\t`processEvents` will automatically reset the exit flag before it returns\n\t\twith `ExitReason.exited`. However, if `exit` is called outside of\n\t\t`processEvents`, the next call to `processEvents` will return with\n\t\t`ExitCode.exited` immediately. This function can be used to avoid this.\n",
      "line" : 118,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfZv"
     },
     {
      "name" : "runInOwnerThread",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Executes a callback in the thread owning the driver.\n",
      "line" : 122,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "OFNbNfPFNbNfKG64hZvKQhZv",
      "originalType" : "shared nothrow @safe void(ThreadCallbackGen fun, ref ThreadCallbackGenParams params)",
      "parameters" : [
       {
        "name" : "fun",
        "deco" : "PFNbNfKG64hZv"
       },
       {
        "name" : "params",
        "deco" : "G64h",
        "storageClass" : [
         "ref"
        ]
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 124,
      "char" : 13,
      "name" : "runInOwnerThread",
      "parameters" : [
       {
        "name" : "ARGS",
        "kind" : "tuple"
       }
      ],
      "constraint" : "ARGS.length != 1 || !is(ARGS[0] == ThreadCallbackGenParams)",
      "members" : [
       {
        "name" : "runInOwnerThread",
        "kind" : "function",
        "line" : 124,
        "char" : 13,
        "storageClass" : [
         "final"
        ],
        "type" : "shared void(void function(ARGS) nothrow @safe fun, ARGS args)",
        "parameters" : [
         {
          "name" : "fun",
          "type" : "void function(ARGS) nothrow @safe"
         },
         {
          "name" : "args",
          "type" : "ARGS"
         }
        ],
        "endline" : 140,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Low-level user data access. Use `getUserData` instead.\n",
      "line" : 143,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FS9eventcore6driver14StreamSocketFDmPFNbNiPvZvQkZQh",
      "originalType" : "@system void*(StreamSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "ditto\n",
      "line" : 145,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FS9eventcore6driver16DatagramSocketFDmPFNbNiPvZvQkZQh",
      "originalType" : "@system void*(DatagramSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : " Deprecated - use `EventDriverSockets.userData` instead.\n",
      "line" : 150,
      "char" : 24,
      "name" : "userData",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       },
       {
        "name" : "FD",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "userData",
        "kind" : "function",
        "line" : 150,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "nothrow @property ref @trusted T(FD descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "FD"
         }
        ],
        "endline" : 156,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "EventDriverSockets",
    "kind" : "interface",
    "protection" : "public",
    "comment" : " Provides access to socket functionality.\n\n\tThe interface supports two classes of sockets - stream sockets and datagram\n\tsockets.\n",
    "line" : 165,
    "char" : 1,
    "members" : [
     {
      "name" : "connectStream",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Connects to a stream listening socket.\n",
      "line" : 169,
      "char" : 17,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfMC3std6socket7AddressMQvDFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb13ConnectStatusZvZQCh",
      "originalType" : "nothrow @safe StreamSocketFD(scope Address peer_address, scope Address bind_address, ConnectCallback on_connect)",
      "parameters" : [
       {
        "name" : "peer_address",
        "deco" : "C3std6socket7Address",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "bind_address",
        "deco" : "C3std6socket7Address",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "on_connect",
        "deco" : "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb13ConnectStatusZv"
       }
      ]
     },
     {
      "name" : "cancelConnectStream",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Aborts asynchronous connect by closing the socket.\n\n\t\tThis function may only invoked if the connection state is\n\t\t`ConnectionState.connecting`. It will cancel the connection attempt and\n\t\tguarantees that the connection callback will not be invoked in the\n\t\tfuture.\n\n\t\tNote that upon completion, the socket handle will be invalid, regardless\n\t\tof the number of calls to `addRef`, and must not be used for further\n\t\toperations.\n\n\t\tParams:\n\t\t\tsock = Handle of the socket that is currently establishing a\n\t\t\t\tconnection\n",
      "line" : 186,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDZv",
      "parameters" : [
       {
        "name" : "sock",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       }
      ]
     },
     {
      "name" : "adoptStream",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Adopts an existing stream socket.\n\n\t\tThe given socket must be in a connected state. It will be automatically\n\t\tswitched to non-blocking mode if necessary. Beware that this may have\n\t\tside effects in other code that uses the socket and assumes blocking\n\t\toperations.\n\n\t\tParams:\n\t\t\tsocket = Socket file descriptor to adopt\n\n\t\tReturns:\n\t\t\tReturns a socket handle corresponding to the passed socket\n\t\t\t\tdescriptor. If the same file descriptor is already registered,\n\t\t\t\t`StreamSocketFD.invalid` will be returned instead.\n",
      "line" : 203,
      "char" : 17,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfiZS9eventcore6driver14StreamSocketFD",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "i"
       }
      ]
     },
     {
      "name" : "listenStream",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Creates a socket listening for incoming stream connections.\n",
      "line" : 206,
      "char" : 23,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfMC3std6socket7AddressE9eventcore6driver19StreamListenOptionsDFNbNfSQBtQBm20StreamListenSocketFDSQCwQCp14StreamSocketFDMCQDuQDn10RefAddressZvZQCx",
      "originalType" : "nothrow @safe StreamListenSocketFD(scope Address bind_address, StreamListenOptions options, AcceptCallback on_accept)",
      "parameters" : [
       {
        "name" : "bind_address",
        "deco" : "C3std6socket7Address",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "options",
        "deco" : "E9eventcore6driver19StreamListenOptions"
       },
       {
        "name" : "on_accept",
        "deco" : "DFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZv"
       }
      ]
     },
     {
      "name" : "listenStream",
      "kind" : "function",
      "protection" : "public",
      "line" : 208,
      "char" : 29,
      "storageClass" : [
       "final",
       "abstract"
      ],
      "deco" : "FNbNfMC3std6socket7AddressDFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZvZQDi",
      "originalType" : "nothrow @safe StreamListenSocketFD(scope Address bind_address, AcceptCallback on_accept)",
      "parameters" : [
       {
        "name" : "bind_address",
        "deco" : "C3std6socket7Address",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "on_accept",
        "deco" : "DFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZv"
       }
      ],
      "endline" : 210,
      "endchar" : 2
     },
     {
      "name" : "waitForConnections",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Starts to wait for incoming connections on a listening socket.\n",
      "line" : 213,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver20StreamListenSocketFDDFNbNfQBuSQBxQBq14StreamSocketFDMCQCvQCo10RefAddressZvZv",
      "originalType" : "nothrow @safe void(StreamListenSocketFD sock, AcceptCallback on_accept)",
      "parameters" : [
       {
        "name" : "sock",
        "deco" : "S9eventcore6driver20StreamListenSocketFD"
       },
       {
        "name" : "on_accept",
        "deco" : "DFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZv"
       }
      ]
     },
     {
      "name" : "getConnectionState",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Determines the current connection state.\n",
      "line" : 216,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDZEQBjQBc15ConnectionState",
      "parameters" : [
       {
        "name" : "sock",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       }
      ]
     },
     {
      "name" : "getLocalAddress",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Retrieves the bind address of a socket.\n\n\t\tExample:\n\t\tThe following code can be used to retrieve an IPv4/IPv6 address\n\t\tallocated on the stack. Note that Unix domain sockets require a larger\n\t\tbuffer (e.g. `sockaddr_storage`).\n\t\t---\n\t\tscope storage = new UnknownAddress;\n\t\tscope sockaddr = new RefAddress(storage.name, storage.nameLen);\n\t\teventDriver.sockets.getLocalAddress(sock, sockaddr);\n\t\t---\n",
      "line" : 230,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver8SocketFDMCQBcQv10RefAddressZb",
      "parameters" : [
       {
        "name" : "sock",
        "deco" : "S9eventcore6driver8SocketFD"
       },
       {
        "name" : "dst",
        "deco" : "C9eventcore6driver10RefAddress",
        "storageClass" : [
         "scope"
        ]
       }
      ]
     },
     {
      "name" : "getRemoteAddress",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Retrieves the address of the connected peer.\n\n\t\tExample:\n\t\tThe following code can be used to retrieve an IPv4/IPv6 address\n\t\tallocated on the stack. Note that Unix domain sockets require a larger\n\t\tbuffer (e.g. `sockaddr_storage`).\n\t\t---\n\t\tscope storage = new UnknownAddress;\n\t\tscope sockaddr = new RefAddress(storage.name, storage.nameLen);\n\t\teventDriver.sockets.getLocalAddress(sock, sockaddr);\n\t\t---\n",
      "line" : 244,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver8SocketFDMCQBcQv10RefAddressZb",
      "parameters" : [
       {
        "name" : "sock",
        "deco" : "S9eventcore6driver8SocketFD"
       },
       {
        "name" : "dst",
        "deco" : "C9eventcore6driver10RefAddress",
        "storageClass" : [
         "scope"
        ]
       }
      ]
     },
     {
      "name" : "setTCPNoDelay",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Sets the `TCP_NODELAY` option on a socket\n",
      "line" : 247,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDbZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "enable",
        "deco" : "b"
       }
      ]
     },
     {
      "name" : "setKeepAlive",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Sets to `SO_KEEPALIVE` socket option on a socket.\n",
      "line" : 250,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDbZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "enable",
        "deco" : "b"
       }
      ]
     },
     {
      "name" : "setKeepAliveParams",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Enables keepalive for the TCP socket and sets additional parameters.\n\t\tSilently ignores unsupported systems (anything but Windows and Linux).\n\n\t\tParams:\n\t\t\tsocket = Socket file descriptor to set options on.\n\t\t\tidle = The time the connection needs to remain idle\n\t\t\t\tbefore TCP starts sending keepalive probes.\n\t\t\tinterval = The time between individual keepalive probes.\n\t\t\tprobeCount = The maximum number of keepalive probes TCP should send\n\t\t\t\tbefore dropping the connection. Has no effect on Windows.\n",
      "line" : 263,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDS4core4time8DurationQuiZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "idle",
        "deco" : "S4core4time8Duration"
       },
       {
        "name" : "interval",
        "deco" : "S4core4time8Duration"
       },
       {
        "name" : "probeCount",
        "deco" : "i",
        "default" : "5"
       }
      ]
     },
     {
      "name" : "setUserTimeout",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Sets `TCP_USER_TIMEOUT` socket option (linux only). https://tools.ietf.org/html/rfc5482\n",
      "line" : 266,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDS4core4time8DurationZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "timeout",
        "deco" : "S4core4time8Duration"
       }
      ]
     },
     {
      "name" : "read",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Reads data from a stream socket.\n\n\t\tNote that only a single read operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_read_finish` got called, or\n\t\t`cancelRead` was called before issuing the next call to `read`.\n\n\t\tWaiting_for_data_availability:\n\t\t\tWith the special combination of a zero-length buffer and `mode`\n\t\t\tset to either `IOMode.once` or `IOMode.all`, this function will\n\t\t\twait until data is available on the socket without reading\n\t\t\tanything.\n\n\t\t\tNote that in this case the `IOStatus` parameter of the callback\n\t\t\twill not reliably reflect a passive connection close. It is\n\t\t\tnecessary to actually read some data to make sure this case\n\t\t\tis detected.\n",
      "line" : 285,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDAhEQBkQBd6IOModeDFNbNfQCeEQChQCa8IOStatusmZvZv",
      "originalType" : "nothrow @safe void(StreamSocketFD socket, ubyte[] buffer, IOMode mode, IOCallback on_read_finish)",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "buffer",
        "deco" : "Ah"
       },
       {
        "name" : "mode",
        "deco" : "E9eventcore6driver6IOMode"
       },
       {
        "name" : "on_read_finish",
        "deco" : "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv"
       }
      ]
     },
     {
      "name" : "cancelRead",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Cancels an ongoing read operation.\n\n\t\tAfter this function has been called, the `IOCallback` specified in\n\t\tthe call to `read` is guaranteed to not be called.\n",
      "line" : 292,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       }
      ]
     },
     {
      "name" : "write",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Reads data from a stream socket.\n\n\t\tNote that only a single write operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_write_finish` got called, or\n\t\t`cancelWrite` was called before issuing the next call to `write`.\n",
      "line" : 300,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDAxhEQBlQBe6IOModeDFNbNfQCfEQCiQCb8IOStatusmZvZv",
      "originalType" : "nothrow @safe void(StreamSocketFD socket, const(ubyte)[] buffer, IOMode mode, IOCallback on_write_finish)",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "buffer",
        "deco" : "Axh"
       },
       {
        "name" : "mode",
        "deco" : "E9eventcore6driver6IOMode"
       },
       {
        "name" : "on_write_finish",
        "deco" : "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv"
       }
      ]
     },
     {
      "name" : "cancelWrite",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Cancels an ongoing write operation.\n\n\t\tAfter this function has been called, the `IOCallback` specified in\n\t\tthe call to `write` is guaranteed to not be called.\n",
      "line" : 307,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       }
      ]
     },
     {
      "name" : "waitForData",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Waits for incoming data without actually reading it.\n",
      "line" : 311,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDDFNbNfQBoEQBrQBk8IOStatusmZvZv",
      "originalType" : "nothrow @safe void(StreamSocketFD socket, IOCallback on_data_available)",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "on_data_available",
        "deco" : "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv"
       }
      ]
     },
     {
      "name" : "shutdown",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Initiates a connection close.\n",
      "line" : 315,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDbbZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "shut_read",
        "deco" : "b"
       },
       {
        "name" : "shut_write",
        "deco" : "b"
       }
      ]
     },
     {
      "name" : "createDatagramSocket",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Creates a connection-less datagram socket.\n\n\t\tParams:\n\t\t\tbind_address = The local bind address to use for the socket. It\n\t\t\t\twill be able to receive any messages sent to this address.\n\t\t\ttarget_address = Optional default target address. If this is\n\t\t\t\tspecified and the target address parameter of `send` is\n\t\t\t\tleft to `null`, it will be used instead.\n\n\t\tReturns:\n\t\t\tReturns a datagram socket handle if the socket was created\n\t\t\tsuccessfully. Otherwise returns `DatagramSocketFD.invalid`.\n",
      "line" : 330,
      "char" : 19,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfMC3std6socket7AddressMQvE9eventcore6driver21DatagramCreateOptionsZSQBqQBj16DatagramSocketFD",
      "originalType" : "nothrow @safe DatagramSocketFD(scope Address bind_address, scope Address target_address, DatagramCreateOptions options = DatagramCreateOptions.init)",
      "parameters" : [
       {
        "name" : "bind_address",
        "deco" : "C3std6socket7Address",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "target_address",
        "deco" : "C3std6socket7Address",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "options",
        "deco" : "E9eventcore6driver21DatagramCreateOptions",
        "default" : "DatagramCreateOptions.none"
       }
      ]
     },
     {
      "name" : "adoptDatagramSocket",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Adopts an existing datagram socket.\n\n\t\tThe socket must be properly bound before this function is called.\n\n\t\tParams:\n\t\t\tsocket = Socket file descriptor to adopt\n\n\t\tReturns:\n\t\t\tReturns a socket handle corresponding to the passed socket\n\t\t\t\tdescriptor. If the same file descriptor is already registered,\n\t\t\t\t`DatagramSocketFD.invalid` will be returned instead.\n",
      "line" : 346,
      "char" : 19,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfiZS9eventcore6driver16DatagramSocketFD",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "i"
       }
      ]
     },
     {
      "name" : "setTargetAddress",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Sets an address to use as the default target address for sent datagrams.\n",
      "line" : 350,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver16DatagramSocketFDMC3std6socket7AddressZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       },
       {
        "name" : "target_address",
        "deco" : "C3std6socket7Address",
        "storageClass" : [
         "scope"
        ]
       }
      ]
     },
     {
      "name" : "setBroadcast",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Sets the `SO_BROADCAST` socket option.\n",
      "line" : 353,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver16DatagramSocketFDbZb",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       },
       {
        "name" : "enable",
        "deco" : "b"
       }
      ]
     },
     {
      "name" : "joinMulticastGroup",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Joins the multicast group associated with the given IP address.\n",
      "line" : 356,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver16DatagramSocketFDMC3std6socket7AddresskZb",
      "originalType" : "nothrow @safe bool(DatagramSocketFD socket, scope Address multicast_address, uint interface_index = 0)",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       },
       {
        "name" : "multicast_address",
        "deco" : "C3std6socket7Address",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "interface_index",
        "deco" : "k",
        "default" : "0u"
       }
      ]
     },
     {
      "name" : "receive",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Receives a single datagram.\n",
      "line" : 359,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver16DatagramSocketFDAhEQBmQBf6IOModeDFNbNfQCgEQCjQCc8IOStatusmMCQDbQCu10RefAddressZvZv",
      "originalType" : "nothrow @safe void(DatagramSocketFD socket, ubyte[] buffer, IOMode mode, DatagramIOCallback on_receive_finish)",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       },
       {
        "name" : "buffer",
        "deco" : "Ah"
       },
       {
        "name" : "mode",
        "deco" : "E9eventcore6driver6IOMode"
       },
       {
        "name" : "on_receive_finish",
        "deco" : "DFNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd8IOStatusmMCQCcQBv10RefAddressZv"
       }
      ]
     },
     {
      "name" : "cancelReceive",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Cancels an ongoing wait for an incoming datagram.\n",
      "line" : 361,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver16DatagramSocketFDZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       }
      ]
     },
     {
      "name" : "send",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Sends a single datagram.\n",
      "line" : 363,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver16DatagramSocketFDAxhEQBnQBg6IOModeC3std6socket7AddressDFNbNfQDbEQDeQCx8IOStatusmMCQDwQDp10RefAddressZvZv",
      "originalType" : "nothrow @safe void(DatagramSocketFD socket, const(ubyte)[] buffer, IOMode mode, Address target_address, DatagramIOCallback on_send_finish)",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       },
       {
        "name" : "buffer",
        "deco" : "Axh"
       },
       {
        "name" : "mode",
        "deco" : "E9eventcore6driver6IOMode"
       },
       {
        "name" : "target_address",
        "deco" : "C3std6socket7Address"
       },
       {
        "name" : "on_send_finish",
        "deco" : "DFNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd8IOStatusmMCQCcQBv10RefAddressZv"
       }
      ]
     },
     {
      "name" : "cancelSend",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Cancels an ongoing wait for an outgoing datagram.\n",
      "line" : 365,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver16DatagramSocketFDZv",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       }
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Determines whether the given socket handle is valid.\n\n\t\tA handle that is invalid will result in no operations being carried out\n\t\twhen used. In particular `addRef`/`releaseRef` will have no effect, but\n\t\tcan safely be called and I/O operations will result in\n\t\t`IOStatus.invalidHandle`.\n\n\t\tA valid handle gets invalid when either the reference count drops to\n\t\tzero, or after the socket was explicitly closed.\n",
      "line" : 377,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver8SocketFDZb",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver8SocketFD"
       }
      ]
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Increments the reference count of the given socket.\n",
      "line" : 381,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver8SocketFDZv",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver8SocketFD"
       }
      ]
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Decrements the reference count of the given socket.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n\n\t\t\tPassing an invalid handle will result in a return value of `true`.\n",
      "line" : 393,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver8SocketFDZb",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver8SocketFD"
       }
      ]
     },
     {
      "name" : "setOption",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Enables or disables a socket option.\n",
      "line" : 397,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd20DatagramSocketOptionbZb",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       },
       {
        "name" : "option",
        "deco" : "E9eventcore6driver20DatagramSocketOption"
       },
       {
        "name" : "enable",
        "deco" : "b"
       }
      ]
     },
     {
      "name" : "setOption",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 399,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14StreamSocketFDEQBiQBb18StreamSocketOptionbZb",
      "parameters" : [
       {
        "name" : "socket",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "option",
        "deco" : "E9eventcore6driver18StreamSocketOption"
       },
       {
        "name" : "enable",
        "deco" : "b"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : " Retrieves a reference to a user-defined value associated with a descriptor.\n",
      "line" : 403,
      "char" : 24,
      "name" : "userData",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       },
       {
        "name" : "FD",
        "kind" : "type"
       }
      ],
      "constraint" : "hasNoGCLifetime!T",
      "members" : [
       {
        "name" : "userData",
        "kind" : "function",
        "line" : 403,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "@nogc @property ref @trusted T(FD descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "FD"
         }
        ],
        "endline" : 410,
        "endchar" : 2
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 413,
      "char" : 24,
      "name" : "userData",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       },
       {
        "name" : "FD",
        "kind" : "type"
       }
      ],
      "constraint" : "!hasNoGCLifetime!T",
      "members" : [
       {
        "name" : "userData",
        "kind" : "function",
        "line" : 413,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "@property ref @trusted T(FD descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "FD"
         }
        ],
        "endline" : 423,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Low-level user data access. Use `getUserData` instead.\n",
      "line" : 426,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNiS9eventcore6driver14StreamSocketFDmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @nogc @system void*(StreamSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "ditto\n",
      "line" : 428,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNiS9eventcore6driver20StreamListenSocketFDmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @nogc @system void*(StreamListenSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver20StreamListenSocketFD"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "ditto\n",
      "line" : 430,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNiS9eventcore6driver16DatagramSocketFDmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @nogc @system void*(DatagramSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 433,
    "char" : 6,
    "name" : "hasNoGCLifetime",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "hasNoGCLifetime",
      "kind" : "variable",
      "line" : 433,
      "char" : 6,
      "storageClass" : [
       "enum"
      ],
      "init" : "__traits(compiles, () @nogc @trusted\n{\nimport std.conv : emplace;\nT b = void;\nemplace!T(&b);\ndestroy(b);\n}\n)"
     }
    ]
   },
   {
    "name" : "__unittest_L434_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 434,
    "char" : 1,
    "endline" : 444,
    "endchar" : 1
   },
   {
    "name" : "EventDriverDNS",
    "kind" : "interface",
    "protection" : "public",
    "comment" : " Performs asynchronous DNS queries.\n",
    "line" : 444,
    "char" : 1,
    "members" : [
     {
      "name" : "lookupHost",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Looks up addresses corresponding to the given DNS name.\n",
      "line" : 447,
      "char" : 14,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfAyaDFNbNfS9eventcore6driver11DNSLookupIDEQBfQy9DNSStatusMACQBxQBq10RefAddressZvZQCt",
      "originalType" : "nothrow @safe DNSLookupID(string name, DNSLookupCallback on_lookup_finished)",
      "parameters" : [
       {
        "name" : "name",
        "deco" : "Aya"
       },
       {
        "name" : "on_lookup_finished",
        "deco" : "DFNbNfS9eventcore6driver11DNSLookupIDEQBfQy9DNSStatusMACQBxQBq10RefAddressZv"
       }
      ]
     },
     {
      "name" : "cancelLookup",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Cancels an ongoing DNS lookup.\n",
      "line" : 450,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver11DNSLookupIDZv",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver11DNSLookupID"
       }
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Determines whether the given DNS lookup handle is valid.\n\n\t\tA valid handle gets invalid when the lookup has completed or got\n\t\tcancelled.\n",
      "line" : 457,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver11DNSLookupIDZb",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver11DNSLookupID"
       }
      ]
     }
    ]
   },
   {
    "name" : "EventDriverFiles",
    "kind" : "interface",
    "protection" : "public",
    "comment" : " Provides read/write operations on the local file system.\n",
    "line" : 463,
    "char" : 1,
    "members" : [
     {
      "name" : "open",
      "kind" : "function",
      "protection" : "public",
      "line" : 465,
      "char" : 9,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfAyaE9eventcore6driver12FileOpenModeZSQBhQBa6FileFD",
      "parameters" : [
       {
        "name" : "path",
        "deco" : "Aya"
       },
       {
        "name" : "mode",
        "deco" : "E9eventcore6driver12FileOpenMode"
       }
      ]
     },
     {
      "name" : "adopt",
      "kind" : "function",
      "protection" : "public",
      "line" : 466,
      "char" : 9,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfiZS9eventcore6driver6FileFD",
      "parameters" : [
       {
        "name" : "system_file_handle",
        "deco" : "i"
       }
      ]
     },
     {
      "name" : "close",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Disallows any reads/writes and removes any exclusive locks.\n\n\t\tNote that the file handle may become invalid at any point after the\n\t\tcall to `close`, regardless of its current reference count. Any\n\t\toperations on the handle will not have an effect.\n",
      "line" : 474,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6FileFDDFNbNfQBfEQBiQBb11CloseStatusZvZv",
      "originalType" : "nothrow @safe void(FileFD file, FileCloseCallback on_closed)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S9eventcore6driver6FileFD"
       },
       {
        "name" : "on_closed",
        "deco" : "DFNbNfS9eventcore6driver6FileFDEQzQr11CloseStatusZv"
       }
      ]
     },
     {
      "name" : "getSize",
      "kind" : "function",
      "protection" : "public",
      "line" : 476,
      "char" : 8,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6FileFDZm",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S9eventcore6driver6FileFD"
       }
      ]
     },
     {
      "name" : "truncate",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Shrinks or extends a file to the specified size.\n\n\t\tParams:\n\t\t\tfile = Handle of the file to resize\n\t\t\tsize = Desired file size in bytes\n\t\t\ton_finish = Called when the operation finishes - the `size`\n\t\t\t\tparameter is always set to zero\n",
      "line" : 486,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6FileFDmDFNbNfQBgEQBjQBc8IOStatusmZvZv",
      "originalType" : "nothrow @safe void(FileFD file, ulong size, FileIOCallback on_finish)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S9eventcore6driver6FileFD"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "on_finish",
        "deco" : "DFNbNfS9eventcore6driver6FileFDEQzQr8IOStatusmZv"
       }
      ]
     },
     {
      "name" : "write",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Writes data to a file\n\n\t\tNote that only a single read operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_read_finish` got called, or\n\t\t`cancelRead` was called before issuing the next call to `read`.\n",
      "line" : 494,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6FileFDmAxhEQBdQw6IOModeDFNbNfQBwEQBzQBs8IOStatusmZvZv",
      "originalType" : "nothrow @safe void(FileFD file, ulong offset, const(ubyte)[] buffer, IOMode mode, FileIOCallback on_write_finish)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S9eventcore6driver6FileFD"
       },
       {
        "name" : "offset",
        "deco" : "m"
       },
       {
        "name" : "buffer",
        "deco" : "Axh"
       },
       {
        "name" : "mode",
        "deco" : "E9eventcore6driver6IOMode"
       },
       {
        "name" : "on_write_finish",
        "deco" : "DFNbNfS9eventcore6driver6FileFDEQzQr8IOStatusmZv"
       }
      ]
     },
     {
      "name" : "cancelWrite",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Cancels an ongoing write operation.\n\n\t\tAfter this function has been called, the `FileIOCallback` specified in\n\t\tthe call to `write` is guaranteed not to be called.\n",
      "line" : 501,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6FileFDZv",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S9eventcore6driver6FileFD"
       }
      ]
     },
     {
      "name" : "read",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Reads data from a file.\n\n\t\tNote that only a single read operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_read_finish` got called, or\n\t\t`cancelRead` was called before issuing the next call to `read`.\n",
      "line" : 509,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6FileFDmAhEQBcQv6IOModeDFNbNfQBvEQByQBr8IOStatusmZvZv",
      "originalType" : "nothrow @safe void(FileFD file, ulong offset, ubyte[] buffer, IOMode mode, FileIOCallback on_read_finish)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S9eventcore6driver6FileFD"
       },
       {
        "name" : "offset",
        "deco" : "m"
       },
       {
        "name" : "buffer",
        "deco" : "Ah"
       },
       {
        "name" : "mode",
        "deco" : "E9eventcore6driver6IOMode"
       },
       {
        "name" : "on_read_finish",
        "deco" : "DFNbNfS9eventcore6driver6FileFDEQzQr8IOStatusmZv"
       }
      ]
     },
     {
      "name" : "cancelRead",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Cancels an ongoing read operation.\n\n\t\tAfter this function has been called, the `FileIOCallback` specified in\n\t\tthe call to `read` is guaranteed not to be called.\n",
      "line" : 516,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6FileFDZv",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S9eventcore6driver6FileFD"
       }
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Determines whether the given file handle is valid.\n\n\t\tA handle that is invalid will result in no operations being carried out\n\t\twhen used. In particular `addRef`/`releaseRef` will have no effect, but\n\t\tcan safely be called and I/O operations will result in\n\t\t`IOStatus.invalidHandle`.\n\n\t\tA valid handle gets invalid when either the reference count drops to\n\t\tzero, or after the file was explicitly closed.\n",
      "line" : 528,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver6FileFDZb",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver6FileFD"
       }
      ]
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Increments the reference count of the given file.\n",
      "line" : 532,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6FileFDZv",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver6FileFD"
       }
      ]
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Decrements the reference count of the given file.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n\n\t\t\tPassing an invalid handle will result in a return value of `true`.\n",
      "line" : 544,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6FileFDZb",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver6FileFD"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : " Retrieves a reference to a user-defined value associated with a descriptor.\n",
      "line" : 548,
      "char" : 24,
      "name" : "userData",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "userData",
        "kind" : "function",
        "line" : 548,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "@property ref @trusted T(FileFD descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "FileFD"
         }
        ],
        "endline" : 554,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Low-level user data access. Use `userData` instead.\n",
      "line" : 557,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbS9eventcore6driver6FileFDmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @system void*(FileFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver6FileFD"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     }
    ]
   },
   {
    "name" : "EventDriverEvents",
    "kind" : "interface",
    "protection" : "public",
    "comment" : " Cross-thread notifications\n\n\t\"Events\" can be used to wake up the event loop of a foreign thread. This is\n\tthe basis for all kinds of thread synchronization primitives, such as\n\tmutexes, condition variables, message queues etc. Such primitives, in case\n\tof extended wait periods, should use events rather than traditional means\n\tto block, such as busy loops or kernel based wait mechanisms to avoid\n\tstalling the event loop.\n",
    "line" : 570,
    "char" : 1,
    "members" : [
     {
      "name" : "create",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Creates a new cross-thread event.\n",
      "line" : 573,
      "char" : 10,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfZS9eventcore6driver7EventID"
     },
     {
      "name" : "trigger",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Triggers an event owned by the current thread.\n",
      "line" : 576,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7EventIDbZv",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S9eventcore6driver7EventID"
       },
       {
        "name" : "notify_all",
        "deco" : "b"
       }
      ]
     },
     {
      "name" : "trigger",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Triggers an event possibly owned by a different thread.\n",
      "line" : 579,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "OFNbNfS9eventcore6driver7EventIDbZv",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S9eventcore6driver7EventID"
       },
       {
        "name" : "notify_all",
        "deco" : "b"
       }
      ]
     },
     {
      "name" : "wait",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Waits until an event gets triggered.\n\n\t\tMultiple concurrent waits are allowed.\n",
      "line" : 585,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7EventIDDFNbNfQBgZvZv",
      "originalType" : "nothrow @safe void(EventID event, EventCallback on_event)",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S9eventcore6driver7EventID"
       },
       {
        "name" : "on_event",
        "deco" : "DFNbNfS9eventcore6driver7EventIDZv"
       }
      ]
     },
     {
      "name" : "cancelWait",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Cancels an ongoing wait operation.\n",
      "line" : 588,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7EventIDDFNbNfQBgZvZv",
      "originalType" : "nothrow @safe void(EventID event, EventCallback on_event)",
      "parameters" : [
       {
        "name" : "event",
        "deco" : "S9eventcore6driver7EventID"
       },
       {
        "name" : "on_event",
        "deco" : "DFNbNfS9eventcore6driver7EventIDZv"
       }
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Determines whether the given event handle is valid.\n\n\t\tA handle that is invalid will result in no operations being carried out\n\t\twhen used. In particular `addRef`/`releaseRef` will have no effect, but\n\t\tcan safely be called.\n\n\t\tA valid handle gets invalid when the reference count drops to zero.\n",
      "line" : 598,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver7EventIDZb",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver7EventID"
       }
      ]
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Increments the reference count of the given event.\n",
      "line" : 602,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7EventIDZv",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7EventID"
       }
      ]
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Decrements the reference count of the given event.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n\n\t\t\tPassing an invalid handle will result in a return value of `true`.\n",
      "line" : 614,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7EventIDZb",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7EventID"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : " Retrieves a reference to a user-defined value associated with a descriptor.\n",
      "line" : 618,
      "char" : 24,
      "name" : "userData",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "userData",
        "kind" : "function",
        "line" : 618,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "@property ref @trusted T(EventID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "EventID"
         }
        ],
        "endline" : 624,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Low-level user data access. Use `userData` instead.\n",
      "line" : 627,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbS9eventcore6driver7EventIDmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @system void*(EventID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7EventID"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     }
    ]
   },
   {
    "name" : "EventDriverSignals",
    "kind" : "interface",
    "protection" : "public",
    "comment" : " Handling of POSIX signals.\n",
    "line" : 633,
    "char" : 1,
    "members" : [
     {
      "name" : "listen",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Starts listening for the specified POSIX signal.\n\n\t\tNote that if a default signal handler exists for the signal, it will be\n\t\tdisabled by using this function.\n\n\t\tParams:\n\t\t\tsig = The number of the signal to listen for\n\t\t\ton_signal = Callback that gets called whenever a matching signal\n\t\t\t\tgets received\n\n\t\tReturns:\n\t\t\tReturns an identifier that identifies the resource associated with\n\t\t\tthe signal. Giving up ownership of this resource using `releaseRef`\n\t\t\twill re-enable the default signal handler, if any was present.\n\n\t\t\tFor any error condition, `SignalListenID.invalid` will be returned\n\t\t\tinstead.\n",
      "line" : 653,
      "char" : 17,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfiDFNbNfS9eventcore6driver14SignalListenIDEQBiQBb12SignalStatusiZvZQCh",
      "originalType" : "nothrow @safe SignalListenID(int sig, SignalCallback on_signal)",
      "parameters" : [
       {
        "name" : "sig",
        "deco" : "i"
       },
       {
        "name" : "on_signal",
        "deco" : "DFNbNfS9eventcore6driver14SignalListenIDEQBiQBb12SignalStatusiZv"
       }
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Determines whether the given signal handle is valid.\n\n\t\tA handle that is invalid will result in no operations being carried out\n\t\twhen used. In particular `addRef`/`releaseRef` will have no effect, but\n\t\tcan safely be called.\n\n\t\tA valid handle gets invalid when the reference count drops to zero.\n",
      "line" : 663,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver14SignalListenIDZb",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver14SignalListenID"
       }
      ]
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Increments the reference count of the given resource.\n",
      "line" : 667,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14SignalListenIDZv",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver14SignalListenID"
       }
      ]
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n\n\t\t\tPassing an invalid handle will result in a return value of `true`.\n",
      "line" : 679,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver14SignalListenIDZb",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver14SignalListenID"
       }
      ]
     }
    ]
   },
   {
    "name" : "EventDriverTimers",
    "kind" : "interface",
    "protection" : "public",
    "line" : 682,
    "char" : 1,
    "members" : [
     {
      "name" : "create",
      "kind" : "function",
      "protection" : "public",
      "line" : 684,
      "char" : 10,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfZS9eventcore6driver7TimerID"
     },
     {
      "name" : "set",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Run the timer.\n\n\t\tParams:\n\t\t\ttimer = the id of the timer, created by `create` call.\n\t\t\ttimeout = a duration to the first firing of the timer\n\t\t\trepeat = a duration between periodic timer firings - set to zero\n\t\t\t\tto set a single-fire timer\n",
      "line" : 694,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDS4core4time8DurationQuZv",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       },
       {
        "name" : "timeout",
        "deco" : "S4core4time8Duration"
       },
       {
        "name" : "repeat",
        "deco" : "S4core4time8Duration"
       }
      ]
     },
     {
      "name" : "stop",
      "kind" : "function",
      "protection" : "public",
      "line" : 696,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZv",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ]
     },
     {
      "name" : "isPending",
      "kind" : "function",
      "protection" : "public",
      "line" : 698,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZb",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ]
     },
     {
      "name" : "isPeriodic",
      "kind" : "function",
      "protection" : "public",
      "line" : 699,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZb",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ]
     },
     {
      "name" : "wait",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Waits for the timer to fire.\n\n\t\tImportant: the callback of the timer will be called exactly once, unless\n\t\t`cancelWait` gets called first. `wait` needs to be called again to\n\t\treceive future timer events (see https://github.com/vibe-d/eventcore/issues/172\n\t\tfor reasons behind that behavior).\n\n\t\tNote that the `TimerCallback` based overload will not call the\n\t\tcallback if `stop` gets called before the timer fires, whereas the\n\t\t`TimerCallback2` based overload will call the callback with the `fired`\n\t\tparameter set to `false`.\n",
      "line" : 713,
      "char" : 13,
      "storageClass" : [
       "final",
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDDFNbNfQBgZvZv",
      "originalType" : "nothrow @safe void(TimerID timer, TimerCallback callback)",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       },
       {
        "name" : "callback",
        "deco" : "DFNbNfS9eventcore6driver7TimerIDZv"
       }
      ],
      "endline" : 717,
      "endchar" : 2
     },
     {
      "name" : "wait",
      "kind" : "function",
      "protection" : "public",
      "comment" : "ditto\n",
      "line" : 719,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDDFNbNfQBgbZvZv",
      "originalType" : "nothrow @safe void(TimerID timer, TimerCallback2 callback)",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       },
       {
        "name" : "callback",
        "deco" : "DFNbNfS9eventcore6driver7TimerIDbZv"
       }
      ]
     },
     {
      "name" : "cancelWait",
      "kind" : "function",
      "protection" : "public",
      "line" : 720,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZv",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Determines whether the given timer handle is valid.\n\n\t\tA handle that is invalid will result in no operations being carried out\n\t\twhen used. In particular `addRef`/`releaseRef` will have no effect, but\n\t\tcan safely be called.\n\n\t\tA valid handle gets invalid when the reference count drops to zero.\n",
      "line" : 730,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver7TimerIDZb",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ]
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Increments the reference count of the given resource.\n",
      "line" : 734,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZv",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ]
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n\n\t\t\tPassing an invalid handle will result in a return value of `true`.\n",
      "line" : 746,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZb",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ]
     },
     {
      "name" : "isUnique",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Determines if the given timer's reference count equals one.\n",
      "line" : 749,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNfS9eventcore6driver7TimerIDZb",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : " Retrieves a reference to a user-defined value associated with a descriptor.\n",
      "line" : 753,
      "char" : 24,
      "name" : "userData",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "userData",
        "kind" : "function",
        "line" : 753,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "@property ref @trusted T(TimerID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "TimerID"
         }
        ],
        "endline" : 759,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Low-level user data access. Use `userData` instead.\n",
      "line" : 762,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbS9eventcore6driver7TimerIDmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @system void*(TimerID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     }
    ]
   },
   {
    "name" : "EventDriverWatchers",
    "kind" : "interface",
    "protection" : "public",
    "line" : 765,
    "char" : 1,
    "members" : [
     {
      "name" : "watchDirectory",
      "kind" : "function",
      "protection" : "public",
      "comment" : "Watches a directory or a directory sub tree for changes.\n",
      "line" : 768,
      "char" : 12,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfAyabDFNbNfS9eventcore6driver9WatcherIDKxSQBeQx10FileChangeZvZQBz",
      "originalType" : "nothrow @safe WatcherID(string path, bool recursive, FileChangesCallback callback)",
      "parameters" : [
       {
        "name" : "path",
        "deco" : "Aya"
       },
       {
        "name" : "recursive",
        "deco" : "b"
       },
       {
        "name" : "callback",
        "deco" : "DFNbNfS9eventcore6driver9WatcherIDKxSQBeQx10FileChangeZv"
       }
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Determines whether the given watcher handle is valid.\n\n\t\tA handle that is invalid will result in no operations being carried out\n\t\twhen used. In particular `addRef`/`releaseRef` will have no effect, but\n\t\tcan safely be called.\n\n\t\tA valid handle gets invalid when the reference count drops to zero.\n",
      "line" : 778,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver9WatcherIDZb",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver9WatcherID"
       }
      ]
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Increments the reference count of the given resource.\n",
      "line" : 782,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver9WatcherIDZv",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver9WatcherID"
       }
      ]
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n\n\t\t\tPassing an invalid handle will result in a return value of `true`.\n",
      "line" : 794,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver9WatcherIDZb",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver9WatcherID"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : " Retrieves a reference to a user-defined value associated with a descriptor.\n",
      "line" : 798,
      "char" : 24,
      "name" : "userData",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "userData",
        "kind" : "function",
        "line" : 798,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "@property ref @trusted T(WatcherID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "WatcherID"
         }
        ],
        "endline" : 804,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Low-level user data access. Use `userData` instead.\n",
      "line" : 807,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbS9eventcore6driver9WatcherIDmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @system void*(WatcherID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver9WatcherID"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     }
    ]
   },
   {
    "name" : "EventDriverProcesses",
    "kind" : "interface",
    "protection" : "public",
    "line" : 810,
    "char" : 1,
    "members" : [
     {
      "name" : "adopt",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Adopt an existing process.\n",
      "line" : 814,
      "char" : 12,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfiZS9eventcore6driver9ProcessID",
      "parameters" : [
       {
        "name" : "system_pid",
        "deco" : "i"
       }
      ]
     },
     {
      "name" : "spawn",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Spawn a child process.\n\n\t\tNote that if a default signal handler exists for the signal, it will be\n\t\tdisabled by using this function.\n\n\t\tParams:\n\t\t\targs = The program arguments. First one must be an executable.\n\t\t\tstdin = What should be done for stdin. Allows inheritance, piping,\n\t\t\t\tnothing or any specific fd. If this results in a Pipe,\n\t\t\t\tthe PipeFD will be set in the stdin result.\n\t\t\tstdout = See stdin, but also allows redirecting to stderr.\n\t\t\tstderr = See stdin, but also allows redirecting to stdout.\n\t\t\tenv = The environment variables to spawn the process with.\n\t\t\tconfig = Special process configurations.\n\t\t\tworking_dir = What to set the working dir in the process.\n\n\t\tReturns:\n\t\t\tReturns a Process struct containing the ProcessID and whatever\n\t\t\tpipes have been adopted for stdin, stdout and stderr.\n",
      "line" : 836,
      "char" : 10,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfAAyaS3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectZQCaSQCtQCs__TQCnVmi4TiTQChTEQClQCe21ProcessStdoutRedirectZQEgSQEzQEy__TQEtVmi4TiTQEnTEQErQEk21ProcessStderrRedirectZQGmxHQHkAyaEQGhQGa13ProcessConfigQImZSQHhQHa7Process",
      "originalType" : "nothrow @safe Process(string[] args, ProcessStdinFile stdin, ProcessStdoutFile stdout, ProcessStderrFile stderr, const STRINGAA env = null, ProcessConfig config = ProcessConfig.none, string working_dir = null)",
      "parameters" : [
       {
        "name" : "args",
        "deco" : "AAya"
       },
       {
        "name" : "stdin",
        "deco" : "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectZQCa"
       },
       {
        "name" : "stdout",
        "deco" : "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectTEQBkQBd21ProcessStdoutRedirectZQDf"
       },
       {
        "name" : "stderr",
        "deco" : "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectTEQBkQBd21ProcessStderrRedirectZQDf"
       },
       {
        "name" : "env",
        "deco" : "xHAyaAya",
        "default" : "cast(const(STRINGAA))null"
       },
       {
        "name" : "config",
        "deco" : "E9eventcore6driver13ProcessConfig",
        "default" : "Config(Flags.none, null)"
       },
       {
        "name" : "working_dir",
        "deco" : "Aya",
        "default" : "null"
       }
      ]
     },
     {
      "name" : "hasExited",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Returns whether the process has exited yet.\n",
      "line" : 840,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver9ProcessIDZb",
      "parameters" : [
       {
        "name" : "pid",
        "deco" : "S9eventcore6driver9ProcessID"
       }
      ]
     },
     {
      "name" : "kill",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Kill the process using the given signal. Has different effects on different platforms.\n",
      "line" : 844,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver9ProcessIDiZv",
      "parameters" : [
       {
        "name" : "pid",
        "deco" : "S9eventcore6driver9ProcessID"
       },
       {
        "name" : "signal",
        "deco" : "i"
       }
      ]
     },
     {
      "name" : "wait",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Wait for the process to exit.\n\n\t\tReturns an identifier that can be used to cancel the wait.\n",
      "line" : 850,
      "char" : 9,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver9ProcessIDDFNbNfQBiiZvZm",
      "originalType" : "nothrow @safe size_t(ProcessID pid, ProcessWaitCallback on_process_exit)",
      "parameters" : [
       {
        "name" : "pid",
        "deco" : "S9eventcore6driver9ProcessID"
       },
       {
        "name" : "on_process_exit",
        "deco" : "DFNbNfS9eventcore6driver9ProcessIDiZv"
       }
      ]
     },
     {
      "name" : "cancelWait",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Cancel a wait for the given identifier returned by wait.\n",
      "line" : 854,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver9ProcessIDmZv",
      "originalType" : "nothrow @safe void(ProcessID pid, size_t waitId)",
      "parameters" : [
       {
        "name" : "pid",
        "deco" : "S9eventcore6driver9ProcessID"
       },
       {
        "name" : "waitId",
        "deco" : "m"
       }
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Determines whether the given process handle is valid.\n\n\t\tA handle that is invalid will result in no operations being carried out\n\t\twhen used. In particular `addRef`/`releaseRef` will have no effect, but\n\t\tcan safely be called.\n\n\t\tA valid handle gets invalid when the reference count drops to zero.\n",
      "line" : 864,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver9ProcessIDZb",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver9ProcessID"
       }
      ]
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Increments the reference count of the given resource.\n",
      "line" : 868,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver9ProcessIDZv",
      "parameters" : [
       {
        "name" : "pid",
        "deco" : "S9eventcore6driver9ProcessID"
       }
      ]
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated. This will not kill\n\t\tthe sub-process, nor \"detach\" it.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n\n\t\t\tPassing an invalid handle will result in a return value of `true`.\n",
      "line" : 881,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver9ProcessIDZb",
      "parameters" : [
       {
        "name" : "pid",
        "deco" : "S9eventcore6driver9ProcessID"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : " Retrieves a reference to a user-defined value associated with a descriptor.\n",
      "line" : 885,
      "char" : 24,
      "name" : "userData",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "userData",
        "kind" : "function",
        "line" : 885,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "@property ref @trusted T(ProcessID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "ProcessID"
         }
        ],
        "endline" : 891,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Low-level user data access. Use `userData` instead.\n",
      "line" : 894,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbS9eventcore6driver9ProcessIDmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @system void*(ProcessID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver9ProcessID"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     }
    ]
   },
   {
    "name" : "EventDriverPipes",
    "kind" : "interface",
    "protection" : "public",
    "line" : 897,
    "char" : 1,
    "members" : [
     {
      "name" : "adopt",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Adopt an existing pipe. This will modify the pipe to be non-blocking.\n\n\t\tNote that pipes generally only allow either reads or writes but not\n\t\tboth, it is up to you to only call valid functions.\n",
      "line" : 904,
      "char" : 9,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfiZS9eventcore6driver6PipeFD",
      "parameters" : [
       {
        "name" : "system_pipe_handle",
        "deco" : "i"
       }
      ]
     },
     {
      "name" : "read",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Reads data from a stream socket.\n\n\t\tNote that only a single read operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_read_finish` got called, or\n\t\t`cancelRead` was called before issuing the next call to `read`.\n",
      "line" : 912,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6PipeFDAhEQBbQu6IOModeDFNbNfQBuEQBxQBq8IOStatusmZvZv",
      "originalType" : "nothrow @safe void(PipeFD pipe, ubyte[] buffer, IOMode mode, PipeIOCallback on_read_finish)",
      "parameters" : [
       {
        "name" : "pipe",
        "deco" : "S9eventcore6driver6PipeFD"
       },
       {
        "name" : "buffer",
        "deco" : "Ah"
       },
       {
        "name" : "mode",
        "deco" : "E9eventcore6driver6IOMode"
       },
       {
        "name" : "on_read_finish",
        "deco" : "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv"
       }
      ]
     },
     {
      "name" : "cancelRead",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Cancels an ongoing read operation.\n\n\t\tAfter this function has been called, the `PipeIOCallback` specified in\n\t\tthe call to `read` is guaranteed to not be called.\n",
      "line" : 919,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6PipeFDZv",
      "parameters" : [
       {
        "name" : "pipe",
        "deco" : "S9eventcore6driver6PipeFD"
       }
      ]
     },
     {
      "name" : "write",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Writes data from a stream socket.\n\n\t\tNote that only a single write operation is allowed at once. The caller\n\t\tneeds to make sure that either `on_write_finish` got called, or\n\t\t`cancelWrite` was called before issuing the next call to `write`.\n",
      "line" : 927,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6PipeFDAxhEQBcQv6IOModeDFNbNfQBvEQByQBr8IOStatusmZvZv",
      "originalType" : "nothrow @safe void(PipeFD pipe, const(ubyte)[] buffer, IOMode mode, PipeIOCallback on_write_finish)",
      "parameters" : [
       {
        "name" : "pipe",
        "deco" : "S9eventcore6driver6PipeFD"
       },
       {
        "name" : "buffer",
        "deco" : "Axh"
       },
       {
        "name" : "mode",
        "deco" : "E9eventcore6driver6IOMode"
       },
       {
        "name" : "on_write_finish",
        "deco" : "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv"
       }
      ]
     },
     {
      "name" : "cancelWrite",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Cancels an ongoing write operation.\n\n\t\tAfter this function has been called, the `PipeIOCallback` specified in\n\t\tthe call to `write` is guaranteed to not be called.\n",
      "line" : 934,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6PipeFDZv",
      "parameters" : [
       {
        "name" : "pipe",
        "deco" : "S9eventcore6driver6PipeFD"
       }
      ]
     },
     {
      "name" : "waitForData",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Waits for incoming data without actually reading it.\n",
      "line" : 938,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6PipeFDDFNbNfQBfEQBiQBb8IOStatusmZvZv",
      "originalType" : "nothrow @safe void(PipeFD pipe, PipeIOCallback on_data_available)",
      "parameters" : [
       {
        "name" : "pipe",
        "deco" : "S9eventcore6driver6PipeFD"
       },
       {
        "name" : "on_data_available",
        "deco" : "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv"
       }
      ]
     },
     {
      "name" : "close",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Immediately close the pipe. Future read or write operations may fail.\n\n\t\tNote that the file handle may become invalid at any point after the\n\t\tcall to `close`, regardless of its current reference count. Any\n\t\toperations on the handle will not have an effect.\n",
      "line" : 946,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6PipeFDDFNbNfQBfEQBiQBb11CloseStatusZvZv",
      "originalType" : "nothrow @safe void(PipeFD file, PipeCloseCallback on_closed)",
      "parameters" : [
       {
        "name" : "file",
        "deco" : "S9eventcore6driver6PipeFD"
       },
       {
        "name" : "on_closed",
        "deco" : "DFNbNfS9eventcore6driver6PipeFDEQzQr11CloseStatusZv"
       }
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Determines whether the given pipe handle is valid.\n\n\t\tA handle that is invalid will result in no operations being carried out\n\t\twhen used. In particular `addRef`/`releaseRef` will have no effect, but\n\t\tcan safely be called and I/O operations will result in\n\t\t`IOStatus.invalidHandle`.\n\n\t\tA valid handle gets invalid when either the reference count drops to\n\t\tzero, or the pipe is explicitly closed.\n",
      "line" : 958,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver6PipeFDZb",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver6PipeFD"
       }
      ]
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Increments the reference count of the given resource.\n",
      "line" : 962,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6PipeFDZv",
      "parameters" : [
       {
        "name" : "pid",
        "deco" : "S9eventcore6driver6PipeFD"
       }
      ]
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "comment" : " Decrements the reference count of the given resource.\n\n\t\tOnce the reference count reaches zero, all associated resources will be\n\t\tfreed and the resource descriptor gets invalidated.\n\n\t\tReturns:\n\t\t\tReturns `false` $(I iff) the last reference was removed by this call.\n\n\t\t\tPassing an invalid handle will result in a return value of `true`.\n",
      "line" : 974,
      "char" : 7,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS9eventcore6driver6PipeFDZb",
      "parameters" : [
       {
        "name" : "pid",
        "deco" : "S9eventcore6driver6PipeFD"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "public",
      "comment" : " Retrieves a reference to a user-defined value associated with a descriptor.\n",
      "line" : 978,
      "char" : 24,
      "name" : "userData",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "userData",
        "kind" : "function",
        "line" : 978,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "@property ref @trusted T(PipeFD descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "PipeFD"
         }
        ],
        "endline" : 984,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Low-level user data access. Use `userData` instead.\n",
      "line" : 987,
      "char" : 18,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbS9eventcore6driver6PipeFDmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @system void*(PipeFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver6PipeFD"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ]
     }
    ]
   },
   {
    "name" : "RefAddress",
    "kind" : "class",
    "protection" : "public",
    "line" : 992,
    "char" : 7,
    "base" : "std.socket.Address",
    "members" : [
     {
      "name" : "core.sys.posix.sys.socket",
      "kind" : "import",
      "line" : 993,
      "char" : 26,
      "protection" : "private",
      "selective" : [
       "sockaddr",
       "socklen_t"
      ]
     },
     {
      "name" : "m_addr",
      "kind" : "variable",
      "protection" : "private",
      "line" : 997,
      "char" : 13,
      "deco" : "PS4core3sys5posixQk6socket8sockaddr",
      "offset" : 16
     },
     {
      "name" : "m_addrLen",
      "kind" : "variable",
      "protection" : "private",
      "line" : 998,
      "char" : 13,
      "deco" : "k",
      "originalType" : "socklen_t",
      "offset" : 24
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 1001,
      "char" : 2,
      "deco" : "FNbNfZC9eventcore6driver10RefAddress",
      "originalType" : "nothrow @safe ()",
      "endline" : 1001,
      "endchar" : 24
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 1002,
      "char" : 2,
      "deco" : "FNbNfPS4core3sys5posixQk6socket8sockaddrkZC9eventcore6driver10RefAddress",
      "originalType" : "nothrow @safe (sockaddr* addr, socklen_t addr_len)",
      "parameters" : [
       {
        "name" : "addr",
        "deco" : "PS4core3sys5posixQk6socket8sockaddr"
       },
       {
        "name" : "addr_len",
        "deco" : "k"
       }
      ],
      "endline" : 1002,
      "endchar" : 80
     },
     {
      "name" : "name",
      "kind" : "function",
      "protection" : "public",
      "line" : 1004,
      "char" : 31,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNaNbNdNiNlNfZPS4core3sys5posixQk6socket8sockaddr",
      "originalType" : "@property scope sockaddr*()",
      "endline" : 1004,
      "endchar" : 61,
      "overrides" : [
       "std.socket.Address.name"
      ]
     },
     {
      "name" : "name",
      "kind" : "function",
      "protection" : "public",
      "line" : 1005,
      "char" : 38,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNaNbNdNiNlNfZPxS4core3sys5posixQk6socket8sockaddr",
      "originalType" : "const @property scope const(sockaddr)*()",
      "endline" : 1005,
      "endchar" : 74,
      "overrides" : [
       "std.socket.Address.name"
      ]
     },
     {
      "name" : "nameLen",
      "kind" : "function",
      "protection" : "public",
      "line" : 1006,
      "char" : 31,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNaNbNdNiNlNfZk",
      "originalType" : "const @property scope socklen_t()",
      "endline" : 1006,
      "endchar" : 73,
      "overrides" : [
       "std.socket.Address.nameLen"
      ]
     },
     {
      "name" : "set",
      "kind" : "function",
      "protection" : "public",
      "line" : 1008,
      "char" : 7,
      "deco" : "FNbNfPS4core3sys5posixQk6socket8sockaddrkZv",
      "originalType" : "nothrow @safe void(sockaddr* addr, socklen_t addr_len)",
      "parameters" : [
       {
        "name" : "addr",
        "deco" : "PS4core3sys5posixQk6socket8sockaddr"
       },
       {
        "name" : "addr_len",
        "deco" : "k"
       }
      ],
      "endline" : 1008,
      "endchar" : 100
     },
     {
      "name" : "cap",
      "kind" : "function",
      "protection" : "public",
      "line" : 1010,
      "char" : 7,
      "deco" : "FNbNlNfkZv",
      "originalType" : "nothrow scope @safe void(socklen_t new_len)",
      "parameters" : [
       {
        "name" : "new_len",
        "deco" : "k"
       }
      ],
      "endline" : 1014,
      "endchar" : 2
     }
    ]
   },
   {
    "name" : "ConnectCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1019,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb13ConnectStatusZv",
    "originalType" : "void delegate(StreamSocketFD, ConnectStatus)"
   },
   {
    "name" : "AcceptCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1020,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZv",
    "originalType" : "void delegate(StreamListenSocketFD, StreamSocketFD, scope RefAddress remote_address)"
   },
   {
    "name" : "IOCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1021,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv",
    "originalType" : "void delegate(StreamSocketFD, IOStatus, size_t)"
   },
   {
    "name" : "DatagramIOCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1022,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd8IOStatusmMCQCcQBv10RefAddressZv",
    "originalType" : "void delegate(DatagramSocketFD, IOStatus, size_t, scope RefAddress)"
   },
   {
    "name" : "DNSLookupCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1023,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver11DNSLookupIDEQBfQy9DNSStatusMACQBxQBq10RefAddressZv",
    "originalType" : "void delegate(DNSLookupID, DNSStatus, scope RefAddress[])"
   },
   {
    "name" : "FileIOCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1024,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver6FileFDEQzQr8IOStatusmZv",
    "originalType" : "void delegate(FileFD, IOStatus, size_t)"
   },
   {
    "name" : "FileCloseCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1025,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver6FileFDEQzQr11CloseStatusZv",
    "originalType" : "void delegate(FileFD, CloseStatus)"
   },
   {
    "name" : "PipeIOCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1026,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv",
    "originalType" : "void delegate(PipeFD, IOStatus, size_t)"
   },
   {
    "name" : "PipeCloseCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1027,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver6PipeFDEQzQr11CloseStatusZv",
    "originalType" : "void delegate(PipeFD, CloseStatus)"
   },
   {
    "name" : "EventCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1028,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver7EventIDZv",
    "originalType" : "void delegate(EventID)"
   },
   {
    "name" : "SignalCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1029,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver14SignalListenIDEQBiQBb12SignalStatusiZv",
    "originalType" : "void delegate(SignalListenID, SignalStatus, int)"
   },
   {
    "name" : "TimerCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1030,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver7TimerIDZv",
    "originalType" : "void delegate(TimerID)"
   },
   {
    "name" : "TimerCallback2",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1031,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver7TimerIDbZv",
    "originalType" : "void delegate(TimerID, bool fired)"
   },
   {
    "name" : "FileChangesCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1032,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver9WatcherIDKxSQBeQx10FileChangeZv",
    "originalType" : "void delegate(WatcherID, ref const FileChange change)"
   },
   {
    "name" : "ProcessWaitCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1034,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver9ProcessIDiZv",
    "originalType" : "void delegate(ProcessID, int)"
   },
   {
    "name" : "DataInitializer",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1035,
    "char" : 9,
    "deco" : "PFNbNiPvZv",
    "originalType" : "void function(void*) @nogc"
   },
   {
    "name" : "ProcessRedirect",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1037,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "inherit",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1037,
      "char" : 24
     },
     {
      "name" : "pipe",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 1037,
      "char" : 33
     },
     {
      "name" : "none",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 1037,
      "char" : 39
     }
    ]
   },
   {
    "name" : "ProcessStdinFile",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1038,
    "char" : 1,
    "deco" : "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectZQCa",
    "originalType" : "Algebraic!(int, ProcessRedirect)"
   },
   {
    "name" : "ProcessStdoutRedirect",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1039,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "toStderr",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1039,
      "char" : 30
     }
    ]
   },
   {
    "name" : "ProcessStdoutFile",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1040,
    "char" : 1,
    "deco" : "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectTEQBkQBd21ProcessStdoutRedirectZQDf",
    "originalType" : "Algebraic!(int, ProcessRedirect, ProcessStdoutRedirect)"
   },
   {
    "name" : "ProcessStderrRedirect",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1041,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "toStdout",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1041,
      "char" : 30
     }
    ]
   },
   {
    "name" : "ProcessStderrFile",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1042,
    "char" : 1,
    "deco" : "S3std7variant__T8VariantNVmi4TiTE9eventcore6driver15ProcessRedirectTEQBkQBd21ProcessStderrRedirectZQDf",
    "originalType" : "Algebraic!(int, ProcessRedirect, ProcessStderrRedirect)"
   },
   {
    "name" : "ExitReason",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1044,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "timeout",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1045,
      "char" : 2
     },
     {
      "name" : "idle",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 1046,
      "char" : 2
     },
     {
      "name" : "outOfWaiters",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 1047,
      "char" : 2
     },
     {
      "name" : "exited",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "line" : 1048,
      "char" : 2
     }
    ]
   },
   {
    "name" : "CloseStatus",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1051,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "ok",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1052,
      "char" : 2
     },
     {
      "name" : "ioError",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 1053,
      "char" : 2
     },
     {
      "name" : "invalidHandle",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 1054,
      "char" : 2
     }
    ]
   },
   {
    "name" : "ConnectStatus",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1057,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "connected",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1058,
      "char" : 2
     },
     {
      "name" : "refused",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 1059,
      "char" : 2
     },
     {
      "name" : "timeout",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 1060,
      "char" : 2
     },
     {
      "name" : "bindFailure",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "line" : 1061,
      "char" : 2
     },
     {
      "name" : "socketCreateFailure",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "line" : 1062,
      "char" : 2
     },
     {
      "name" : "unknownError",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "5",
      "line" : 1063,
      "char" : 2
     }
    ]
   },
   {
    "name" : "ConnectionState",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1066,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "initialized",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1067,
      "char" : 2
     },
     {
      "name" : "connecting",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 1068,
      "char" : 2
     },
     {
      "name" : "connected",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 1069,
      "char" : 2
     },
     {
      "name" : "passiveClose",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "line" : 1070,
      "char" : 2
     },
     {
      "name" : "activeClose",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "line" : 1071,
      "char" : 2
     },
     {
      "name" : "closed",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "5",
      "line" : 1072,
      "char" : 2
     }
    ]
   },
   {
    "name" : "StreamListenOptions",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1075,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "none",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1076,
      "char" : 2
     },
     {
      "name" : "reusePort",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Applies the `SO_REUSEPORT` flag\n",
      "line" : 1078,
      "char" : 2
     },
     {
      "name" : "reuseAddress",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "Avoids applying the `SO_REUSEADDR` flag\n",
      "line" : 1080,
      "char" : 2
     },
     {
      "name" : "defaults",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "\n",
      "line" : 1082,
      "char" : 2
     }
    ]
   },
   {
    "name" : "StreamSocketOption",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1085,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "noDelay",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1086,
      "char" : 2
     },
     {
      "name" : "keepAlive",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 1087,
      "char" : 2
     }
    ]
   },
   {
    "name" : "DatagramCreateOptions",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1090,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "none",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1091,
      "char" : 2
     },
     {
      "name" : "reusePort",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Applies the `SO_REUSEPORT` flag\n",
      "line" : 1093,
      "char" : 2
     },
     {
      "name" : "reuseAddress",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "Avoids applying the `SO_REUSEADDR` flag\n",
      "line" : 1095,
      "char" : 2
     }
    ]
   },
   {
    "name" : "DatagramSocketOption",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1098,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "broadcast",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1099,
      "char" : 2
     },
     {
      "name" : "multicastLoopback",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 1100,
      "char" : 2
     }
    ]
   },
   {
    "name" : "FileOpenMode",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "\tSpecifies how a file is manipulated on disk.\n",
    "line" : 1106,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "read",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "comment" : "The file is opened read-only.\n",
      "line" : 1108,
      "char" : 2
     },
     {
      "name" : "readWrite",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "The file is opened for read-write random access.\n",
      "line" : 1110,
      "char" : 2
     },
     {
      "name" : "createTrunc",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "The file is truncated if it exists or created otherwise and then opened for read-write access.\n",
      "line" : 1112,
      "char" : 2
     },
     {
      "name" : "append",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "comment" : "The file is opened for appending data to it and created if it does not exist.\n",
      "line" : 1114,
      "char" : 2
     }
    ]
   },
   {
    "name" : "IOMode",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1117,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "immediate",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "comment" : "Process only as much as possible without waiting\n",
      "line" : 1118,
      "char" : 2
     },
     {
      "name" : "once",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "Process as much as possible with a single call\n",
      "line" : 1119,
      "char" : 2
     },
     {
      "name" : "all",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "Process the full buffer\n",
      "line" : 1120,
      "char" : 2
     }
    ]
   },
   {
    "name" : "IOStatus",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1123,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "ok",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "comment" : "The data has been transferred normally\n",
      "line" : 1124,
      "char" : 2
     },
     {
      "name" : "disconnected",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "The connection was closed before all data could be transterred\n",
      "line" : 1125,
      "char" : 2
     },
     {
      "name" : "error",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "An error occured while transferring the data\n",
      "line" : 1126,
      "char" : 2
     },
     {
      "name" : "wouldBlock",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "3",
      "comment" : "Returned for `IOMode.immediate` when no data is readily readable/writable\n",
      "line" : 1127,
      "char" : 2
     },
     {
      "name" : "invalidHandle",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "comment" : "The passed handle is not valid\n",
      "line" : 1128,
      "char" : 2
     }
    ]
   },
   {
    "name" : "DNSStatus",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1131,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "ok",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1132,
      "char" : 2
     },
     {
      "name" : "error",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 1133,
      "char" : 2
     }
    ]
   },
   {
    "name" : "FileChangeKind",
    "kind" : "enum",
    "protection" : "public",
    "comment" : " Specifies the kind of change in a watched directory.\n",
    "line" : 1138,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "added",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "comment" : "A file or directory was added\n",
      "line" : 1140,
      "char" : 2
     },
     {
      "name" : "removed",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "comment" : "A file or directory was deleted\n",
      "line" : 1142,
      "char" : 2
     },
     {
      "name" : "modified",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "comment" : "A file or directory was modified\n",
      "line" : 1144,
      "char" : 2
     }
    ]
   },
   {
    "name" : "SignalStatus",
    "kind" : "enum",
    "protection" : "public",
    "line" : 1147,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "ok",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 1148,
      "char" : 2
     },
     {
      "name" : "error",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 1149,
      "char" : 2
     }
    ]
   },
   {
    "name" : "ProcessConfig",
    "kind" : "enum",
    "protection" : "public",
    "comment" : "See std.process.Config\n",
    "line" : 1153,
    "char" : 1,
    "baseDeco" : "S3std7process6Config",
    "members" : [
     {
      "name" : "none",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "Config(Flags.none, null)",
      "line" : 1154,
      "char" : 2
     },
     {
      "name" : "detached",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "Config(Flags.detached, null)",
      "line" : 1155,
      "char" : 2
     },
     {
      "name" : "newEnv",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "Config(Flags.newEnv, null)",
      "line" : 1156,
      "char" : 2
     },
     {
      "name" : "suppressConsole",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "Config(Flags.suppressConsole, null)",
      "line" : 1157,
      "char" : 2
     }
    ]
   },
   {
    "name" : "FileChange",
    "kind" : "struct",
    "protection" : "public",
    "comment" : " Describes a single change in a watched directory.\n",
    "line" : 1162,
    "char" : 1,
    "members" : [
     {
      "name" : "kind",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "The type of change\n",
      "line" : 1164,
      "char" : 17,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "E9eventcore6driver14FileChangeKind",
      "offset" : 0
     },
     {
      "name" : "baseDirectory",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "The root directory of the watcher\n",
      "line" : 1167,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "Aya",
      "offset" : 8
     },
     {
      "name" : "directory",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Subdirectory containing the changed file\n",
      "line" : 1170,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "Aya",
      "offset" : 24
     },
     {
      "name" : "name",
      "kind" : "variable",
      "protection" : "public",
      "comment" : "Name of the changed file\n",
      "line" : 1173,
      "char" : 16,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "Axa",
      "offset" : 40
     }
    ]
   },
   {
    "name" : "Process",
    "kind" : "struct",
    "protection" : "public",
    "comment" : " Describes a spawned process\n",
    "line" : 1178,
    "char" : 1,
    "members" : [
     {
      "name" : "pid",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1179,
      "char" : 12,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "S9eventcore6driver9ProcessID",
      "offset" : 0
     },
     {
      "name" : "stdin",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1182,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "S9eventcore6driver6PipeFD",
      "offset" : 16
     },
     {
      "name" : "stdout",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1183,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "S9eventcore6driver6PipeFD",
      "offset" : 32
     },
     {
      "name" : "stderr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1184,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "S9eventcore6driver6PipeFD",
      "offset" : 48
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 1187,
    "char" : 7,
    "name" : "Handle",
    "parameters" : [
     {
      "name" : "NAME",
      "kind" : "value",
      "deco" : "Aya"
     },
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "invalid_value",
      "kind" : "value",
      "type" : "T",
      "defaultValue" : "T.init"
     }
    ],
    "members" : [
     {
      "name" : "name",
      "kind" : "alias",
      "line" : 1188,
      "char" : 2,
      "type" : "NAME"
     },
     {
      "name" : "invalid",
      "kind" : "variable",
      "line" : 1190,
      "char" : 7,
      "storageClass" : [
       "enum"
      ],
      "init" : "(typeof(this)).init"
     },
     {
      "name" : "value",
      "kind" : "variable",
      "line" : 1194,
      "char" : 4,
      "type" : "T",
      "init" : "invalid_value"
     },
     {
      "name" : "BaseType",
      "kind" : "alias",
      "line" : 1197,
      "char" : 3,
      "type" : "T.BaseType"
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "line" : 1199,
      "char" : 3,
      "type" : "(BaseType value, uint validation_counter)",
      "parameters" : [
       {
        "name" : "value",
        "type" : "BaseType"
       },
       {
        "name" : "validation_counter",
        "deco" : "k"
       }
      ],
      "endline" : 1202,
      "endchar" : 3
     },
     {
      "kind" : "template",
      "line" : 1215,
      "char" : 4,
      "name" : "opCast",
      "parameters" : [
       {
        "name" : "U",
        "kind" : "type"
       }
      ],
      "constraint" : "is(U.BaseType) && is(typeof(U.value))",
      "members" : [
       {
        "name" : "opCast",
        "kind" : "function",
        "line" : 1215,
        "char" : 4,
        "type" : "const U()",
        "endline" : 1220,
        "endchar" : 2
       }
      ]
     },
     {
      "kind" : "template",
      "line" : 1222,
      "char" : 4,
      "name" : "opCast",
      "parameters" : [
       {
        "name" : "U",
        "kind" : "type"
       }
      ],
      "constraint" : "is(typeof(U(BaseType.init)))",
      "members" : [
       {
        "name" : "opCast",
        "kind" : "function",
        "line" : 1222,
        "char" : 4,
        "type" : "const U()",
        "endline" : 1226,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "ThreadCallbackGenParams",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1231,
    "char" : 1,
    "deco" : "G64h",
    "originalType" : "ubyte[8 * intptr_t.sizeof]"
   },
   {
    "name" : "ThreadCallbackGen",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1232,
    "char" : 1,
    "deco" : "PFNbNfKG64hZv",
    "originalType" : "void function(ref ThreadCallbackGenParams param3) nothrow @safe"
   },
   {
    "name" : "ThreadCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 1233,
    "char" : 12,
    "storageClass" : [
     "deprecated"
    ],
    "deco" : "PFNbNflZv",
    "originalType" : "void function(intptr_t param1) nothrow @safe"
   },
   {
    "name" : "FD",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1235,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"fd\", ulong, 18446744073709551615LU)",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1235,
      "char" : 13
     }
    ]
   },
   {
    "name" : "SocketFD",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1236,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"socket\", FD, FD(18446744073709551615LU, 0u))",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1236,
      "char" : 19
     }
    ]
   },
   {
    "name" : "StreamSocketFD",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1237,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"streamSocket\", SocketFD, SocketFD(FD(18446744073709551615LU, 0u)))",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1237,
      "char" : 25
     }
    ]
   },
   {
    "name" : "StreamListenSocketFD",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1238,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"streamListen\", SocketFD, SocketFD(FD(18446744073709551615LU, 0u)))",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1238,
      "char" : 31
     }
    ]
   },
   {
    "name" : "DatagramSocketFD",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1239,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"datagramSocket\", SocketFD, SocketFD(FD(18446744073709551615LU, 0u)))",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1239,
      "char" : 27
     }
    ]
   },
   {
    "name" : "FileFD",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1240,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"file\", FD, FD(18446744073709551615LU, 0u))",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1240,
      "char" : 17
     }
    ]
   },
   {
    "name" : "PipeFD",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1242,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"pipe\", FD, FD(18446744073709551615LU, 0u))",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1242,
      "char" : 17
     }
    ]
   },
   {
    "name" : "EventID",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1243,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"event\", FD, FD(18446744073709551615LU, 0u))",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1243,
      "char" : 18
     }
    ]
   },
   {
    "name" : "TimerID",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1244,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"timer\", ulong, 18446744073709551615LU)",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1244,
      "char" : 18
     }
    ]
   },
   {
    "name" : "WatcherID",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1245,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"watcher\", ulong, 18446744073709551615LU)",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1245,
      "char" : 20
     }
    ]
   },
   {
    "name" : "EventWaitID",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1246,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"eventWait\", ulong, 18446744073709551615LU)",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1246,
      "char" : 22
     }
    ]
   },
   {
    "name" : "SignalListenID",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1247,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"signal\", ulong, 18446744073709551615LU)",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1247,
      "char" : 25
     }
    ]
   },
   {
    "name" : "DNSLookupID",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1248,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"dns\", ulong, 18446744073709551615LU)",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1248,
      "char" : 22
     }
    ]
   },
   {
    "name" : "ProcessID",
    "kind" : "struct",
    "protection" : "public",
    "line" : 1249,
    "char" : 1,
    "members" : [
     {
      "name" : "Handle!(\"process\", ulong, 18446744073709551615LU)",
      "kind" : "mixin",
      "protection" : "public",
      "line" : 1249,
      "char" : 20
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.libasync",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/libasync.d",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.posix.cfrunloop",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/cfrunloop.d",
  "comment" : "\t`CFRunLoop` based event loop for macOS UI compatible operation.\n",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.posix.dns",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/dns.d",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.driver",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ChoppedVector",
     "print"
    ]
   },
   {
    "name" : "std.socket",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Address",
     "AddressFamily",
     "InternetAddress",
     "Internet6Address",
     "UnknownAddress"
    ]
   },
   {
    "name" : "std.socket",
    "kind" : "import",
    "line" : 10,
    "char" : 9,
    "protection" : "private",
    "selective" : [
     "UnixAddress"
    ]
   },
   {
    "name" : "core.sys.posix.netdb",
    "kind" : "import",
    "line" : 11,
    "char" : 9,
    "protection" : "private",
    "selective" : [
     "AI_ADDRCONFIG",
     "AI_V4MAPPED",
     "addrinfo",
     "freeaddrinfo",
     "getaddrinfo"
    ]
   },
   {
    "name" : "core.sys.posix.netinet.in_",
    "kind" : "import",
    "line" : 12,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.sys.posix.netinet.tcp",
    "kind" : "import",
    "line" : 13,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.sys.posix.sys.un",
    "kind" : "import",
    "line" : 14,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.stdc.errno",
    "kind" : "import",
    "line" : 15,
    "char" : 9,
    "protection" : "private",
    "selective" : [
     "errno",
     "EAGAIN",
     "EINPROGRESS"
    ]
   },
   {
    "name" : "core.sys.posix.fcntl",
    "kind" : "import",
    "line" : 16,
    "char" : 9,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "getaddrinfo+thread based lookup - does not support true cancellation\n",
    "line" : 28,
    "char" : 7,
    "name" : "EventDriverDNS_GAI",
    "parameters" : [
     {
      "name" : "Events",
      "kind" : "type",
      "deco" : "C9eventcore6driver17EventDriverEvents"
     },
     {
      "name" : "Signals",
      "kind" : "type",
      "deco" : "C9eventcore6driver18EventDriverSignals"
     }
    ],
    "members" : [
     {
      "name" : "EventDriverDNS_GAI",
      "kind" : "class",
      "protection" : "public",
      "line" : 28,
      "char" : 7,
      "members" : [
       {
        "name" : "std.parallelism",
        "kind" : "import",
        "line" : 29,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "task",
         "taskPool"
        ]
       },
       {
        "name" : "std.string",
        "kind" : "import",
        "line" : 30,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "toStringz"
        ]
       },
       {
        "name" : "core.atomic",
        "kind" : "import",
        "line" : 31,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "atomicFence",
         "atomicLoad",
         "atomicStore"
        ]
       },
       {
        "name" : "core.thread",
        "kind" : "import",
        "line" : 32,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "Thread"
        ]
       },
       {
        "name" : "Lookup",
        "kind" : "struct",
        "protection" : "public",
        "line" : 35,
        "char" : 10,
        "members" : [
         {
          "name" : "done",
          "kind" : "variable",
          "line" : 36,
          "char" : 17,
          "type" : "shared(bool)"
         },
         {
          "name" : "callback",
          "kind" : "variable",
          "line" : 37,
          "char" : 22,
          "type" : "DNSLookupCallback"
         },
         {
          "name" : "validationCounter",
          "kind" : "variable",
          "line" : 38,
          "char" : 9,
          "deco" : "k"
         },
         {
          "name" : "result",
          "kind" : "variable",
          "line" : 39,
          "char" : 14,
          "type" : "addrinfo*"
         },
         {
          "name" : "retcode",
          "kind" : "variable",
          "line" : 40,
          "char" : 8,
          "deco" : "i"
         },
         {
          "name" : "name",
          "kind" : "variable",
          "line" : 41,
          "char" : 11,
          "type" : "string"
         },
         {
          "name" : "thread",
          "kind" : "variable",
          "line" : 42,
          "char" : 11,
          "type" : "Thread"
         }
        ]
       },
       {
        "name" : "m_lookups",
        "kind" : "variable",
        "line" : 44,
        "char" : 24,
        "type" : "ChoppedVector!Lookup"
       },
       {
        "name" : "m_events",
        "kind" : "variable",
        "line" : 45,
        "char" : 10,
        "type" : "Events"
       },
       {
        "name" : "m_event",
        "kind" : "variable",
        "line" : 46,
        "char" : 11,
        "type" : "EventID",
        "init" : "EventID.invalid"
       },
       {
        "name" : "m_maxHandle",
        "kind" : "variable",
        "line" : 47,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "m_validationCounter",
        "kind" : "variable",
        "line" : 48,
        "char" : 8,
        "deco" : "k"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 51,
        "char" : 2,
        "type" : "@nogc (Events events, Signals signals)",
        "parameters" : [
         {
          "name" : "events",
          "type" : "Events"
         },
         {
          "name" : "signals",
          "type" : "Signals"
         }
        ],
        "endline" : 55,
        "endchar" : 2
       },
       {
        "name" : "dispose",
        "kind" : "function",
        "line" : 57,
        "char" : 7,
        "type" : "void()",
        "endline" : 64,
        "endchar" : 2
       },
       {
        "name" : "lookupHost",
        "kind" : "function",
        "line" : 66,
        "char" : 23,
        "storageClass" : [
         "override"
        ],
        "type" : "DNSLookupID(string name, DNSLookupCallback on_lookup_finished)",
        "parameters" : [
         {
          "name" : "name",
          "type" : "string"
         },
         {
          "name" : "on_lookup_finished",
          "type" : "DNSLookupCallback"
         }
        ],
        "endline" : 129,
        "endchar" : 2
       },
       {
        "name" : "cancelLookup",
        "kind" : "function",
        "line" : 131,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(DNSLookupID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "DNSLookupID"
         }
        ],
        "endline" : 137,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 139,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "const bool(DNSLookupID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "DNSLookupID"
         }
        ],
        "endline" : 143,
        "endchar" : 2
       },
       {
        "name" : "onDNSSignal",
        "kind" : "function",
        "line" : 145,
        "char" : 15,
        "type" : "nothrow @trusted void(EventID event)",
        "parameters" : [
         {
          "name" : "event",
          "type" : "EventID"
         }
        ],
        "endline" : 199,
        "endchar" : 2
       },
       {
        "name" : "allocateHandle",
        "kind" : "function",
        "line" : 201,
        "char" : 22,
        "type" : "nothrow @safe DNSLookupID()",
        "endline" : 214,
        "endchar" : 2
       },
       {
        "name" : "setupEvent",
        "kind" : "function",
        "line" : 216,
        "char" : 15,
        "type" : "@nogc void()",
        "endline" : 222,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "getaddrinfo_a based asynchronous lookups\n",
    "line" : 227,
    "char" : 7,
    "name" : "EventDriverDNS_GAIA",
    "parameters" : [
     {
      "name" : "Events",
      "kind" : "type",
      "deco" : "C9eventcore6driver17EventDriverEvents"
     },
     {
      "name" : "Signals",
      "kind" : "type",
      "deco" : "C9eventcore6driver18EventDriverSignals"
     }
    ],
    "members" : [
     {
      "name" : "EventDriverDNS_GAIA",
      "kind" : "class",
      "protection" : "public",
      "line" : 227,
      "char" : 7,
      "members" : [
       {
        "name" : "core.sys.posix.signal",
        "kind" : "import",
        "line" : 228,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "SIGEV_SIGNAL",
         "SIGRTMIN",
         "sigevent"
        ]
       },
       {
        "name" : "Lookup",
        "kind" : "struct",
        "protection" : "public",
        "line" : 231,
        "char" : 10,
        "members" : [
         {
          "name" : "ctx",
          "kind" : "variable",
          "line" : 232,
          "char" : 10,
          "type" : "gaicb"
         },
         {
          "name" : "validationCounter",
          "kind" : "variable",
          "line" : 233,
          "char" : 9,
          "deco" : "k"
         },
         {
          "name" : "callback",
          "kind" : "variable",
          "line" : 234,
          "char" : 22,
          "type" : "DNSLookupCallback"
         }
        ]
       },
       {
        "name" : "m_lookups",
        "kind" : "variable",
        "line" : 236,
        "char" : 24,
        "type" : "ChoppedVector!Lookup"
       },
       {
        "name" : "m_events",
        "kind" : "variable",
        "line" : 237,
        "char" : 10,
        "type" : "Events"
       },
       {
        "name" : "m_signals",
        "kind" : "variable",
        "line" : 238,
        "char" : 11,
        "type" : "Signals"
       },
       {
        "name" : "m_dnsSignal",
        "kind" : "variable",
        "line" : 239,
        "char" : 7,
        "deco" : "i"
       },
       {
        "name" : "m_validationCounter",
        "kind" : "variable",
        "line" : 240,
        "char" : 8,
        "deco" : "k"
       },
       {
        "name" : "m_sighandle",
        "kind" : "variable",
        "line" : 241,
        "char" : 18,
        "type" : "SignalListenID"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 246,
        "char" : 2,
        "type" : "(Events events, Signals signals)",
        "parameters" : [
         {
          "name" : "events",
          "type" : "Events"
         },
         {
          "name" : "signals",
          "type" : "Signals"
         }
        ],
        "endline" : 252,
        "endchar" : 2
       },
       {
        "name" : "dispose",
        "kind" : "function",
        "line" : 254,
        "char" : 7,
        "type" : "void()",
        "endline" : 257,
        "endchar" : 2
       },
       {
        "name" : "lookupHost",
        "kind" : "function",
        "line" : 259,
        "char" : 23,
        "storageClass" : [
         "override"
        ],
        "type" : "DNSLookupID(string name, DNSLookupCallback on_lookup_finished)",
        "parameters" : [
         {
          "name" : "name",
          "type" : "string"
         },
         {
          "name" : "on_lookup_finished",
          "type" : "DNSLookupCallback"
         }
        ],
        "endline" : 282,
        "endchar" : 2
       },
       {
        "name" : "cancelLookup",
        "kind" : "function",
        "line" : 284,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(DNSLookupID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "DNSLookupID"
         }
        ],
        "endline" : 289,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 291,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "bool(DNSLookupID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "DNSLookupID"
         }
        ],
        "endline" : 296,
        "endchar" : 2
       },
       {
        "name" : "onDNSSignal",
        "kind" : "function",
        "line" : 298,
        "char" : 15,
        "type" : "nothrow @safe void(SignalListenID, SignalStatus status, int signal)",
        "parameters" : [
         {
          "type" : "SignalListenID"
         },
         {
          "name" : "status",
          "type" : "SignalStatus"
         },
         {
          "name" : "signal",
          "deco" : "i"
         }
        ],
        "endline" : 320,
        "endchar" : 2
       },
       {
        "name" : "allocateHandle",
        "kind" : "function",
        "line" : 322,
        "char" : 22,
        "type" : "DNSLookupID()",
        "endline" : 331,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "core.sys.posix.signal",
    "kind" : "import",
    "line" : 335,
    "char" : 9,
    "protection" : "private",
    "selective" : [
     "sigevent"
    ]
   },
   {
    "name" : "gaicb",
    "kind" : "struct",
    "protection" : "public",
    "line" : 339,
    "char" : 2,
    "members" : [
     {
      "name" : "ar_name",
      "kind" : "variable",
      "protection" : "public",
      "line" : 340,
      "char" : 16,
      "storageClass" : [
       "@safe"
      ],
      "linkage" : "c",
      "deco" : "Pxa",
      "offset" : 0
     },
     {
      "name" : "ar_service",
      "kind" : "variable",
      "protection" : "public",
      "line" : 341,
      "char" : 16,
      "storageClass" : [
       "@safe"
      ],
      "linkage" : "c",
      "deco" : "Pxa",
      "offset" : 8
     },
     {
      "name" : "ar_request",
      "kind" : "variable",
      "protection" : "public",
      "line" : 342,
      "char" : 20,
      "storageClass" : [
       "@safe"
      ],
      "linkage" : "c",
      "deco" : "PxS4core3sys5posix5netdb8addrinfo",
      "offset" : 16
     },
     {
      "name" : "ar_result",
      "kind" : "variable",
      "protection" : "public",
      "line" : 343,
      "char" : 13,
      "storageClass" : [
       "@safe"
      ],
      "linkage" : "c",
      "deco" : "PS4core3sys5posix5netdb8addrinfo",
      "offset" : 24
     }
    ]
   },
   {
    "name" : "GAI_NOWAIT",
    "kind" : "variable",
    "protection" : "public",
    "line" : 346,
    "char" : 7,
    "storageClass" : [
     "enum",
     "nothrow",
     "@nogc",
     "@safe"
    ],
    "linkage" : "c",
    "deco" : "i",
    "init" : "1"
   },
   {
    "name" : "EAI_INPROGRESS",
    "kind" : "variable",
    "protection" : "public",
    "line" : 348,
    "char" : 7,
    "storageClass" : [
     "enum",
     "nothrow",
     "@nogc",
     "@safe"
    ],
    "linkage" : "c",
    "deco" : "i",
    "init" : "-100"
   },
   {
    "name" : "getaddrinfo_a",
    "kind" : "function",
    "protection" : "public",
    "line" : 350,
    "char" : 6,
    "linkage" : "c",
    "deco" : "UNbNiNfiPPS9eventcore7drivers5posix3dns5gaicbiPS4core3sysQBc6signal8sigeventZi",
    "parameters" : [
     {
      "name" : "mode",
      "deco" : "i"
     },
     {
      "name" : "list",
      "deco" : "PPS9eventcore7drivers5posix3dns5gaicb"
     },
     {
      "name" : "nitems",
      "deco" : "i"
     },
     {
      "name" : "sevp",
      "deco" : "PS4core3sys5posix6signal8sigevent"
     }
    ]
   },
   {
    "name" : "gai_error",
    "kind" : "function",
    "protection" : "public",
    "line" : 351,
    "char" : 6,
    "linkage" : "c",
    "deco" : "UNbNiNfPS9eventcore7drivers5posix3dns5gaicbZi",
    "parameters" : [
     {
      "name" : "req",
      "deco" : "PS9eventcore7drivers5posix3dns5gaicb"
     }
    ]
   },
   {
    "name" : "gai_cancel",
    "kind" : "function",
    "protection" : "public",
    "line" : 352,
    "char" : 6,
    "linkage" : "c",
    "deco" : "UNbNiNfPS9eventcore7drivers5posix3dns5gaicbZi",
    "parameters" : [
     {
      "name" : "req",
      "deco" : "PS9eventcore7drivers5posix3dns5gaicb"
     }
    ]
   },
   {
    "name" : "__res_init",
    "kind" : "function",
    "protection" : "public",
    "line" : 354,
    "char" : 6,
    "linkage" : "c",
    "deco" : "UNbNiNfZi"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : "ghbn based lookup - does not support cancellation and blocks the thread!\n",
    "line" : 359,
    "char" : 7,
    "name" : "EventDriverDNS_GHBN",
    "parameters" : [
     {
      "name" : "Events",
      "kind" : "type",
      "deco" : "C9eventcore6driver17EventDriverEvents"
     },
     {
      "name" : "Signals",
      "kind" : "type",
      "deco" : "C9eventcore6driver18EventDriverSignals"
     }
    ],
    "members" : [
     {
      "name" : "EventDriverDNS_GHBN",
      "kind" : "class",
      "protection" : "public",
      "line" : 359,
      "char" : 7,
      "members" : [
       {
        "name" : "std.parallelism",
        "kind" : "import",
        "line" : 360,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "task",
         "taskPool"
        ]
       },
       {
        "name" : "std.string",
        "kind" : "import",
        "line" : 361,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "toStringz"
        ]
       },
       {
        "name" : "Lookup",
        "kind" : "struct",
        "protection" : "public",
        "line" : 364,
        "char" : 10,
        "members" : [
         {
          "name" : "callback",
          "kind" : "variable",
          "line" : 365,
          "char" : 22,
          "type" : "DNSLookupCallback"
         },
         {
          "name" : "success",
          "kind" : "variable",
          "line" : 366,
          "char" : 9,
          "deco" : "b"
         },
         {
          "name" : "retcode",
          "kind" : "variable",
          "line" : 367,
          "char" : 8,
          "deco" : "i"
         },
         {
          "name" : "name",
          "kind" : "variable",
          "line" : 368,
          "char" : 11,
          "type" : "string"
         }
        ]
       },
       {
        "name" : "m_maxHandle",
        "kind" : "variable",
        "line" : 370,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 373,
        "char" : 2,
        "type" : "(Events events, Signals signals)",
        "parameters" : [
         {
          "name" : "events",
          "type" : "Events"
         },
         {
          "name" : "signals",
          "type" : "Signals"
         }
        ],
        "endline" : 375,
        "endchar" : 2
       },
       {
        "name" : "dispose",
        "kind" : "function",
        "line" : 377,
        "char" : 7,
        "type" : "void()",
        "endline" : 379,
        "endchar" : 2
       },
       {
        "name" : "lookupHost",
        "kind" : "function",
        "line" : 381,
        "char" : 23,
        "storageClass" : [
         "override"
        ],
        "type" : "DNSLookupID(string name, DNSLookupCallback on_lookup_finished)",
        "parameters" : [
         {
          "name" : "name",
          "type" : "string"
         },
         {
          "name" : "on_lookup_finished",
          "type" : "DNSLookupCallback"
         }
        ],
        "endline" : 415,
        "endchar" : 2
       },
       {
        "name" : "cancelLookup",
        "kind" : "function",
        "line" : 417,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(DNSLookupID)",
        "parameters" : [
         {
          "type" : "DNSLookupID"
         }
        ],
        "endline" : 417,
        "endchar" : 43
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 419,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "const bool(DNSLookupID)",
        "parameters" : [
         {
          "type" : "DNSLookupID"
         }
        ],
        "endline" : 422,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "DNSSlot",
    "kind" : "struct",
    "protection" : "package",
    "line" : 425,
    "char" : 9,
    "members" : [
     {
      "name" : "Handle",
      "kind" : "alias",
      "protection" : "public",
      "line" : 426,
      "char" : 2,
      "deco" : "S9eventcore6driver11DNSLookupID"
     },
     {
      "name" : "callback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 427,
      "char" : 20,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver11DNSLookupIDEQBfQy9DNSStatusMACQBxQBq10RefAddressZv",
      "originalType" : "DNSLookupCallback",
      "offset" : 0
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 430,
    "char" : 14,
    "name" : "passToDNSCallback",
    "parameters" : [],
    "members" : [
     {
      "name" : "passToDNSCallback",
      "kind" : "function",
      "line" : 430,
      "char" : 14,
      "type" : "nothrow @trusted void(DNSLookupID id, scope DNSLookupCallback cb, DNSStatus status, addrinfo* ai_orig)",
      "parameters" : [
       {
        "name" : "id",
        "type" : "DNSLookupID"
       },
       {
        "name" : "cb",
        "type" : "DNSLookupCallback",
        "storageClass" : [
         "scope"
        ]
       },
       {
        "name" : "status",
        "type" : "DNSStatus"
       },
       {
        "name" : "ai_orig",
        "type" : "addrinfo*"
       }
      ],
      "endline" : 456,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.driver",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/driver.d",
  "comment" : "\tBase class for BSD socket based driver implementations.\n\n\tSee_also: `eventcore.drivers.select`, `eventcore.drivers.epoll`, `eventcore.drivers.kqueue`\n",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 9,
    "char" : 15
   },
   {
    "name" : "eventcore.drivers.posix.dns",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.events",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.signals",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.sockets",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.watchers",
    "kind" : "import",
    "line" : 14,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.processes",
    "kind" : "import",
    "line" : 15,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.pipes",
    "kind" : "import",
    "line" : 16,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.timer",
    "kind" : "import",
    "line" : 17,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.threadedfile",
    "kind" : "import",
    "line" : 18,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.consumablequeue",
    "kind" : "import",
    "line" : 19,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ConsumableQueue"
    ]
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 20,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "core.time",
    "kind" : "import",
    "line" : 22,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "MonoTime"
    ]
   },
   {
    "name" : "std.algorithm.comparison",
    "kind" : "import",
    "line" : 23,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "among",
     "min",
     "max"
    ]
   },
   {
    "name" : "std.format",
    "kind" : "import",
    "line" : 24,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "format"
    ]
   },
   {
    "name" : "sock_t",
    "kind" : "alias",
    "protection" : "package",
    "line" : 27,
    "char" : 10,
    "deco" : "i"
   },
   {
    "name" : "currStdTime",
    "kind" : "function",
    "protection" : "private",
    "line" : 33,
    "char" : 14,
    "deco" : "FNbNfZl",
    "endline" : 38,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 40,
    "char" : 7,
    "name" : "PosixEventDriver",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     }
    ],
    "members" : [
     {
      "name" : "PosixEventDriver",
      "kind" : "class",
      "protection" : "public",
      "line" : 40,
      "char" : 7,
      "members" : [
       {
        "name" : "CoreDriver",
        "kind" : "alias",
        "line" : 45,
        "char" : 3,
        "type" : "PosixEventDriverCore!(Loop, TimerDriver, EventsDriver, ProcessDriver)"
       },
       {
        "name" : "EventsDriver",
        "kind" : "alias",
        "line" : 46,
        "char" : 3,
        "type" : "PosixEventDriverEvents!(Loop, SocketsDriver)"
       },
       {
        "name" : "SignalsDriver",
        "kind" : "alias",
        "line" : 47,
        "char" : 19,
        "type" : "SignalFDEventDriverSignals!Loop"
       },
       {
        "name" : "TimerDriver",
        "kind" : "alias",
        "line" : 49,
        "char" : 3,
        "type" : "LoopTimeoutTimerDriver"
       },
       {
        "name" : "SocketsDriver",
        "kind" : "alias",
        "line" : 50,
        "char" : 3,
        "type" : "PosixEventDriverSockets!Loop"
       },
       {
        "name" : "DNSDriver",
        "kind" : "alias",
        "line" : 53,
        "char" : 8,
        "type" : "EventDriverDNS_GAI!(EventsDriver, SignalsDriver)"
       },
       {
        "name" : "FileDriver",
        "kind" : "alias",
        "line" : 54,
        "char" : 3,
        "type" : "ThreadedFileEventDriver!EventsDriver"
       },
       {
        "name" : "PipeDriver",
        "kind" : "alias",
        "line" : 55,
        "char" : 19,
        "type" : "PosixEventDriverPipes!Loop"
       },
       {
        "name" : "WatcherDriver",
        "kind" : "alias",
        "line" : 57,
        "char" : 19,
        "type" : "InotifyEventDriverWatchers!EventsDriver"
       },
       {
        "name" : "ProcessDriver",
        "kind" : "alias",
        "line" : 60,
        "char" : 19,
        "type" : "PosixEventDriverProcesses!Loop"
       },
       {
        "name" : "m_loop",
        "kind" : "variable",
        "line" : 63,
        "char" : 8,
        "type" : "Loop"
       },
       {
        "name" : "m_core",
        "kind" : "variable",
        "line" : 64,
        "char" : 14,
        "type" : "CoreDriver"
       },
       {
        "name" : "m_events",
        "kind" : "variable",
        "line" : 65,
        "char" : 16,
        "type" : "EventsDriver"
       },
       {
        "name" : "m_signals",
        "kind" : "variable",
        "line" : 66,
        "char" : 17,
        "type" : "SignalsDriver"
       },
       {
        "name" : "m_timers",
        "kind" : "variable",
        "line" : 67,
        "char" : 26,
        "type" : "LoopTimeoutTimerDriver"
       },
       {
        "name" : "m_sockets",
        "kind" : "variable",
        "line" : 68,
        "char" : 17,
        "type" : "SocketsDriver"
       },
       {
        "name" : "m_dns",
        "kind" : "variable",
        "line" : 69,
        "char" : 13,
        "type" : "DNSDriver"
       },
       {
        "name" : "m_files",
        "kind" : "variable",
        "line" : 70,
        "char" : 14,
        "type" : "FileDriver"
       },
       {
        "name" : "m_pipes",
        "kind" : "variable",
        "line" : 71,
        "char" : 14,
        "type" : "PipeDriver"
       },
       {
        "name" : "m_watchers",
        "kind" : "variable",
        "line" : 72,
        "char" : 17,
        "type" : "WatcherDriver"
       },
       {
        "name" : "m_processes",
        "kind" : "variable",
        "line" : 73,
        "char" : 17,
        "type" : "ProcessDriver"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 76,
        "char" : 2,
        "type" : "@nogc @trusted ()",
        "endline" : 89,
        "endchar" : 2
       },
       {
        "name" : "core",
        "kind" : "function",
        "line" : 92,
        "char" : 45,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(CoreDriver)()",
        "endline" : 92,
        "endchar" : 75
       },
       {
        "name" : "core",
        "kind" : "function",
        "line" : 93,
        "char" : 53,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "shared inout @property shared(inout(CoreDriver))()",
        "endline" : 93,
        "endchar" : 90
       },
       {
        "name" : "events",
        "kind" : "function",
        "line" : 94,
        "char" : 47,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(EventsDriver)()",
        "endline" : 94,
        "endchar" : 81
       },
       {
        "name" : "events",
        "kind" : "function",
        "line" : 95,
        "char" : 55,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "shared inout @property shared(inout(EventsDriver))()",
        "endline" : 95,
        "endchar" : 96
       },
       {
        "name" : "signals",
        "kind" : "function",
        "line" : 96,
        "char" : 48,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(SignalsDriver)()",
        "endline" : 96,
        "endchar" : 84
       },
       {
        "name" : "timers",
        "kind" : "function",
        "line" : 97,
        "char" : 46,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(TimerDriver)()",
        "endline" : 97,
        "endchar" : 80
       },
       {
        "name" : "sockets",
        "kind" : "function",
        "line" : 98,
        "char" : 48,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(SocketsDriver)()",
        "endline" : 98,
        "endchar" : 84
       },
       {
        "name" : "dns",
        "kind" : "function",
        "line" : 99,
        "char" : 44,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(DNSDriver)()",
        "endline" : 99,
        "endchar" : 72
       },
       {
        "name" : "files",
        "kind" : "function",
        "line" : 100,
        "char" : 45,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(FileDriver)()",
        "endline" : 100,
        "endchar" : 77
       },
       {
        "name" : "pipes",
        "kind" : "function",
        "line" : 101,
        "char" : 45,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(PipeDriver)()",
        "endline" : 101,
        "endchar" : 77
       },
       {
        "name" : "watchers",
        "kind" : "function",
        "line" : 102,
        "char" : 48,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(WatcherDriver)()",
        "endline" : 102,
        "endchar" : 86
       },
       {
        "name" : "processes",
        "kind" : "function",
        "line" : 103,
        "char" : 48,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "inout @property inout(ProcessDriver)()",
        "endline" : 103,
        "endchar" : 88
       },
       {
        "name" : "dispose",
        "kind" : "function",
        "line" : 105,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool()",
        "endline" : 169,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 173,
    "char" : 7,
    "name" : "PosixEventDriverCore",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     },
     {
      "name" : "Timers",
      "kind" : "type",
      "deco" : "C9eventcore6driver17EventDriverTimers"
     },
     {
      "name" : "Events",
      "kind" : "type",
      "deco" : "C9eventcore6driver17EventDriverEvents"
     },
     {
      "name" : "Processes",
      "kind" : "type",
      "deco" : "C9eventcore6driver20EventDriverProcesses"
     }
    ],
    "members" : [
     {
      "name" : "PosixEventDriverCore",
      "kind" : "class",
      "protection" : "public",
      "line" : 173,
      "char" : 7,
      "members" : [
       {
        "name" : "core.atomic",
        "kind" : "import",
        "line" : 175,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "atomicLoad",
         "atomicStore"
        ]
       },
       {
        "name" : "core.sync.mutex",
        "kind" : "import",
        "line" : 176,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "Mutex"
        ]
       },
       {
        "name" : "core.time",
        "kind" : "import",
        "line" : 177,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "Duration"
        ]
       },
       {
        "name" : "std.stdint",
        "kind" : "import",
        "line" : 178,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "intptr_t"
        ]
       },
       {
        "name" : "std.typecons",
        "kind" : "import",
        "line" : 179,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "Tuple",
         "tuple"
        ]
       },
       {
        "name" : "ExtraEventsCallback",
        "kind" : "alias",
        "line" : 181,
        "char" : 12,
        "type" : "bool delegate(long)"
       },
       {
        "name" : "ThreadCallbackEntry",
        "kind" : "alias",
        "line" : 183,
        "char" : 10,
        "type" : "Tuple!(ThreadCallbackGen, ThreadCallbackGenParams)"
       },
       {
        "name" : "m_loop",
        "kind" : "variable",
        "line" : 186,
        "char" : 8,
        "type" : "Loop"
       },
       {
        "name" : "m_timers",
        "kind" : "variable",
        "line" : 187,
        "char" : 10,
        "type" : "Timers"
       },
       {
        "name" : "m_events",
        "kind" : "variable",
        "line" : 188,
        "char" : 10,
        "type" : "Events"
       },
       {
        "name" : "m_processes",
        "kind" : "variable",
        "line" : 189,
        "char" : 13,
        "type" : "Processes"
       },
       {
        "name" : "m_exit",
        "kind" : "variable",
        "line" : 190,
        "char" : 8,
        "deco" : "b",
        "init" : "false"
       },
       {
        "name" : "m_wakeupEvent",
        "kind" : "variable",
        "line" : 191,
        "char" : 11,
        "type" : "EventID"
       },
       {
        "name" : "m_threadCallbackMutex",
        "kind" : "variable",
        "line" : 193,
        "char" : 16,
        "storageClass" : [
         "shared"
        ],
        "type" : "Mutex"
       },
       {
        "name" : "m_threadCallbacks",
        "kind" : "variable",
        "line" : 194,
        "char" : 39,
        "type" : "ConsumableQueue!ThreadCallbackEntry"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 197,
        "char" : 2,
        "type" : "@nogc (Loop loop, Timers timers, Events events, Processes processes)",
        "parameters" : [
         {
          "name" : "loop",
          "type" : "Loop"
         },
         {
          "name" : "timers",
          "type" : "Timers"
         },
         {
          "name" : "events",
          "type" : "Events"
         },
         {
          "name" : "processes",
          "type" : "Processes"
         }
        ],
        "endline" : 207,
        "endchar" : 2
       },
       {
        "name" : "dispose",
        "kind" : "function",
        "line" : 209,
        "char" : 13,
        "storageClass" : [
         "final"
        ],
        "type" : "void()",
        "endline" : 218,
        "endchar" : 2
       },
       {
        "name" : "waiterCount",
        "kind" : "function",
        "line" : 220,
        "char" : 19,
        "type" : "const @property size_t()",
        "endline" : 220,
        "endchar" : 121
       },
       {
        "name" : "processEvents",
        "kind" : "function",
        "line" : 222,
        "char" : 28,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "ExitReason(Duration timeout)",
        "parameters" : [
         {
          "name" : "timeout",
          "type" : "Duration"
         }
        ],
        "endline" : 266,
        "endchar" : 2
       },
       {
        "name" : "exit",
        "kind" : "function",
        "line" : 268,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void()",
        "endline" : 272,
        "endchar" : 2
       },
       {
        "name" : "clearExitFlag",
        "kind" : "function",
        "line" : 274,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void()",
        "endline" : 277,
        "endchar" : 2
       },
       {
        "name" : "runInOwnerThread",
        "kind" : "function",
        "line" : 279,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "shared void(ThreadCallbackGen del, ref ThreadCallbackGenParams params)",
        "parameters" : [
         {
          "name" : "del",
          "type" : "ThreadCallbackGen"
         },
         {
          "name" : "params",
          "type" : "ThreadCallbackGenParams",
          "storageClass" : [
           "ref"
          ]
         }
        ],
        "endline" : 297,
        "endchar" : 2
       },
       {
        "name" : "runInOwnerThread",
        "kind" : "alias",
        "line" : 299,
        "char" : 2,
        "type" : "EventDriverCore.runInOwnerThread"
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 302,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(StreamSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 305,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 307,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(DatagramSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "DatagramSocketFD"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 310,
        "endchar" : 2
       },
       {
        "name" : "rawUserDataImpl",
        "kind" : "function",
        "line" : 312,
        "char" : 24,
        "storageClass" : [
         "final"
        ],
        "type" : "@system void*(FD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "FD"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 315,
        "endchar" : 2
       },
       {
        "name" : "executeThreadCallbacks",
        "kind" : "function",
        "line" : 317,
        "char" : 15,
        "type" : "void()",
        "endline" : 331,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "PosixEventLoop",
    "kind" : "class",
    "protection" : "package",
    "line" : 335,
    "char" : 9,
    "members" : [
     {
      "name" : "core.time",
      "kind" : "import",
      "line" : 337,
      "char" : 9,
      "protection" : "private",
      "selective" : [
       "Duration"
      ]
     },
     {
      "name" : "m_fds",
      "kind" : "variable",
      "protection" : "package",
      "line" : 340,
      "char" : 149,
      "storageClass" : [
       "nothrow",
       "@safe"
      ],
      "deco" : "S9eventcore8internal5utils__T22AlgebraicChoppedVectorTSQCc7drivers5posix6driver6FDSlotTSQDjQBhQBc7sockets16StreamSocketSlotTSQEuQCsQCnQBl22StreamListenSocketSlotTSQGgQEeQDzQCx15DgramSocketSlotTSQHlQFjQFe3dns7DNSSlotTSQIiQGgQGb8watchers11WatcherSlotTSQJpQHnQHi6events9EventSlotTSQKrQIpQIk7signals10SignalSlotTSQLwQJuQJp5pipes8PipeSlotZQLt",
      "offset" : 16
     },
     {
      "name" : "m_handleCount",
      "kind" : "variable",
      "protection" : "package",
      "line" : 341,
      "char" : 10,
      "storageClass" : [
       "nothrow",
       "@safe"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "init" : "0LU",
      "offset" : 48
     },
     {
      "name" : "m_waiterCount",
      "kind" : "variable",
      "protection" : "package",
      "line" : 342,
      "char" : 10,
      "storageClass" : [
       "nothrow",
       "@safe"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "init" : "0LU",
      "offset" : 56
     },
     {
      "name" : "maxFD",
      "kind" : "function",
      "protection" : "protected",
      "line" : 345,
      "char" : 26,
      "deco" : "xFNbNdNfZi",
      "endline" : 345,
      "endchar" : 72
     },
     {
      "name" : "dispose",
      "kind" : "function",
      "protection" : "protected",
      "line" : 347,
      "char" : 17,
      "deco" : "FNbNiNfZv",
      "endline" : 347,
      "endchar" : 51
     },
     {
      "name" : "doProcessEvents",
      "kind" : "function",
      "protection" : "protected",
      "comment" : " Waits for and processes a single batch of events.\n\n\t\tReturns:\n\t\t\tReturns `false` if no event was received before the timeout expired\n\t\t\tand `true` if either an event was received, or if the wait was\n\t\t\tinterrupted by an error or signal.\n",
      "line" : 356,
      "char" : 26,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNfS4core4time8DurationZb",
      "parameters" : [
       {
        "name" : "dur",
        "deco" : "S4core4time8Duration"
       }
      ]
     },
     {
      "name" : "registerFD",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Registers the FD for general notification reception.\n",
      "line" : 359,
      "char" : 26,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNiNfS9eventcore6driver2FDEQv7drivers5posixQBb9EventMaskbZv",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver2FD"
       },
       {
        "name" : "mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       },
       {
        "name" : "edge_triggered",
        "deco" : "b",
        "default" : "true"
       }
      ]
     },
     {
      "name" : "unregisterFD",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Unregisters the FD for general notification reception.\n",
      "line" : 361,
      "char" : 26,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNiNfS9eventcore6driver2FDEQv7drivers5posixQBb9EventMaskZv",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver2FD"
       },
       {
        "name" : "mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       }
      ]
     },
     {
      "name" : "updateFD",
      "kind" : "function",
      "protection" : "protected",
      "comment" : "Updates the event mask to use for listening for notifications.\n",
      "line" : 363,
      "char" : 26,
      "storageClass" : [
       "abstract"
      ],
      "deco" : "FNbNiNfS9eventcore6driver2FDEQv7drivers5posixQBb9EventMaskQBebZv",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver2FD"
       },
       {
        "name" : "old_mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       },
       {
        "name" : "new_mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       },
       {
        "name" : "edge_triggered",
        "deco" : "b",
        "default" : "true"
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "protected",
      "line" : 365,
      "char" : 23,
      "name" : "notify",
      "parameters" : [
       {
        "name" : "evt",
        "kind" : "value",
        "deco" : "E9eventcore7drivers5posix6driver9EventType"
       }
      ],
      "members" : [
       {
        "name" : "notify",
        "kind" : "function",
        "line" : 365,
        "char" : 23,
        "storageClass" : [
         "final"
        ],
        "type" : "void(size_t fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "size_t"
         }
        ],
        "endline" : 372,
        "endchar" : 2
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "protected",
      "line" : 374,
      "char" : 23,
      "name" : "enumerateFDs",
      "parameters" : [
       {
        "name" : "evt",
        "kind" : "value",
        "deco" : "E9eventcore7drivers5posix6driver9EventType"
       }
      ],
      "members" : [
       {
        "name" : "enumerateFDs",
        "kind" : "function",
        "line" : 374,
        "char" : 23,
        "storageClass" : [
         "final"
        ],
        "type" : "void(scope FDEnumerateCallback del)",
        "parameters" : [
         {
          "name" : "del",
          "type" : "FDEnumerateCallback",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 380,
        "endchar" : 2
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "package",
      "line" : 382,
      "char" : 15,
      "name" : "setNotifyCallback",
      "parameters" : [
       {
        "name" : "evt",
        "kind" : "value",
        "deco" : "E9eventcore7drivers5posix6driver9EventType"
       }
      ],
      "members" : [
       {
        "name" : "setNotifyCallback",
        "kind" : "function",
        "line" : 382,
        "char" : 15,
        "type" : "void(FD fd, FDSlotCallback callback)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         },
         {
          "name" : "callback",
          "type" : "FDSlotCallback"
         }
        ],
        "endline" : 399,
        "endchar" : 2
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "package",
      "line" : 401,
      "char" : 17,
      "name" : "initFD",
      "parameters" : [
       {
        "name" : "FDType",
        "kind" : "type"
       },
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "initFD",
        "kind" : "function",
        "line" : 401,
        "char" : 17,
        "type" : "FDType(size_t fd, FDFlags flags, auto ref T slot_init)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "size_t"
         },
         {
          "name" : "flags",
          "type" : "FDFlags"
         },
         {
          "name" : "slot_init",
          "type" : "T",
          "storageClass" : [
           "auto",
           "ref"
          ]
         }
        ],
        "endline" : 423,
        "endchar" : 2
       }
      ]
     },
     {
      "kind" : "template",
      "protection" : "package",
      "line" : 425,
      "char" : 15,
      "name" : "clearFD",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "members" : [
       {
        "name" : "clearFD",
        "kind" : "function",
        "line" : 425,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 446,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "rawUserDataImpl",
      "kind" : "function",
      "protection" : "package",
      "line" : 448,
      "char" : 22,
      "storageClass" : [
       "final"
      ],
      "deco" : "FNbNimmPFNbNiPvZvQkZQh",
      "originalType" : "nothrow @nogc @system void*(size_t descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "m"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ],
      "endline" : 460,
      "endchar" : 2
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 335,
      "char" : 9,
      "deco" : "FNbNiNeZv"
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   },
   {
    "name" : "FDEnumerateCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 464,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver2FDZv",
    "originalType" : "void delegate(FD)"
   },
   {
    "name" : "FDSlotCallback",
    "kind" : "alias",
    "protection" : "public",
    "line" : 466,
    "char" : 1,
    "deco" : "DFNbNfS9eventcore6driver2FDZv",
    "originalType" : "void delegate(FD)"
   },
   {
    "name" : "FDSlot",
    "kind" : "struct",
    "protection" : "private",
    "line" : 468,
    "char" : 9,
    "members" : [
     {
      "name" : "callback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 469,
      "char" : 34,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "G3DFNbNfS9eventcore6driver2FDZv",
      "originalType" : "FDSlotCallback[EventType.max + 1]",
      "offset" : 0
     },
     {
      "name" : "refCount",
      "kind" : "variable",
      "protection" : "public",
      "line" : 470,
      "char" : 7,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "k",
      "offset" : 48
     },
     {
      "name" : "validationCounter",
      "kind" : "variable",
      "protection" : "public",
      "line" : 471,
      "char" : 7,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "k",
      "offset" : 52
     },
     {
      "name" : "flags",
      "kind" : "variable",
      "protection" : "public",
      "line" : 472,
      "char" : 10,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "E9eventcore7drivers5posix6driver7FDFlags",
      "offset" : 56
     },
     {
      "name" : "userDataDestructor",
      "kind" : "variable",
      "protection" : "public",
      "line" : 474,
      "char" : 18,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "PFNbNiPvZv",
      "originalType" : "DataInitializer",
      "offset" : 64
     },
     {
      "name" : "userData",
      "kind" : "variable",
      "protection" : "public",
      "line" : 475,
      "char" : 26,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "G128h",
      "originalType" : "ubyte[16 * size_t.sizeof]",
      "offset" : 72
     },
     {
      "name" : "eventMask",
      "kind" : "function",
      "protection" : "public",
      "line" : 479,
      "char" : 22,
      "deco" : "xFNbNdNfZE9eventcore7drivers5posix6driver9EventMask",
      "endline" : 485,
      "endchar" : 2
     }
    ]
   },
   {
    "name" : "FDFlags",
    "kind" : "enum",
    "protection" : "public",
    "line" : 488,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "none",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 489,
      "char" : 2
     },
     {
      "name" : "internal",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 490,
      "char" : 2
     }
    ]
   },
   {
    "name" : "EventType",
    "kind" : "enum",
    "protection" : "public",
    "line" : 493,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "read",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "0",
      "line" : 494,
      "char" : 2
     },
     {
      "name" : "write",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 495,
      "char" : 2
     },
     {
      "name" : "status",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 496,
      "char" : 2
     }
    ]
   },
   {
    "name" : "EventMask",
    "kind" : "enum",
    "protection" : "public",
    "line" : 499,
    "char" : 1,
    "baseDeco" : "i",
    "members" : [
     {
      "name" : "read",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "1",
      "line" : 500,
      "char" : 2
     },
     {
      "name" : "write",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "2",
      "line" : 501,
      "char" : 2
     },
     {
      "name" : "status",
      "kind" : "enum member",
      "protection" : "public",
      "value" : "4",
      "line" : 502,
      "char" : 2
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 505,
    "char" : 6,
    "name" : "log",
    "parameters" : [
     {
      "name" : "ARGS",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "log",
      "kind" : "function",
      "line" : 505,
      "char" : 6,
      "type" : "@trusted void(string fmt, ARGS args)",
      "parameters" : [
       {
        "name" : "fmt",
        "type" : "string"
       },
       {
        "name" : "args",
        "type" : "ARGS"
       }
      ],
      "endline" : 513,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.epoll",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/epoll.d",
  "comment" : "\tLinux epoll based event driver implementation.\n\n\tEpoll is an efficient API for asynchronous I/O on Linux, suitable for large\n\tnumbers of concurrently open sockets.\n",
  "members" : [
   {
    "name" : "eventcore.drivers.posix.driver",
    "kind" : "import",
    "line" : 12,
    "char" : 15
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 13,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "core.time",
    "kind" : "import",
    "line" : 15,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Duration"
    ]
   },
   {
    "name" : "core.sys.posix.sys.time",
    "kind" : "import",
    "line" : 16,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "timeval"
    ]
   },
   {
    "name" : "core.sys.linux.epoll",
    "kind" : "import",
    "line" : 17,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "EpollEventDriver",
    "kind" : "alias",
    "protection" : "public",
    "line" : 19,
    "char" : 1,
    "deco" : "C9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr5epoll14EpollEventLoopZQCb",
    "originalType" : "PosixEventDriver!EpollEventLoop"
   },
   {
    "name" : "SOCK_CLOEXEC",
    "kind" : "variable",
    "protection" : "public",
    "line" : 22,
    "char" : 7,
    "storageClass" : [
     "enum",
     "nothrow",
     "@nogc",
     "@safe"
    ],
    "deco" : "i",
    "init" : "524288"
   },
   {
    "name" : "EpollEventLoop",
    "kind" : "class",
    "protection" : "public",
    "line" : 24,
    "char" : 7,
    "base" : "eventcore.drivers.posix.driver.PosixEventLoop",
    "members" : [
     {
      "name" : "m_epoll",
      "kind" : "variable",
      "protection" : "private",
      "line" : 28,
      "char" : 7,
      "storageClass" : [
       "nothrow",
       "@safe"
      ],
      "deco" : "i",
      "offset" : 64
     },
     {
      "name" : "m_events",
      "kind" : "variable",
      "protection" : "private",
      "line" : 29,
      "char" : 20,
      "storageClass" : [
       "nothrow",
       "@safe"
      ],
      "deco" : "G100S4core3sys5linux5epoll11epoll_event",
      "offset" : 68,
      "align" : 1
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 32,
      "char" : 2,
      "deco" : "FNbNiNfZC9eventcore7drivers5posix5epoll14EpollEventLoop",
      "originalType" : "nothrow @nogc @safe ()",
      "endline" : 37,
      "endchar" : 2
     },
     {
      "name" : "doProcessEvents",
      "kind" : "function",
      "protection" : "public",
      "line" : 39,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNeS4core4time8DurationZb",
      "parameters" : [
       {
        "name" : "timeout",
        "deco" : "S4core4time8Duration"
       }
      ],
      "endline" : 70,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.doProcessEvents"
      ]
     },
     {
      "name" : "dispose",
      "kind" : "function",
      "protection" : "public",
      "line" : 72,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNiNfZv",
      "endline" : 77,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.dispose"
      ]
     },
     {
      "name" : "registerFD",
      "kind" : "function",
      "protection" : "public",
      "line" : 79,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNiNfS9eventcore6driver2FDEQv7drivers5posixQBb9EventMaskbZv",
      "originalType" : "nothrow @safe void(FD fd, EventMask mask, bool edge_triggered = true)",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver2FD"
       },
       {
        "name" : "mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       },
       {
        "name" : "edge_triggered",
        "deco" : "b",
        "default" : "true"
       }
      ],
      "endline" : 91,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.registerFD"
      ]
     },
     {
      "name" : "unregisterFD",
      "kind" : "function",
      "protection" : "public",
      "line" : 93,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNiNfS9eventcore6driver2FDEQv7drivers5posixQBb9EventMaskZv",
      "originalType" : "nothrow @safe void(FD fd, EventMask mask)",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver2FD"
       },
       {
        "name" : "mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       }
      ],
      "endline" : 99,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.unregisterFD"
      ]
     },
     {
      "name" : "updateFD",
      "kind" : "function",
      "protection" : "public",
      "line" : 101,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNiNfS9eventcore6driver2FDEQv7drivers5posixQBb9EventMaskQBebZv",
      "originalType" : "nothrow @safe void(FD fd, EventMask old_mask, EventMask mask, bool edge_triggered = true)",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver2FD"
       },
       {
        "name" : "old_mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       },
       {
        "name" : "mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       },
       {
        "name" : "edge_triggered",
        "deco" : "b",
        "default" : "true"
       }
      ],
      "endline" : 114,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.updateFD"
      ]
     }
    ]
   },
   {
    "name" : "toTimeVal",
    "kind" : "function",
    "protection" : "private",
    "line" : 117,
    "char" : 17,
    "deco" : "FNbNiNfS4core4time8DurationZSQv3sys5posixQkQBe7timeval",
    "parameters" : [
     {
      "name" : "dur",
      "deco" : "S4core4time8Duration"
     }
    ],
    "endline" : 122,
    "endchar" : 1
   },
   {
    "name" : "assumeSafeNoGC",
    "kind" : "function",
    "protection" : "private",
    "line" : 124,
    "char" : 14,
    "deco" : "FNbNiNeMDFNbZvZv",
    "parameters" : [
     {
      "name" : "doit",
      "deco" : "DFNbZv",
      "storageClass" : [
       "scope"
      ]
     }
    ],
    "endline" : 127,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.events",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/events.d",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.driver",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.consumablequeue",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "ConsumableQueue"
    ]
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "nogc_assert",
     "mallocT",
     "freeT"
    ]
   },
   {
    "name" : "eventfd",
    "kind" : "function",
    "protection" : "public",
    "line" : 11,
    "char" : 31,
    "linkage" : "c",
    "deco" : "UNbNiNfkiZi",
    "parameters" : [
     {
      "name" : "initval",
      "deco" : "k"
     },
     {
      "name" : "flags",
      "deco" : "i"
     }
    ]
   },
   {
    "name" : "core.sys.linux.sys.eventfd",
    "kind" : "import",
    "line" : 12,
    "char" : 12,
    "protection" : "private",
    "selective" : [
     "EFD_NONBLOCK",
     "EFD_CLOEXEC"
    ]
   },
   {
    "name" : "core.sys.posix.unistd",
    "kind" : "import",
    "line" : 15,
    "char" : 9,
    "protection" : "private",
    "selective" : [
     "close",
     "read",
     "write"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 22,
    "char" : 7,
    "name" : "PosixEventDriverEvents",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     },
     {
      "name" : "Sockets",
      "kind" : "type",
      "deco" : "C9eventcore6driver18EventDriverSockets"
     }
    ],
    "members" : [
     {
      "name" : "PosixEventDriverEvents",
      "kind" : "class",
      "protection" : "public",
      "line" : 22,
      "char" : 7,
      "members" : [
       {
        "name" : "m_loop",
        "kind" : "variable",
        "line" : 25,
        "char" : 8,
        "type" : "Loop"
       },
       {
        "name" : "m_sockets",
        "kind" : "variable",
        "line" : 26,
        "char" : 11,
        "type" : "Sockets"
       },
       {
        "name" : "m_buf",
        "kind" : "variable",
        "line" : 27,
        "char" : 23,
        "type" : "ubyte[(ulong).sizeof]"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 30,
        "char" : 2,
        "type" : "@nogc (Loop loop, Sockets sockets)",
        "parameters" : [
         {
          "name" : "loop",
          "type" : "Loop"
         },
         {
          "name" : "sockets",
          "type" : "Sockets"
         }
        ],
        "endline" : 34,
        "endchar" : 2
       },
       {
        "name" : "loop",
        "kind" : "function",
        "line" : 36,
        "char" : 25,
        "type" : "@property Loop()",
        "endline" : 36,
        "endchar" : 49
       },
       {
        "name" : "create",
        "kind" : "function",
        "line" : 38,
        "char" : 25,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "EventID()",
        "endline" : 41,
        "endchar" : 2
       },
       {
        "name" : "createInternal",
        "kind" : "function",
        "line" : 43,
        "char" : 29,
        "type" : "@nogc EventID(bool is_internal = true)",
        "parameters" : [
         {
          "name" : "is_internal",
          "deco" : "b",
          "default" : "true"
         }
        ],
        "endline" : 111,
        "endchar" : 2
       },
       {
        "name" : "trigger",
        "kind" : "function",
        "line" : 113,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(EventID event, bool notify_all)",
        "parameters" : [
         {
          "name" : "event",
          "type" : "EventID"
         },
         {
          "name" : "notify_all",
          "deco" : "b"
         }
        ],
        "endline" : 135,
        "endchar" : 2
       },
       {
        "name" : "trigger",
        "kind" : "function",
        "line" : 137,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "shared @nogc @trusted void(EventID event, bool notify_all)",
        "parameters" : [
         {
          "name" : "event",
          "type" : "EventID"
         },
         {
          "name" : "notify_all",
          "deco" : "b"
         }
        ],
        "endline" : 144,
        "endchar" : 2
       },
       {
        "name" : "wait",
        "kind" : "function",
        "line" : 146,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@nogc void(EventID event, EventCallback on_event)",
        "parameters" : [
         {
          "name" : "event",
          "type" : "EventID"
         },
         {
          "name" : "on_event",
          "type" : "EventCallback"
         }
        ],
        "endline" : 152,
        "endchar" : 2
       },
       {
        "name" : "cancelWait",
        "kind" : "function",
        "line" : 154,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(EventID event, EventCallback on_event)",
        "parameters" : [
         {
          "name" : "event",
          "type" : "EventID"
         },
         {
          "name" : "on_event",
          "type" : "EventCallback"
         }
        ],
        "endline" : 163,
        "endchar" : 2
       },
       {
        "name" : "onEvent",
        "kind" : "function",
        "line" : 166,
        "char" : 16,
        "type" : "@trusted void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 172,
        "endchar" : 3
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 190,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "const bool(EventID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "EventID"
         }
        ],
        "endline" : 194,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 196,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(EventID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "EventID"
         }
        ],
        "endline" : 202,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 204,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@nogc bool(EventID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "EventID"
         }
        ],
        "endline" : 229,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 231,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(EventID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "EventID"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 235,
        "endchar" : 2
       },
       {
        "name" : "getSlot",
        "kind" : "function",
        "line" : 237,
        "char" : 21,
        "type" : "@nogc EventSlot*(EventID id)",
        "parameters" : [
         {
          "name" : "id",
          "type" : "EventID"
         }
        ],
        "endline" : 241,
        "endchar" : 2
       },
       {
        "name" : "getRC",
        "kind" : "function",
        "line" : 243,
        "char" : 19,
        "type" : "ref uint(EventID id)",
        "parameters" : [
         {
          "name" : "id",
          "type" : "EventID"
         }
        ],
        "endline" : 246,
        "endchar" : 2
       },
       {
        "name" : "isInternal",
        "kind" : "function",
        "line" : 248,
        "char" : 15,
        "type" : "@nogc bool(EventID id)",
        "parameters" : [
         {
          "name" : "id",
          "type" : "EventID"
         }
        ],
        "endline" : 251,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "EventSlot",
    "kind" : "struct",
    "protection" : "package",
    "line" : 254,
    "char" : 9,
    "members" : [
     {
      "name" : "Handle",
      "kind" : "alias",
      "protection" : "public",
      "line" : 255,
      "char" : 2,
      "deco" : "S9eventcore6driver7EventID"
     },
     {
      "name" : "waiters",
      "kind" : "variable",
      "protection" : "public",
      "line" : 256,
      "char" : 32,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "C9eventcore8internal15consumablequeue__T15ConsumableQueueTDFNbNfSQCm6driver7EventIDZvZQBu",
      "originalType" : "ConsumableQueue!EventCallback",
      "offset" : 0
     },
     {
      "name" : "isInternal",
      "kind" : "variable",
      "protection" : "public",
      "line" : 257,
      "char" : 7,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "b",
      "offset" : 8
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.kqueue",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/kqueue.d",
  "comment" : "\tBSD kqueue based event driver implementation.\n\n\tKqueue is an efficient API for asynchronous I/O on BSD flavors, including\n\tOS X/macOS, suitable for large numbers of concurrently open sockets.\n",
  "members" : [
   {
    "name" : "have_kqueue",
    "kind" : "variable",
    "protection" : "public",
    "line" : 13,
    "char" : 11,
    "storageClass" : [
     "enum",
     "nothrow",
     "@safe"
    ],
    "deco" : "b",
    "init" : "false"
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.pipes",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/pipes.d",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.driver",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "nogc_assert",
     "print"
    ]
   },
   {
    "name" : "std.algorithm",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "min",
     "max"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 11,
    "char" : 7,
    "name" : "PosixEventDriverPipes",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     }
    ],
    "members" : [
     {
      "name" : "PosixEventDriverPipes",
      "kind" : "class",
      "protection" : "public",
      "line" : 11,
      "char" : 7,
      "members" : [
       {
        "name" : "core.stdc.errno",
        "kind" : "import",
        "line" : 13,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "errno",
         "EAGAIN",
         "EINTR"
        ]
       },
       {
        "name" : "core.sys.posix.unistd",
        "kind" : "import",
        "line" : 14,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "close",
         "read",
         "write"
        ]
       },
       {
        "name" : "core.sys.posix.fcntl",
        "kind" : "import",
        "line" : 15,
        "char" : 9,
        "protection" : "private"
       },
       {
        "name" : "core.sys.posix.poll",
        "kind" : "import",
        "line" : 16,
        "char" : 9,
        "protection" : "private"
       },
       {
        "name" : "m_loop",
        "kind" : "variable",
        "line" : 18,
        "char" : 15,
        "type" : "Loop"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 20,
        "char" : 2,
        "type" : "@nogc (Loop loop)",
        "parameters" : [
         {
          "name" : "loop",
          "type" : "Loop"
         }
        ],
        "endline" : 23,
        "endchar" : 2
       },
       {
        "name" : "adopt",
        "kind" : "function",
        "line" : 25,
        "char" : 24,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "PipeFD(int system_fd)",
        "parameters" : [
         {
          "name" : "system_fd",
          "deco" : "i"
         }
        ],
        "endline" : 36,
        "endchar" : 2
       },
       {
        "name" : "read",
        "kind" : "function",
        "line" : 38,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(PipeFD pipe, ubyte[] buffer, IOMode mode, PipeIOCallback on_read_finish)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         },
         {
          "name" : "buffer",
          "type" : "ubyte[]"
         },
         {
          "name" : "mode",
          "type" : "IOMode"
         },
         {
          "name" : "on_read_finish",
          "type" : "PipeIOCallback"
         }
        ],
        "endline" : 91,
        "endchar" : 2
       },
       {
        "name" : "onPipeRead",
        "kind" : "function",
        "line" : 93,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 140,
        "endchar" : 2
       },
       {
        "name" : "cancelRead",
        "kind" : "function",
        "line" : 142,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(PipeFD pipe)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         }
        ],
        "endline" : 150,
        "endchar" : 2
       },
       {
        "name" : "write",
        "kind" : "function",
        "line" : 152,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(PipeFD pipe, const(ubyte)[] buffer, IOMode mode, PipeIOCallback on_write_finish)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         },
         {
          "name" : "buffer",
          "type" : "const(ubyte)[]"
         },
         {
          "name" : "mode",
          "type" : "IOMode"
         },
         {
          "name" : "on_write_finish",
          "type" : "PipeIOCallback"
         }
        ],
        "endline" : 194,
        "endchar" : 2
       },
       {
        "name" : "onPipeWrite",
        "kind" : "function",
        "line" : 196,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 229,
        "endchar" : 2
       },
       {
        "name" : "cancelWrite",
        "kind" : "function",
        "line" : 231,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(PipeFD pipe)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         }
        ],
        "endline" : 240,
        "endchar" : 2
       },
       {
        "name" : "waitForData",
        "kind" : "function",
        "line" : 242,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(PipeFD pipe, PipeIOCallback on_data_available)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         },
         {
          "name" : "on_data_available",
          "type" : "PipeIOCallback"
         }
        ],
        "endline" : 262,
        "endchar" : 2
       },
       {
        "name" : "onPipeDataAvailable",
        "kind" : "function",
        "line" : 264,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 283,
        "endchar" : 2
       },
       {
        "name" : "pollPipe",
        "kind" : "function",
        "line" : 285,
        "char" : 15,
        "type" : "@trusted bool(PipeFD pipe, PipeIOCallback callback)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         },
         {
          "name" : "callback",
          "type" : "PipeIOCallback"
         }
        ],
        "endline" : 305,
        "endchar" : 2
       },
       {
        "name" : "close",
        "kind" : "function",
        "line" : 307,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(PipeFD pipe, PipeCloseCallback on_closed)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         },
         {
          "name" : "on_closed",
          "type" : "PipeCloseCallback"
         }
        ],
        "endline" : 322,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 324,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "const bool(PipeFD handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "PipeFD"
         }
        ],
        "endline" : 328,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 330,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(PipeFD pipe)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         }
        ],
        "endline" : 337,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 339,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(PipeFD pipe)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         }
        ],
        "endline" : 353,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 355,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(PipeFD fd, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "PipeFD"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 358,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 361,
    "char" : 7,
    "name" : "DummyEventDriverPipes",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     }
    ],
    "members" : [
     {
      "name" : "DummyEventDriverPipes",
      "kind" : "class",
      "protection" : "public",
      "line" : 361,
      "char" : 7,
      "members" : [
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 363,
        "char" : 2,
        "type" : "(Loop loop)",
        "parameters" : [
         {
          "name" : "loop",
          "type" : "Loop"
         }
        ],
        "endline" : 363,
        "endchar" : 19
       },
       {
        "name" : "adopt",
        "kind" : "function",
        "line" : 365,
        "char" : 18,
        "storageClass" : [
         "override"
        ],
        "type" : "PipeFD(int system_pipe_handle)",
        "parameters" : [
         {
          "name" : "system_pipe_handle",
          "deco" : "i"
         }
        ],
        "endline" : 368,
        "endchar" : 2
       },
       {
        "name" : "read",
        "kind" : "function",
        "line" : 370,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(PipeFD pipe, ubyte[] buffer, IOMode mode, PipeIOCallback on_read_finish)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         },
         {
          "name" : "buffer",
          "type" : "ubyte[]"
         },
         {
          "name" : "mode",
          "type" : "IOMode"
         },
         {
          "name" : "on_read_finish",
          "type" : "PipeIOCallback"
         }
        ],
        "endline" : 373,
        "endchar" : 2
       },
       {
        "name" : "cancelRead",
        "kind" : "function",
        "line" : 375,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(PipeFD pipe)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         }
        ],
        "endline" : 378,
        "endchar" : 2
       },
       {
        "name" : "write",
        "kind" : "function",
        "line" : 380,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(PipeFD pipe, const(ubyte)[] buffer, IOMode mode, PipeIOCallback on_write_finish)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         },
         {
          "name" : "buffer",
          "type" : "const(ubyte)[]"
         },
         {
          "name" : "mode",
          "type" : "IOMode"
         },
         {
          "name" : "on_write_finish",
          "type" : "PipeIOCallback"
         }
        ],
        "endline" : 383,
        "endchar" : 2
       },
       {
        "name" : "cancelWrite",
        "kind" : "function",
        "line" : 385,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(PipeFD pipe)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         }
        ],
        "endline" : 388,
        "endchar" : 2
       },
       {
        "name" : "waitForData",
        "kind" : "function",
        "line" : 390,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(PipeFD pipe, PipeIOCallback on_data_available)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         },
         {
          "name" : "on_data_available",
          "type" : "PipeIOCallback"
         }
        ],
        "endline" : 393,
        "endchar" : 2
       },
       {
        "name" : "close",
        "kind" : "function",
        "line" : 395,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(PipeFD pipe, PipeCloseCallback on_closed)",
        "parameters" : [
         {
          "name" : "pipe",
          "type" : "PipeFD"
         },
         {
          "name" : "on_closed",
          "type" : "PipeCloseCallback"
         }
        ],
        "endline" : 403,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 405,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "const bool(PipeFD handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "PipeFD"
         }
        ],
        "endline" : 408,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 410,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(PipeFD pid)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "PipeFD"
         }
        ],
        "endline" : 413,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 415,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "bool(PipeFD pid)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "PipeFD"
         }
        ],
        "endline" : 418,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 420,
        "char" : 27,
        "storageClass" : [
         "override"
        ],
        "type" : "@system void*(PipeFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "PipeFD"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 423,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "PipeSlot",
    "kind" : "struct",
    "protection" : "package",
    "line" : 427,
    "char" : 9,
    "members" : [
     {
      "name" : "Handle",
      "kind" : "alias",
      "protection" : "public",
      "line" : 428,
      "char" : 2,
      "deco" : "S9eventcore6driver6PipeFD"
     },
     {
      "name" : "bytesRead",
      "kind" : "variable",
      "protection" : "public",
      "line" : 430,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "readBuffer",
      "kind" : "variable",
      "protection" : "public",
      "line" : 431,
      "char" : 10,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "Ah",
      "offset" : 8
     },
     {
      "name" : "readMode",
      "kind" : "variable",
      "protection" : "public",
      "line" : 432,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "E9eventcore6driver6IOMode",
      "offset" : 24
     },
     {
      "name" : "readCallback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 433,
      "char" : 17,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv",
      "originalType" : "PipeIOCallback",
      "offset" : 32
     },
     {
      "name" : "bytesWritten",
      "kind" : "variable",
      "protection" : "public",
      "line" : 435,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 48
     },
     {
      "name" : "writeBuffer",
      "kind" : "variable",
      "protection" : "public",
      "line" : 436,
      "char" : 17,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "Axh",
      "offset" : 56
     },
     {
      "name" : "writeMode",
      "kind" : "variable",
      "protection" : "public",
      "line" : 437,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "E9eventcore6driver6IOMode",
      "offset" : 72
     },
     {
      "name" : "writeCallback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 438,
      "char" : 17,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver6PipeFDEQzQr8IOStatusmZv",
      "originalType" : "PipeIOCallback",
      "offset" : 80
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.processes",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/processes.d",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.driver",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.signals",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "nogc_assert",
     "print"
    ]
   },
   {
    "name" : "std.algorithm.comparison",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "among"
    ]
   },
   {
    "name" : "std.variant",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "visit"
    ]
   },
   {
    "name" : "std.stdint",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "SIGCHLD",
    "kind" : "variable",
    "protection" : "private",
    "line" : 15,
    "char" : 14,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "17"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 17,
    "char" : 7,
    "name" : "PosixEventDriverProcesses",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     }
    ],
    "members" : [
     {
      "name" : "PosixEventDriverProcesses",
      "kind" : "class",
      "protection" : "public",
      "line" : 17,
      "char" : 7,
      "members" : [
       {
        "name" : "core.sync.mutex",
        "kind" : "import",
        "line" : 19,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "Mutex"
        ]
       },
       {
        "name" : "core.sys.posix.unistd",
        "kind" : "import",
        "line" : 20,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "dup"
        ]
       },
       {
        "name" : "core.thread",
        "kind" : "import",
        "line" : 21,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "Thread"
        ]
       },
       {
        "name" : "s_mutex",
        "kind" : "variable",
        "line" : 24,
        "char" : 23,
        "storageClass" : [
         "static",
         "shared"
        ],
        "type" : "Mutex"
       },
       {
        "name" : "s_processes",
        "kind" : "variable",
        "line" : 25,
        "char" : 37,
        "storageClass" : [
         "static",
         "__gshared"
        ],
        "type" : "ProcessInfo[int]"
       },
       {
        "name" : "s_waitThread",
        "kind" : "variable",
        "line" : 26,
        "char" : 27,
        "storageClass" : [
         "static",
         "__gshared"
        ],
        "type" : "Thread"
       },
       {
        "name" : "m_loop",
        "kind" : "variable",
        "line" : 28,
        "char" : 8,
        "type" : "Loop"
       },
       {
        "name" : "m_driver",
        "kind" : "variable",
        "line" : 30,
        "char" : 15,
        "type" : "EventDriver"
       },
       {
        "name" : "m_validationCounter",
        "kind" : "variable",
        "line" : 31,
        "char" : 8,
        "deco" : "k"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 34,
        "char" : 2,
        "type" : "(Loop loop, EventDriver driver)",
        "parameters" : [
         {
          "name" : "loop",
          "type" : "Loop"
         },
         {
          "name" : "driver",
          "type" : "EventDriver"
         }
        ],
        "endline" : 38,
        "endchar" : 2
       },
       {
        "name" : "dispose",
        "kind" : "function",
        "line" : 40,
        "char" : 7,
        "type" : "void()",
        "endline" : 42,
        "endchar" : 2
       },
       {
        "name" : "adopt",
        "kind" : "function",
        "line" : 44,
        "char" : 27,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "ProcessID(int system_pid)",
        "parameters" : [
         {
          "name" : "system_pid",
          "deco" : "i"
         }
        ],
        "endline" : 55,
        "endchar" : 2
       },
       {
        "name" : "spawn",
        "kind" : "function",
        "line" : 57,
        "char" : 25,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@trusted Process(string[] args, ProcessStdinFile stdin, ProcessStdoutFile stdout, ProcessStderrFile stderr, const STRINGAA env, ProcessConfig config, string working_dir)",
        "parameters" : [
         {
          "name" : "args",
          "type" : "string[]"
         },
         {
          "name" : "stdin",
          "type" : "ProcessStdinFile"
         },
         {
          "name" : "stdout",
          "type" : "ProcessStdoutFile"
         },
         {
          "name" : "stderr",
          "type" : "ProcessStderrFile"
         },
         {
          "name" : "env",
          "type" : "STRINGAA",
          "storageClass" : [
           "const"
          ]
         },
         {
          "name" : "config",
          "type" : "ProcessConfig"
         },
         {
          "name" : "working_dir",
          "type" : "string"
         }
        ],
        "endline" : 153,
        "endchar" : 2
       },
       {
        "name" : "kill",
        "kind" : "function",
        "line" : 155,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@trusted void(ProcessID pid, int signal)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         },
         {
          "name" : "signal",
          "deco" : "i"
         }
        ],
        "endline" : 163,
        "endchar" : 2
       },
       {
        "name" : "wait",
        "kind" : "function",
        "line" : 165,
        "char" : 24,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "size_t(ProcessID pid, ProcessWaitCallback on_process_exit)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         },
         {
          "name" : "on_process_exit",
          "type" : "ProcessWaitCallback"
         }
        ],
        "endline" : 188,
        "endchar" : 2
       },
       {
        "name" : "cancelWait",
        "kind" : "function",
        "line" : 190,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(ProcessID pid, size_t wait_id)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         },
         {
          "name" : "wait_id",
          "type" : "size_t"
         }
        ],
        "endline" : 202,
        "endchar" : 2
       },
       {
        "name" : "onProcessExit",
        "kind" : "function",
        "line" : 204,
        "char" : 15,
        "type" : "shared void(int system_pid)",
        "parameters" : [
         {
          "name" : "system_pid",
          "deco" : "i"
         }
        ],
        "endline" : 207,
        "endchar" : 2
       },
       {
        "name" : "onLocalProcessExit",
        "kind" : "function",
        "line" : 209,
        "char" : 22,
        "storageClass" : [
         "static"
        ],
        "type" : "void(int system_pid)",
        "parameters" : [
         {
          "name" : "system_pid",
          "deco" : "i"
         }
        ],
        "endline" : 234,
        "endchar" : 2
       },
       {
        "name" : "hasExited",
        "kind" : "function",
        "line" : 236,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(ProcessID pid)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         }
        ],
        "endline" : 244,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 246,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "const bool(ProcessID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "ProcessID"
         }
        ],
        "endline" : 252,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 254,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(ProcessID pid)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         }
        ],
        "endline" : 262,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 264,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(ProcessID pid)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         }
        ],
        "endline" : 284,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 286,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(ProcessID pid, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 301,
        "endchar" : 2
       },
       {
        "name" : "pendingCount",
        "kind" : "function",
        "line" : 303,
        "char" : 33,
        "storageClass" : [
         "final"
        ],
        "type" : "const nothrow @property @trusted size_t()",
        "endline" : 303,
        "endchar" : 100
       },
       {
        "name" : "_sharedStaticCtor_L306_C2",
        "kind" : "shared static constructor",
        "line" : 306,
        "char" : 2,
        "storageClass" : [
         "static"
        ],
        "endline" : 309,
        "endchar" : 2
       },
       {
        "name" : "lockedProcessInfoPlain",
        "kind" : "function",
        "line" : 311,
        "char" : 22,
        "storageClass" : [
         "static"
        ],
        "type" : "void(int pid, scope void delegate(ProcessInfo*) nothrow @safe fn)",
        "parameters" : [
         {
          "name" : "pid",
          "deco" : "i"
         },
         {
          "name" : "fn",
          "type" : "void delegate(ProcessInfo*) nothrow @safe",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 317,
        "endchar" : 2
       },
       {
        "name" : "lockedProcessInfo",
        "kind" : "function",
        "line" : 319,
        "char" : 22,
        "storageClass" : [
         "static"
        ],
        "type" : "void(ProcessID pid, scope void delegate(ProcessInfo*) nothrow @safe fn)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         },
         {
          "name" : "fn",
          "type" : "void delegate(ProcessInfo*) nothrow @safe",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 324,
        "endchar" : 2
       },
       {
        "name" : "add",
        "kind" : "function",
        "line" : 326,
        "char" : 22,
        "storageClass" : [
         "static"
        ],
        "type" : "@trusted void(int pid, ProcessInfo info)",
        "parameters" : [
         {
          "name" : "pid",
          "deco" : "i"
         },
         {
          "name" : "info",
          "type" : "ProcessInfo"
         }
        ],
        "endline" : 337,
        "endchar" : 2
       },
       {
        "name" : "waitForProcesses",
        "kind" : "function",
        "line" : 339,
        "char" : 22,
        "storageClass" : [
         "static"
        ],
        "type" : "@system void()",
        "endline" : 387,
        "endchar" : 2
       },
       {
        "name" : "onProcessExitStatic",
        "kind" : "function",
        "line" : 389,
        "char" : 22,
        "storageClass" : [
         "static"
        ],
        "type" : "void(int system_pid, int exit_status)",
        "parameters" : [
         {
          "name" : "system_pid",
          "deco" : "i"
         },
         {
          "name" : "exit_status",
          "deco" : "i"
         }
        ],
        "endline" : 406,
        "endchar" : 2
       },
       {
        "name" : "ProcessInfo",
        "kind" : "struct",
        "protection" : "public",
        "line" : 408,
        "char" : 17,
        "members" : [
         {
          "name" : "exited",
          "kind" : "variable",
          "line" : 409,
          "char" : 8,
          "deco" : "b",
          "init" : "true"
         },
         {
          "name" : "exitCode",
          "kind" : "variable",
          "line" : 410,
          "char" : 7,
          "deco" : "i"
         },
         {
          "name" : "callbacks",
          "kind" : "variable",
          "line" : 411,
          "char" : 25,
          "type" : "ProcessWaitCallback[]"
         },
         {
          "name" : "refCount",
          "kind" : "variable",
          "line" : 412,
          "char" : 10,
          "type" : "size_t",
          "init" : "0"
         },
         {
          "name" : "validationCounter",
          "kind" : "variable",
          "line" : 413,
          "char" : 8,
          "deco" : "k"
         },
         {
          "name" : "driver",
          "kind" : "variable",
          "line" : 414,
          "char" : 29,
          "type" : "PosixEventDriverProcesses"
         },
         {
          "name" : "userDataDestructor",
          "kind" : "variable",
          "line" : 416,
          "char" : 19,
          "type" : "DataInitializer"
         },
         {
          "name" : "userData",
          "kind" : "variable",
          "line" : 417,
          "char" : 27,
          "type" : "ubyte[16 * size_t.sizeof]"
         }
        ]
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 421,
    "char" : 7,
    "name" : "DummyEventDriverProcesses",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     }
    ],
    "members" : [
     {
      "name" : "DummyEventDriverProcesses",
      "kind" : "class",
      "protection" : "public",
      "line" : 421,
      "char" : 7,
      "members" : [
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 424,
        "char" : 2,
        "type" : "(Loop loop, EventDriver driver)",
        "parameters" : [
         {
          "name" : "loop",
          "type" : "Loop"
         },
         {
          "name" : "driver",
          "type" : "EventDriver"
         }
        ],
        "endline" : 424,
        "endchar" : 39
       },
       {
        "name" : "dispose",
        "kind" : "function",
        "line" : 426,
        "char" : 7,
        "type" : "void()",
        "endline" : 426,
        "endchar" : 18
       },
       {
        "name" : "adopt",
        "kind" : "function",
        "line" : 428,
        "char" : 21,
        "storageClass" : [
         "override"
        ],
        "type" : "ProcessID(int system_pid)",
        "parameters" : [
         {
          "name" : "system_pid",
          "deco" : "i"
         }
        ],
        "endline" : 431,
        "endchar" : 2
       },
       {
        "name" : "spawn",
        "kind" : "function",
        "line" : 433,
        "char" : 19,
        "storageClass" : [
         "override"
        ],
        "type" : "Process(string[] args, ProcessStdinFile stdin, ProcessStdoutFile stdout, ProcessStderrFile stderr, const STRINGAA env, ProcessConfig config, string working_dir)",
        "parameters" : [
         {
          "name" : "args",
          "type" : "string[]"
         },
         {
          "name" : "stdin",
          "type" : "ProcessStdinFile"
         },
         {
          "name" : "stdout",
          "type" : "ProcessStdoutFile"
         },
         {
          "name" : "stderr",
          "type" : "ProcessStderrFile"
         },
         {
          "name" : "env",
          "type" : "STRINGAA",
          "storageClass" : [
           "const"
          ]
         },
         {
          "name" : "config",
          "type" : "ProcessConfig"
         },
         {
          "name" : "working_dir",
          "type" : "string"
         }
        ],
        "endline" : 436,
        "endchar" : 2
       },
       {
        "name" : "hasExited",
        "kind" : "function",
        "line" : 438,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "bool(ProcessID pid)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         }
        ],
        "endline" : 441,
        "endchar" : 2
       },
       {
        "name" : "kill",
        "kind" : "function",
        "line" : 443,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(ProcessID pid, int signal)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         },
         {
          "name" : "signal",
          "deco" : "i"
         }
        ],
        "endline" : 446,
        "endchar" : 2
       },
       {
        "name" : "wait",
        "kind" : "function",
        "line" : 448,
        "char" : 18,
        "storageClass" : [
         "override"
        ],
        "type" : "size_t(ProcessID pid, ProcessWaitCallback on_process_exit)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         },
         {
          "name" : "on_process_exit",
          "type" : "ProcessWaitCallback"
         }
        ],
        "endline" : 451,
        "endchar" : 2
       },
       {
        "name" : "cancelWait",
        "kind" : "function",
        "line" : 453,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(ProcessID pid, size_t waitId)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         },
         {
          "name" : "waitId",
          "type" : "size_t"
         }
        ],
        "endline" : 456,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 458,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "const bool(ProcessID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "ProcessID"
         }
        ],
        "endline" : 461,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 463,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(ProcessID pid)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         }
        ],
        "endline" : 466,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 468,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "bool(ProcessID pid)",
        "parameters" : [
         {
          "name" : "pid",
          "type" : "ProcessID"
         }
        ],
        "endline" : 471,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 473,
        "char" : 27,
        "storageClass" : [
         "override"
        ],
        "type" : "@system void*(ProcessID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "ProcessID"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 476,
        "endchar" : 2
       },
       {
        "name" : "pendingCount",
        "kind" : "function",
        "line" : 478,
        "char" : 33,
        "storageClass" : [
         "final"
        ],
        "type" : "const nothrow @property size_t()",
        "endline" : 478,
        "endchar" : 74
       }
      ]
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.select",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/select.d",
  "comment" : "\tA `select` based event driver implementation.\n\n\tThis driver works on all BSD socket compatible operating systems, including\n\tWindows. It has a good performance for small numbers of cuncurrently open\n\tfiles/sockets, but is not suited for larger amounts.\n",
  "members" : [
   {
    "name" : "eventcore.drivers.posix.driver",
    "kind" : "import",
    "line" : 11,
    "char" : 15
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 12,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "core.time",
    "kind" : "import",
    "line" : 14,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Duration"
    ]
   },
   {
    "name" : "core.sys.posix.sys.time",
    "kind" : "import",
    "line" : 17,
    "char" : 9,
    "protection" : "private",
    "selective" : [
     "timeval"
    ]
   },
   {
    "name" : "core.sys.posix.sys.select",
    "kind" : "import",
    "line" : 18,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "SelectEventDriver",
    "kind" : "alias",
    "protection" : "public",
    "line" : 26,
    "char" : 1,
    "deco" : "C9eventcore7drivers5posix6driver__T16PosixEventDriverHTCQCdQBwQBr6select15SelectEventLoopZQCd",
    "originalType" : "PosixEventDriver!SelectEventLoop"
   },
   {
    "name" : "SelectEventLoop",
    "kind" : "class",
    "protection" : "public",
    "line" : 28,
    "char" : 7,
    "base" : "eventcore.drivers.posix.driver.PosixEventLoop",
    "members" : [
     {
      "name" : "doProcessEvents",
      "kind" : "function",
      "protection" : "public",
      "line" : 30,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNfS4core4time8DurationZb",
      "parameters" : [
       {
        "name" : "timeout",
        "deco" : "S4core4time8Duration"
       }
      ],
      "endline" : 78,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.doProcessEvents"
      ]
     },
     {
      "name" : "dispose",
      "kind" : "function",
      "protection" : "public",
      "line" : 80,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNiNfZv",
      "originalType" : "nothrow @safe void()",
      "endline" : 83,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.dispose"
      ]
     },
     {
      "name" : "registerFD",
      "kind" : "function",
      "protection" : "public",
      "line" : 85,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNiNfS9eventcore6driver2FDEQv7drivers5posixQBb9EventMaskbZv",
      "originalType" : "nothrow @safe void(FD fd, EventMask mask, bool edge_triggered = true)",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver2FD"
       },
       {
        "name" : "mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       },
       {
        "name" : "edge_triggered",
        "deco" : "b",
        "default" : "true"
       }
      ],
      "endline" : 87,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.registerFD"
      ]
     },
     {
      "name" : "unregisterFD",
      "kind" : "function",
      "protection" : "public",
      "line" : 89,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNiNfS9eventcore6driver2FDEQv7drivers5posixQBb9EventMaskZv",
      "originalType" : "nothrow @safe void(FD fd, EventMask mask)",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver2FD"
       },
       {
        "name" : "mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       }
      ],
      "endline" : 91,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.unregisterFD"
      ]
     },
     {
      "name" : "updateFD",
      "kind" : "function",
      "protection" : "public",
      "line" : 93,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "FNbNiNfS9eventcore6driver2FDEQv7drivers5posixQBb9EventMaskQBebZv",
      "originalType" : "nothrow @safe void(FD fd, EventMask old_mask, EventMask mask, bool edge_triggered = true)",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver2FD"
       },
       {
        "name" : "old_mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       },
       {
        "name" : "mask",
        "deco" : "E9eventcore7drivers5posix6driver9EventMask"
       },
       {
        "name" : "edge_triggered",
        "deco" : "b",
        "default" : "true"
       }
      ],
      "endline" : 95,
      "endchar" : 2,
      "overrides" : [
       "eventcore.drivers.posix.driver.PosixEventLoop.updateFD"
      ]
     }
    ]
   },
   {
    "name" : "toTimeVal",
    "kind" : "function",
    "protection" : "private",
    "line" : 98,
    "char" : 17,
    "deco" : "FNbNfS4core4time8DurationZSQv3sys5posixQkQBe7timeval",
    "parameters" : [
     {
      "name" : "dur",
      "deco" : "S4core4time8Duration"
     }
    ],
    "endline" : 103,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.signals",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/signals.d",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.driver",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "nogc_assert"
    ]
   },
   {
    "name" : "std.algorithm.comparison",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "among"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 11,
    "char" : 7,
    "name" : "SignalFDEventDriverSignals",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     }
    ],
    "members" : [
     {
      "name" : "SignalFDEventDriverSignals",
      "kind" : "class",
      "protection" : "public",
      "line" : 11,
      "char" : 7,
      "members" : [
       {
        "name" : "core.stdc.errno",
        "kind" : "import",
        "line" : 13,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "errno",
         "EAGAIN",
         "EINPROGRESS"
        ]
       },
       {
        "name" : "core.sys.posix.signal",
        "kind" : "import",
        "line" : 14,
        "char" : 9,
        "protection" : "private"
       },
       {
        "name" : "core.sys.posix.unistd",
        "kind" : "import",
        "line" : 15,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "close",
         "read",
         "write"
        ]
       },
       {
        "name" : "core.sys.linux.sys.signalfd",
        "kind" : "import",
        "line" : 16,
        "char" : 9,
        "protection" : "private"
       },
       {
        "name" : "m_loop",
        "kind" : "variable",
        "line" : 18,
        "char" : 15,
        "type" : "Loop"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 20,
        "char" : 2,
        "type" : "@nogc (Loop loop)",
        "parameters" : [
         {
          "name" : "loop",
          "type" : "Loop"
         }
        ],
        "endline" : 20,
        "endchar" : 41
       },
       {
        "name" : "listen",
        "kind" : "function",
        "line" : 22,
        "char" : 26,
        "storageClass" : [
         "override"
        ],
        "type" : "SignalListenID(int sig, SignalCallback on_signal)",
        "parameters" : [
         {
          "name" : "sig",
          "deco" : "i"
         },
         {
          "name" : "on_signal",
          "type" : "SignalCallback"
         }
        ],
        "endline" : 25,
        "endchar" : 2
       },
       {
        "name" : "listenInternal",
        "kind" : "function",
        "line" : 27,
        "char" : 25,
        "type" : "SignalListenID(int sig, SignalCallback on_signal, bool is_internal = true)",
        "parameters" : [
         {
          "name" : "sig",
          "deco" : "i"
         },
         {
          "name" : "on_signal",
          "type" : "SignalCallback"
         },
         {
          "name" : "is_internal",
          "deco" : "b",
          "default" : "true"
         }
        ],
        "endline" : 48,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 50,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "const bool(SignalListenID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "SignalListenID"
         }
        ],
        "endline" : 54,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 56,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(SignalListenID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "SignalListenID"
         }
        ],
        "endline" : 62,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 64,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "bool(SignalListenID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "SignalListenID"
         }
        ],
        "endline" : 78,
        "endchar" : 2
       },
       {
        "name" : "onSignal",
        "kind" : "function",
        "line" : 80,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 97,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 100,
    "char" : 7,
    "name" : "DummyEventDriverSignals",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     }
    ],
    "members" : [
     {
      "name" : "DummyEventDriverSignals",
      "kind" : "class",
      "protection" : "public",
      "line" : 100,
      "char" : 7,
      "members" : [
       {
        "name" : "m_loop",
        "kind" : "variable",
        "line" : 103,
        "char" : 15,
        "type" : "Loop"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 105,
        "char" : 2,
        "type" : "(Loop loop)",
        "parameters" : [
         {
          "name" : "loop",
          "type" : "Loop"
         }
        ],
        "endline" : 105,
        "endchar" : 35
       },
       {
        "name" : "listen",
        "kind" : "function",
        "line" : 107,
        "char" : 26,
        "storageClass" : [
         "override"
        ],
        "type" : "SignalListenID(int sig, SignalCallback on_signal)",
        "parameters" : [
         {
          "name" : "sig",
          "deco" : "i"
         },
         {
          "name" : "on_signal",
          "type" : "SignalCallback"
         }
        ],
        "endline" : 110,
        "endchar" : 2
       },
       {
        "name" : "listenInternal",
        "kind" : "function",
        "line" : 112,
        "char" : 25,
        "type" : "SignalListenID(int sig, SignalCallback on_signal, bool is_internal = true)",
        "parameters" : [
         {
          "name" : "sig",
          "deco" : "i"
         },
         {
          "name" : "on_signal",
          "type" : "SignalCallback"
         },
         {
          "name" : "is_internal",
          "deco" : "b",
          "default" : "true"
         }
        ],
        "endline" : 115,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 117,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "const bool(SignalListenID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "SignalListenID"
         }
        ],
        "endline" : 120,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 122,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(SignalListenID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "SignalListenID"
         }
        ],
        "endline" : 125,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 127,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "bool(SignalListenID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "SignalListenID"
         }
        ],
        "endline" : 130,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "SignalSlot",
    "kind" : "struct",
    "protection" : "package",
    "line" : 133,
    "char" : 9,
    "members" : [
     {
      "name" : "Handle",
      "kind" : "alias",
      "protection" : "public",
      "line" : 134,
      "char" : 2,
      "deco" : "S9eventcore6driver14SignalListenID"
     },
     {
      "name" : "callback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 135,
      "char" : 17,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver14SignalListenIDEQBiQBb12SignalStatusiZv",
      "originalType" : "SignalCallback",
      "offset" : 0
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.sockets",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/sockets.d",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.driver",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm.comparison",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "among",
     "min",
     "max"
    ]
   },
   {
    "name" : "std.socket",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Address",
     "AddressFamily",
     "InternetAddress",
     "Internet6Address",
     "UnknownAddress"
    ]
   },
   {
    "name" : "core.time",
    "kind" : "import",
    "line" : 11,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Duration"
    ]
   },
   {
    "name" : "std.socket",
    "kind" : "import",
    "line" : 14,
    "char" : 9,
    "protection" : "private",
    "selective" : [
     "UnixAddress"
    ]
   },
   {
    "name" : "core.sys.posix.netdb",
    "kind" : "import",
    "line" : 15,
    "char" : 9,
    "protection" : "private",
    "selective" : [
     "AI_ADDRCONFIG",
     "AI_V4MAPPED",
     "addrinfo",
     "freeaddrinfo",
     "getaddrinfo"
    ]
   },
   {
    "name" : "core.sys.posix.netinet.in_",
    "kind" : "import",
    "line" : 16,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.sys.posix.netinet.tcp",
    "kind" : "import",
    "line" : 17,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.sys.posix.sys.un",
    "kind" : "import",
    "line" : 18,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.sys.posix.unistd",
    "kind" : "import",
    "line" : 19,
    "char" : 9,
    "protection" : "private",
    "selective" : [
     "close",
     "read",
     "write"
    ]
   },
   {
    "name" : "core.stdc.errno",
    "kind" : "import",
    "line" : 20,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.sys.posix.fcntl",
    "kind" : "import",
    "line" : 21,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.sys.posix.sys.socket",
    "kind" : "import",
    "line" : 22,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "SO_REUSEPORT",
    "kind" : "variable",
    "protection" : "public",
    "line" : 24,
    "char" : 23,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "15"
   },
   {
    "name" : "O_CLOEXEC",
    "kind" : "variable",
    "protection" : "public",
    "line" : 29,
    "char" : 24,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "524288"
   },
   {
    "name" : "accept4",
    "kind" : "function",
    "protection" : "public",
    "line" : 39,
    "char" : 17,
    "linkage" : "c",
    "deco" : "UNbNiNfiPS4core3sys5posixQk6socket8sockaddrPkiZi",
    "originalType" : "nothrow @nogc @safe extern (C) int(int sockfd, sockaddr* addr, socklen_t* addrlen, int flags)",
    "parameters" : [
     {
      "name" : "sockfd",
      "deco" : "i"
     },
     {
      "name" : "addr",
      "deco" : "PS4core3sys5posixQk6socket8sockaddr"
     },
     {
      "name" : "addrlen",
      "deco" : "Pk"
     },
     {
      "name" : "flags",
      "deco" : "i"
     }
    ]
   },
   {
    "name" : "SOCK_NONBLOCK",
    "kind" : "variable",
    "protection" : "public",
    "line" : 41,
    "char" : 8,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "2048"
   },
   {
    "name" : "SOCK_CLOEXEC",
    "kind" : "variable",
    "protection" : "public",
    "line" : 43,
    "char" : 8,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "524288"
   },
   {
    "name" : "core.sys.linux.netinet.in_",
    "kind" : "import",
    "line" : 45,
    "char" : 12,
    "protection" : "private",
    "selective" : [
     "IP_ADD_MEMBERSHIP",
     "IP_MULTICAST_LOOP"
    ]
   },
   {
    "name" : "SOL_TCP",
    "kind" : "variable",
    "protection" : "public",
    "line" : 51,
    "char" : 8,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "6"
   },
   {
    "name" : "TCP_KEEPIDLE",
    "kind" : "variable",
    "protection" : "public",
    "line" : 53,
    "char" : 8,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "4"
   },
   {
    "name" : "TCP_KEEPINTVL",
    "kind" : "variable",
    "protection" : "public",
    "line" : 55,
    "char" : 8,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "5"
   },
   {
    "name" : "TCP_KEEPCNT",
    "kind" : "variable",
    "protection" : "public",
    "line" : 57,
    "char" : 8,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "6"
   },
   {
    "name" : "TCP_USER_TIMEOUT",
    "kind" : "variable",
    "protection" : "public",
    "line" : 59,
    "char" : 8,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "i",
    "init" : "18"
   },
   {
    "name" : "SEND_FLAGS",
    "kind" : "variable",
    "protection" : "public",
    "line" : 108,
    "char" : 8,
    "storageClass" : [
     "enum",
     "@safe"
    ],
    "deco" : "k",
    "init" : "16384u"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 115,
    "char" : 7,
    "name" : "PosixEventDriverSockets",
    "parameters" : [
     {
      "name" : "Loop",
      "kind" : "type",
      "deco" : "C9eventcore7drivers5posix6driver14PosixEventLoop"
     }
    ],
    "members" : [
     {
      "name" : "PosixEventDriverSockets",
      "kind" : "class",
      "protection" : "public",
      "line" : 115,
      "char" : 7,
      "members" : [
       {
        "name" : "m_loop",
        "kind" : "variable",
        "line" : 117,
        "char" : 15,
        "type" : "Loop"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 119,
        "char" : 2,
        "type" : "(Loop loop)",
        "parameters" : [
         {
          "name" : "loop",
          "type" : "Loop"
         }
        ],
        "endline" : 119,
        "endchar" : 35
       },
       {
        "name" : "connectStream",
        "kind" : "function",
        "line" : 121,
        "char" : 32,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "StreamSocketFD(scope Address address, scope Address bind_address, ConnectCallback on_connect)",
        "parameters" : [
         {
          "name" : "address",
          "type" : "Address",
          "storageClass" : [
           "scope"
          ]
         },
         {
          "name" : "bind_address",
          "type" : "Address",
          "storageClass" : [
           "scope"
          ]
         },
         {
          "name" : "on_connect",
          "type" : "ConnectCallback"
         }
        ],
        "endline" : 167,
        "endchar" : 2
       },
       {
        "name" : "cancelConnectStream",
        "kind" : "function",
        "line" : 169,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(StreamSocketFD sock)",
        "parameters" : [
         {
          "name" : "sock",
          "type" : "StreamSocketFD"
         }
        ],
        "endline" : 181,
        "endchar" : 2
       },
       {
        "name" : "adoptStream",
        "kind" : "function",
        "line" : 183,
        "char" : 32,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "StreamSocketFD(int socket)",
        "parameters" : [
         {
          "name" : "socket",
          "deco" : "i"
         }
        ],
        "endline" : 191,
        "endchar" : 2
       },
       {
        "name" : "onConnect",
        "kind" : "function",
        "line" : 193,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 216,
        "endchar" : 2
       },
       {
        "name" : "determineConnectStatus",
        "kind" : "function",
        "line" : 218,
        "char" : 24,
        "type" : "ConnectStatus(int sock_err)",
        "parameters" : [
         {
          "name" : "sock_err",
          "deco" : "i"
         }
        ],
        "endline" : 225,
        "endchar" : 2
       },
       {
        "name" : "listenStream",
        "kind" : "alias",
        "line" : 227,
        "char" : 2,
        "type" : "EventDriverSockets.listenStream"
       },
       {
        "name" : "listenStream",
        "kind" : "function",
        "line" : 228,
        "char" : 38,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "StreamListenSocketFD(scope Address address, StreamListenOptions options, AcceptCallback on_accept)",
        "parameters" : [
         {
          "name" : "address",
          "type" : "Address",
          "storageClass" : [
           "scope"
          ]
         },
         {
          "name" : "options",
          "type" : "StreamListenOptions"
         },
         {
          "name" : "on_accept",
          "type" : "AcceptCallback"
         }
        ],
        "endline" : 267,
        "endchar" : 2
       },
       {
        "name" : "waitForConnections",
        "kind" : "function",
        "line" : 269,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(StreamListenSocketFD sock, AcceptCallback on_accept)",
        "parameters" : [
         {
          "name" : "sock",
          "type" : "StreamListenSocketFD"
         },
         {
          "name" : "on_accept",
          "type" : "AcceptCallback"
         }
        ],
        "endline" : 277,
        "endchar" : 2
       },
       {
        "name" : "onAccept",
        "kind" : "function",
        "line" : 279,
        "char" : 15,
        "type" : "void(FD listenfd)",
        "parameters" : [
         {
          "name" : "listenfd",
          "type" : "FD"
         }
        ],
        "endline" : 298,
        "endchar" : 2
       },
       {
        "name" : "getConnectionState",
        "kind" : "function",
        "line" : 300,
        "char" : 18,
        "type" : "ConnectionState(StreamSocketFD sock)",
        "parameters" : [
         {
          "name" : "sock",
          "type" : "StreamSocketFD"
         }
        ],
        "endline" : 304,
        "endchar" : 2
       },
       {
        "name" : "getLocalAddress",
        "kind" : "function",
        "line" : 306,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(SocketFD sock, scope RefAddress dst)",
        "parameters" : [
         {
          "name" : "sock",
          "type" : "SocketFD"
         },
         {
          "name" : "dst",
          "type" : "RefAddress",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 315,
        "endchar" : 2
       },
       {
        "name" : "getRemoteAddress",
        "kind" : "function",
        "line" : 317,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(SocketFD sock, scope RefAddress dst)",
        "parameters" : [
         {
          "name" : "sock",
          "type" : "SocketFD"
         },
         {
          "name" : "dst",
          "type" : "RefAddress",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 326,
        "endchar" : 2
       },
       {
        "name" : "setTCPNoDelay",
        "kind" : "function",
        "line" : 328,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(StreamSocketFD socket, bool enable)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "enable",
          "deco" : "b"
         }
        ],
        "endline" : 334,
        "endchar" : 2
       },
       {
        "name" : "setKeepAlive",
        "kind" : "function",
        "line" : 336,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "@trusted void(StreamSocketFD socket, bool enable)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "enable",
          "deco" : "b"
         }
        ],
        "endline" : 344,
        "endchar" : 2
       },
       {
        "name" : "setKeepAliveParams",
        "kind" : "function",
        "line" : 346,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "@trusted void(StreamSocketFD socket, Duration idle, Duration interval, int probeCount)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "idle",
          "type" : "Duration"
         },
         {
          "name" : "interval",
          "type" : "Duration"
         },
         {
          "name" : "probeCount",
          "deco" : "i"
         }
        ],
        "endline" : 369,
        "endchar" : 2
       },
       {
        "name" : "setUserTimeout",
        "kind" : "function",
        "line" : 371,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "@trusted void(StreamSocketFD socket, Duration timeout)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "timeout",
          "type" : "Duration"
         }
        ],
        "endline" : 381,
        "endchar" : 2
       },
       {
        "name" : "read",
        "kind" : "function",
        "line" : 383,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(StreamSocketFD socket, ubyte[] buffer, IOMode mode, IOCallback on_read_finish)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "buffer",
          "type" : "ubyte[]"
         },
         {
          "name" : "mode",
          "type" : "IOMode"
         },
         {
          "name" : "on_read_finish",
          "type" : "IOCallback"
         }
        ],
        "endline" : 440,
        "endchar" : 2
       },
       {
        "name" : "cancelRead",
        "kind" : "function",
        "line" : 442,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(StreamSocketFD socket)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         }
        ],
        "endline" : 451,
        "endchar" : 2
       },
       {
        "name" : "onSocketRead",
        "kind" : "function",
        "line" : 453,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 500,
        "endchar" : 2
       },
       {
        "name" : "handleReadError",
        "kind" : "function",
        "line" : 502,
        "char" : 26,
        "storageClass" : [
         "static"
        ],
        "type" : "nothrow @safe IOStatus(int err, ref StreamSocketSlot slot)",
        "parameters" : [
         {
          "name" : "err",
          "deco" : "i"
         },
         {
          "name" : "slot",
          "type" : "StreamSocketSlot",
          "storageClass" : [
           "ref"
          ]
         }
        ],
        "endline" : 517,
        "endchar" : 2
       },
       {
        "name" : "write",
        "kind" : "function",
        "line" : 520,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(StreamSocketFD socket, const(ubyte)[] buffer, IOMode mode, IOCallback on_write_finish)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "buffer",
          "type" : "const(ubyte)[]"
         },
         {
          "name" : "mode",
          "type" : "IOMode"
         },
         {
          "name" : "on_write_finish",
          "type" : "IOCallback"
         }
        ],
        "endline" : 572,
        "endchar" : 2
       },
       {
        "name" : "cancelWrite",
        "kind" : "function",
        "line" : 574,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(StreamSocketFD socket)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         }
        ],
        "endline" : 581,
        "endchar" : 2
       },
       {
        "name" : "onSocketWrite",
        "kind" : "function",
        "line" : 583,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 612,
        "endchar" : 2
       },
       {
        "name" : "handleWriteError",
        "kind" : "function",
        "line" : 614,
        "char" : 26,
        "storageClass" : [
         "static"
        ],
        "type" : "nothrow @safe IOStatus(int err, ref StreamSocketSlot slot)",
        "parameters" : [
         {
          "name" : "err",
          "deco" : "i"
         },
         {
          "name" : "slot",
          "type" : "StreamSocketSlot",
          "storageClass" : [
           "ref"
          ]
         }
        ],
        "endline" : 629,
        "endchar" : 2
       },
       {
        "name" : "waitForData",
        "kind" : "function",
        "line" : 632,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(StreamSocketFD socket, IOCallback on_data_available)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "on_data_available",
          "type" : "IOCallback"
         }
        ],
        "endline" : 671,
        "endchar" : 2
       },
       {
        "name" : "onSocketDataAvailable",
        "kind" : "function",
        "line" : 673,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 693,
        "endchar" : 2
       },
       {
        "name" : "shutdown",
        "kind" : "function",
        "line" : 695,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(StreamSocketFD socket, bool shut_read, bool shut_write)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "shut_read",
          "deco" : "b"
         },
         {
          "name" : "shut_write",
          "deco" : "b"
         }
        ],
        "endline" : 704,
        "endchar" : 2
       },
       {
        "name" : "createDatagramSocket",
        "kind" : "function",
        "line" : 706,
        "char" : 34,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "DatagramSocketFD(scope Address bind_address, scope Address target_address, DatagramCreateOptions options = DatagramCreateOptions.init)",
        "parameters" : [
         {
          "name" : "bind_address",
          "type" : "Address",
          "storageClass" : [
           "scope"
          ]
         },
         {
          "name" : "target_address",
          "type" : "Address",
          "storageClass" : [
           "scope"
          ]
         },
         {
          "name" : "options",
          "type" : "DatagramCreateOptions",
          "default" : "DatagramCreateOptions.init"
         }
        ],
        "endline" : 710,
        "endchar" : 2
       },
       {
        "name" : "createDatagramSocketInternal",
        "kind" : "function",
        "line" : 712,
        "char" : 27,
        "type" : "DatagramSocketFD(scope Address bind_address, scope Address target_address, DatagramCreateOptions options = DatagramCreateOptions.init, bool is_internal = true)",
        "parameters" : [
         {
          "name" : "bind_address",
          "type" : "Address",
          "storageClass" : [
           "scope"
          ]
         },
         {
          "name" : "target_address",
          "type" : "Address",
          "storageClass" : [
           "scope"
          ]
         },
         {
          "name" : "options",
          "type" : "DatagramCreateOptions",
          "default" : "DatagramCreateOptions.init"
         },
         {
          "name" : "is_internal",
          "deco" : "b",
          "default" : "true"
         }
        ],
        "endline" : 773,
        "endchar" : 2
       },
       {
        "name" : "adoptDatagramSocket",
        "kind" : "function",
        "line" : 775,
        "char" : 34,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "DatagramSocketFD(int socket)",
        "parameters" : [
         {
          "name" : "socket",
          "deco" : "i"
         }
        ],
        "endline" : 778,
        "endchar" : 2
       },
       {
        "name" : "adoptDatagramSocketInternal",
        "kind" : "function",
        "line" : 780,
        "char" : 27,
        "type" : "@nogc DatagramSocketFD(int socket, bool is_internal = true, bool close_on_exec = false)",
        "parameters" : [
         {
          "name" : "socket",
          "deco" : "i"
         },
         {
          "name" : "is_internal",
          "deco" : "b",
          "default" : "true"
         },
         {
          "name" : "close_on_exec",
          "deco" : "b",
          "default" : "false"
         }
        ],
        "endline" : 789,
        "endchar" : 2
       },
       {
        "name" : "setTargetAddress",
        "kind" : "function",
        "line" : 791,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(DatagramSocketFD socket, scope Address target_address)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "DatagramSocketFD"
         },
         {
          "name" : "target_address",
          "type" : "Address",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 796,
        "endchar" : 2
       },
       {
        "name" : "setBroadcast",
        "kind" : "function",
        "line" : 798,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(DatagramSocketFD socket, bool enable)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "DatagramSocketFD"
         },
         {
          "name" : "enable",
          "deco" : "b"
         }
        ],
        "endline" : 804,
        "endchar" : 2
       },
       {
        "name" : "joinMulticastGroup",
        "kind" : "function",
        "line" : 806,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(DatagramSocketFD socket, scope Address multicast_address, uint interface_index = 0)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "DatagramSocketFD"
         },
         {
          "name" : "multicast_address",
          "type" : "Address",
          "storageClass" : [
           "scope"
          ]
         },
         {
          "name" : "interface_index",
          "deco" : "k",
          "default" : "0"
         }
        ],
        "endline" : 842,
        "endchar" : 2
       },
       {
        "name" : "receive",
        "kind" : "function",
        "line" : 844,
        "char" : 7,
        "type" : "@safe void(DatagramSocketFD socket, ubyte[] buffer, IOMode mode, DatagramIOCallback on_receive_finish)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "DatagramSocketFD"
         },
         {
          "name" : "buffer",
          "type" : "ubyte[]"
         },
         {
          "name" : "mode",
          "type" : "IOMode"
         },
         {
          "name" : "on_receive_finish",
          "type" : "DatagramIOCallback"
         }
        ],
        "endline" : 888,
        "endchar" : 2
       },
       {
        "name" : "receiveNoGC",
        "kind" : "function",
        "line" : 890,
        "char" : 15,
        "type" : "@nogc @trusted void(DatagramSocketFD socket, ubyte[] buffer, IOMode mode, void delegate(DatagramSocketFD, IOStatus, size_t, scope RefAddress) nothrow @nogc @safe on_receive_finish)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "DatagramSocketFD"
         },
         {
          "name" : "buffer",
          "type" : "ubyte[]"
         },
         {
          "name" : "mode",
          "type" : "IOMode"
         },
         {
          "name" : "on_receive_finish",
          "type" : "void delegate(DatagramSocketFD, IOStatus, size_t, scope RefAddress) nothrow @nogc @safe"
         }
        ],
        "endline" : 896,
        "endchar" : 2
       },
       {
        "name" : "cancelReceive",
        "kind" : "function",
        "line" : 898,
        "char" : 7,
        "type" : "@nogc void(DatagramSocketFD socket)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "DatagramSocketFD"
         }
        ],
        "endline" : 908,
        "endchar" : 2
       },
       {
        "name" : "onDgramRead",
        "kind" : "function",
        "line" : 910,
        "char" : 15,
        "type" : "@safe void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 936,
        "endchar" : 2
       },
       {
        "name" : "send",
        "kind" : "function",
        "line" : 938,
        "char" : 7,
        "type" : "void(DatagramSocketFD socket, const(ubyte)[] buffer, IOMode mode, Address target_address, DatagramIOCallback on_send_finish)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "DatagramSocketFD"
         },
         {
          "name" : "buffer",
          "type" : "const(ubyte)[]"
         },
         {
          "name" : "mode",
          "type" : "IOMode"
         },
         {
          "name" : "target_address",
          "type" : "Address"
         },
         {
          "name" : "on_send_finish",
          "type" : "DatagramIOCallback"
         }
        ],
        "endline" : 980,
        "endchar" : 2
       },
       {
        "name" : "cancelSend",
        "kind" : "function",
        "line" : 982,
        "char" : 7,
        "type" : "void(DatagramSocketFD socket)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "DatagramSocketFD"
         }
        ],
        "endline" : 989,
        "endchar" : 2
       },
       {
        "name" : "onDgramWrite",
        "kind" : "function",
        "line" : 991,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 1016,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 1018,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "const bool(SocketFD handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "SocketFD"
         }
        ],
        "endline" : 1022,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 1024,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(SocketFD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "SocketFD"
         }
        ],
        "endline" : 1031,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 1033,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@nogc bool(SocketFD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "SocketFD"
         }
        ],
        "endline" : 1062,
        "endchar" : 2
       },
       {
        "name" : "setOption",
        "kind" : "function",
        "line" : 1064,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(DatagramSocketFD socket, DatagramSocketOption option, bool enable)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "DatagramSocketFD"
         },
         {
          "name" : "option",
          "type" : "DatagramSocketOption"
         },
         {
          "name" : "enable",
          "deco" : "b"
         }
        ],
        "endline" : 1075,
        "endchar" : 2
       },
       {
        "name" : "setOption",
        "kind" : "function",
        "line" : 1077,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(StreamSocketFD socket, StreamSocketOption option, bool enable)",
        "parameters" : [
         {
          "name" : "socket",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "option",
          "type" : "StreamSocketOption"
         },
         {
          "name" : "enable",
          "deco" : "b"
         }
        ],
        "endline" : 1088,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 1090,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(StreamSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "StreamSocketFD"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 1094,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 1096,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(StreamListenSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "StreamListenSocketFD"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 1100,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 1102,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(DatagramSocketFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "DatagramSocketFD"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 1106,
        "endchar" : 2
       },
       {
        "name" : "createSocket",
        "kind" : "function",
        "line" : 1108,
        "char" : 17,
        "type" : "sock_t(AddressFamily family, int type)",
        "parameters" : [
         {
          "name" : "family",
          "type" : "AddressFamily"
         },
         {
          "name" : "type",
          "deco" : "i"
         }
        ],
        "endline" : 1126,
        "endchar" : 2
       },
       {
        "kind" : "template",
        "line" : 1129,
        "char" : 15,
        "name" : "lockHandle",
        "parameters" : [
         {
          "name" : "H",
          "kind" : "type"
         }
        ],
        "members" : [
         {
          "name" : "lockHandle",
          "kind" : "function",
          "line" : 1129,
          "char" : 15,
          "storageClass" : [
           "auto"
          ],
          "type" : "(H handle)",
          "parameters" : [
           {
            "name" : "handle",
            "type" : "H"
           }
          ],
          "endline" : 1139,
          "endchar" : 2
         }
        ]
       }
      ]
     }
    ]
   },
   {
    "name" : "StreamSocketSlot",
    "kind" : "struct",
    "protection" : "package",
    "line" : 1142,
    "char" : 9,
    "members" : [
     {
      "name" : "Handle",
      "kind" : "alias",
      "protection" : "public",
      "line" : 1143,
      "char" : 2,
      "deco" : "S9eventcore6driver14StreamSocketFD"
     },
     {
      "name" : "bytesRead",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1145,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "readBuffer",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1146,
      "char" : 10,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "Ah",
      "offset" : 8
     },
     {
      "name" : "readMode",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1147,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "E9eventcore6driver6IOMode",
      "offset" : 24
     },
     {
      "name" : "readCallback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1148,
      "char" : 13,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv",
      "originalType" : "IOCallback",
      "offset" : 32
     },
     {
      "name" : "bytesWritten",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1150,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 48
     },
     {
      "name" : "writeBuffer",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1151,
      "char" : 17,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "Axh",
      "offset" : 56
     },
     {
      "name" : "writeMode",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1152,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "E9eventcore6driver6IOMode",
      "offset" : 72
     },
     {
      "name" : "writeCallback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1153,
      "char" : 13,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb8IOStatusmZv",
      "originalType" : "IOCallback",
      "offset" : 80
     },
     {
      "name" : "connectCallback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1155,
      "char" : 18,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver14StreamSocketFDEQBiQBb13ConnectStatusZv",
      "originalType" : "ConnectCallback",
      "offset" : 96
     },
     {
      "name" : "state",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1156,
      "char" : 18,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "E9eventcore6driver15ConnectionState",
      "offset" : 112
     }
    ]
   },
   {
    "name" : "StreamListenSocketSlot",
    "kind" : "struct",
    "protection" : "package",
    "line" : 1159,
    "char" : 9,
    "members" : [
     {
      "name" : "Handle",
      "kind" : "alias",
      "protection" : "public",
      "line" : 1160,
      "char" : 2,
      "deco" : "S9eventcore6driver20StreamListenSocketFD"
     },
     {
      "name" : "acceptCallback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1162,
      "char" : 17,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver20StreamListenSocketFDSQBoQBh14StreamSocketFDMCQCmQCf10RefAddressZv",
      "originalType" : "AcceptCallback",
      "offset" : 0
     }
    ]
   },
   {
    "name" : "DgramSocketSlot",
    "kind" : "struct",
    "protection" : "package",
    "line" : 1165,
    "char" : 9,
    "members" : [
     {
      "name" : "Handle",
      "kind" : "alias",
      "protection" : "public",
      "line" : 1166,
      "char" : 2,
      "deco" : "S9eventcore6driver16DatagramSocketFD"
     },
     {
      "name" : "bytesRead",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1167,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 0
     },
     {
      "name" : "readBuffer",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1168,
      "char" : 10,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "Ah",
      "offset" : 8
     },
     {
      "name" : "readMode",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1169,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "E9eventcore6driver6IOMode",
      "offset" : 24
     },
     {
      "name" : "readCallback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1170,
      "char" : 21,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd8IOStatusmMCQCcQBv10RefAddressZv",
      "originalType" : "DatagramIOCallback",
      "offset" : 32
     },
     {
      "name" : "bytesWritten",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1172,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "m",
      "originalType" : "size_t",
      "offset" : 48
     },
     {
      "name" : "writeBuffer",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1173,
      "char" : 17,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "Axh",
      "offset" : 56
     },
     {
      "name" : "writeMode",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1174,
      "char" : 9,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "E9eventcore6driver6IOMode",
      "offset" : 72
     },
     {
      "name" : "writeCallback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1175,
      "char" : 21,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver16DatagramSocketFDEQBkQBd8IOStatusmMCQCcQBv10RefAddressZv",
      "originalType" : "DatagramIOCallback",
      "offset" : 80
     },
     {
      "name" : "targetAddr",
      "kind" : "variable",
      "protection" : "public",
      "line" : 1176,
      "char" : 10,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "C3std6socket7Address",
      "originalType" : "Address",
      "offset" : 96
     }
    ]
   },
   {
    "name" : "closeSocket",
    "kind" : "function",
    "protection" : "private",
    "line" : 1179,
    "char" : 14,
    "deco" : "FNbNiNfiZv",
    "originalType" : "nothrow @nogc @safe void(sock_t sockfd)",
    "parameters" : [
     {
      "name" : "sockfd",
      "deco" : "i"
     }
    ],
    "endline" : 1183,
    "endchar" : 1
   },
   {
    "name" : "setSocketNonBlocking",
    "kind" : "function",
    "protection" : "private",
    "line" : 1185,
    "char" : 14,
    "deco" : "FNbNiNfmbZv",
    "originalType" : "nothrow @nogc @safe void(SocketFD.BaseType sockfd, bool close_on_exec = false)",
    "parameters" : [
     {
      "name" : "sockfd",
      "deco" : "m"
     },
     {
      "name" : "close_on_exec",
      "deco" : "b",
      "default" : "false"
     }
    ],
    "endline" : 1195,
    "endchar" : 1
   },
   {
    "name" : "getSocketError",
    "kind" : "function",
    "protection" : "private",
    "line" : 1197,
    "char" : 13,
    "deco" : "FNbNiNfZi",
    "endline" : 1201,
    "endchar" : 1
   },
   {
    "name" : "getBacklogSize",
    "kind" : "function",
    "protection" : "private",
    "line" : 1203,
    "char" : 13,
    "deco" : "FNbNiNeZi",
    "endline" : 1219,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "eventcore.drivers.posix.watchers",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/posix/watchers.d",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.drivers.posix.driver",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "mallocT",
     "freeT",
     "nogc_assert"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 9,
    "char" : 7,
    "name" : "InotifyEventDriverWatchers",
    "parameters" : [
     {
      "name" : "Events",
      "kind" : "type",
      "deco" : "C9eventcore6driver17EventDriverEvents"
     }
    ],
    "members" : [
     {
      "name" : "InotifyEventDriverWatchers",
      "kind" : "class",
      "protection" : "public",
      "line" : 9,
      "char" : 7,
      "members" : [
       {
        "name" : "core.stdc.errno",
        "kind" : "import",
        "line" : 11,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "errno",
         "EAGAIN",
         "EINPROGRESS"
        ]
       },
       {
        "name" : "core.sys.posix.fcntl",
        "kind" : "import",
        "line" : 12,
        "char" : 9,
        "protection" : "private"
       },
       {
        "name" : "core.sys.posix.unistd",
        "kind" : "import",
        "line" : 12,
        "char" : 31,
        "protection" : "private"
       },
       {
        "name" : "core.sys.linux.sys.inotify",
        "kind" : "import",
        "line" : 12,
        "char" : 54,
        "protection" : "private"
       },
       {
        "name" : "std.algorithm.comparison",
        "kind" : "import",
        "line" : 13,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "among"
        ]
       },
       {
        "name" : "std.file",
        "kind" : "import",
        "line" : 14,
        "char" : 9,
        "protection" : "private"
       },
       {
        "name" : "Loop",
        "kind" : "alias",
        "line" : 17,
        "char" : 3,
        "type" : "typeof(Events.init.loop)"
       },
       {
        "name" : "m_loop",
        "kind" : "variable",
        "line" : 18,
        "char" : 8,
        "type" : "Loop"
       },
       {
        "name" : "WatchState",
        "kind" : "struct",
        "protection" : "public",
        "line" : 20,
        "char" : 3,
        "members" : [
         {
          "name" : "watcherPaths",
          "kind" : "variable",
          "line" : 21,
          "char" : 16,
          "type" : "string[int]"
         },
         {
          "name" : "basePath",
          "kind" : "variable",
          "line" : 22,
          "char" : 11,
          "type" : "string"
         },
         {
          "name" : "recursive",
          "kind" : "variable",
          "line" : 23,
          "char" : 9,
          "deco" : "b"
         }
        ]
       },
       {
        "name" : "m_watches",
        "kind" : "variable",
        "line" : 26,
        "char" : 25,
        "type" : "WatchState[WatcherID]"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 29,
        "char" : 2,
        "type" : "(Events events)",
        "parameters" : [
         {
          "name" : "events",
          "type" : "Events"
         }
        ],
        "endline" : 29,
        "endchar" : 46
       },
       {
        "name" : "watchDirectory",
        "kind" : "function",
        "line" : 31,
        "char" : 27,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "WatcherID(string path, bool recursive, FileChangesCallback callback)",
        "parameters" : [
         {
          "name" : "path",
          "type" : "string"
         },
         {
          "name" : "recursive",
          "deco" : "b"
         },
         {
          "name" : "callback",
          "type" : "FileChangesCallback"
         }
        ],
        "endline" : 54,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 56,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "const bool(WatcherID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "WatcherID"
         }
        ],
        "endline" : 60,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 62,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(WatcherID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "WatcherID"
         }
        ],
        "endline" : 67,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 69,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(WatcherID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "WatcherID"
         }
        ],
        "endline" : 86,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 88,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(WatcherID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "WatcherID"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 92,
        "endchar" : 2
       },
       {
        "name" : "onChanges",
        "kind" : "function",
        "line" : 94,
        "char" : 15,
        "type" : "void(FD fd)",
        "parameters" : [
         {
          "name" : "fd",
          "type" : "FD"
         }
        ],
        "endline" : 97,
        "endchar" : 2
       },
       {
        "name" : "processEvents",
        "kind" : "function",
        "line" : 99,
        "char" : 15,
        "type" : "void(WatcherID id)",
        "parameters" : [
         {
          "name" : "id",
          "type" : "WatcherID"
         }
        ],
        "endline" : 164,
        "endchar" : 2
       },
       {
        "name" : "addSubWatches",
        "kind" : "function",
        "line" : 166,
        "char" : 15,
        "type" : "bool(WatcherID handle, string base_path, string subpath)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "WatcherID"
         },
         {
          "name" : "base_path",
          "type" : "string"
         },
         {
          "name" : "subpath",
          "type" : "string"
         }
        ],
        "endline" : 187,
        "endchar" : 2
       },
       {
        "name" : "addWatch",
        "kind" : "function",
        "line" : 189,
        "char" : 15,
        "type" : "bool(WatcherID handle, string base_path, string path)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "WatcherID"
         },
         {
          "name" : "base_path",
          "type" : "string"
         },
         {
          "name" : "path",
          "type" : "string"
         }
        ],
        "endline" : 200,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : " Generic directory watcher implementation based on periodic directory\n\tscanning.\n\n\tNote that this implementation, although it works on all operating systems,\n\tis not efficient for directories with many files, since it has to keep a\n\trepresentation of the whole directory in memory and needs to list all files\n\tfor each polling period, which can result in excessive hard disk activity.\n",
    "line" : 444,
    "char" : 7,
    "name" : "PollEventDriverWatchers",
    "parameters" : [
     {
      "name" : "Events",
      "kind" : "type",
      "deco" : "C9eventcore6driver17EventDriverEvents"
     }
    ],
    "members" : [
     {
      "name" : "PollEventDriverWatchers",
      "kind" : "class",
      "protection" : "public",
      "line" : 444,
      "char" : 7,
      "members" : [
       {
        "name" : "core.thread",
        "kind" : "import",
        "line" : 446,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "Thread"
        ]
       },
       {
        "name" : "core.sync.mutex",
        "kind" : "import",
        "line" : 447,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "Mutex"
        ]
       },
       {
        "name" : "m_events",
        "kind" : "variable",
        "line" : 450,
        "char" : 10,
        "type" : "Events"
       },
       {
        "name" : "m_pollers",
        "kind" : "variable",
        "line" : 451,
        "char" : 26,
        "type" : "PollingThread[EventID]"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 454,
        "char" : 2,
        "type" : "@nogc (Events events)",
        "parameters" : [
         {
          "name" : "events",
          "type" : "Events"
         }
        ],
        "endline" : 457,
        "endchar" : 2
       },
       {
        "name" : "dispose",
        "kind" : "function",
        "line" : 459,
        "char" : 7,
        "type" : "@trusted void()",
        "endline" : 469,
        "endchar" : 2
       },
       {
        "name" : "watchDirectory",
        "kind" : "function",
        "line" : 471,
        "char" : 27,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "WatcherID(string path, bool recursive, FileChangesCallback on_change)",
        "parameters" : [
         {
          "name" : "path",
          "type" : "string"
         },
         {
          "name" : "recursive",
          "deco" : "b"
         },
         {
          "name" : "on_change",
          "type" : "FileChangesCallback"
         }
        ],
        "endline" : 491,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 493,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "const bool(WatcherID handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "WatcherID"
         }
        ],
        "endline" : 496,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 498,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(WatcherID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "WatcherID"
         }
        ],
        "endline" : 506,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 508,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(WatcherID descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "WatcherID"
         }
        ],
        "endline" : 521,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 523,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(WatcherID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "WatcherID"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 526,
        "endchar" : 2
       },
       {
        "name" : "onEvent",
        "kind" : "function",
        "line" : 528,
        "char" : 15,
        "type" : "void(EventID evt)",
        "parameters" : [
         {
          "name" : "evt",
          "type" : "EventID"
         }
        ],
        "endline" : 537,
        "endchar" : 2
       },
       {
        "name" : "PollingThread",
        "kind" : "class",
        "protection" : "public",
        "line" : 540,
        "char" : 16,
        "members" : [
         {
          "name" : "m_eventsDriver",
          "kind" : "variable",
          "line" : 542,
          "char" : 19,
          "type" : "shared(Events)"
         },
         {
          "name" : "m_changesMutex",
          "kind" : "variable",
          "line" : 543,
          "char" : 10,
          "type" : "Mutex"
         },
         {
          "name" : "m_changes",
          "kind" : "variable",
          "line" : 544,
          "char" : 28,
          "type" : "FileChange[]"
         },
         {
          "name" : "m_changesEvent",
          "kind" : "variable",
          "line" : 545,
          "char" : 12,
          "type" : "EventID"
         },
         {
          "name" : "m_basePath",
          "kind" : "variable",
          "line" : 546,
          "char" : 21,
          "storageClass" : [
           "immutable"
          ],
          "type" : "string"
         },
         {
          "name" : "m_recursive",
          "kind" : "variable",
          "line" : 547,
          "char" : 19,
          "storageClass" : [
           "immutable"
          ],
          "deco" : "b"
         },
         {
          "name" : "m_callback",
          "kind" : "variable",
          "line" : 548,
          "char" : 34,
          "storageClass" : [
           "immutable"
          ],
          "type" : "FileChangesCallback"
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "line" : 551,
          "char" : 3,
          "type" : "nothrow @trusted (shared(Events) event_driver, EventID event, string path, bool recursive, FileChangesCallback callback)",
          "parameters" : [
           {
            "name" : "event_driver",
            "type" : "shared(Events)"
           },
           {
            "name" : "event",
            "type" : "EventID"
           },
           {
            "name" : "path",
            "type" : "string"
           },
           {
            "name" : "recursive",
            "deco" : "b"
           },
           {
            "name" : "callback",
            "type" : "FileChangesCallback"
           }
          ],
          "endline" : 564,
          "endchar" : 3
         },
         {
          "name" : "dispose",
          "kind" : "function",
          "line" : 566,
          "char" : 8,
          "type" : "nothrow void()",
          "endline" : 571,
          "endchar" : 3
         },
         {
          "name" : "readChanges",
          "kind" : "function",
          "line" : 573,
          "char" : 16,
          "type" : "nothrow FileChange[]()",
          "endline" : 582,
          "endchar" : 3
         },
         {
          "name" : "run",
          "kind" : "function",
          "line" : 584,
          "char" : 16,
          "type" : "nothrow @trusted void()",
          "endline" : 623,
          "endchar" : 3
         }
        ]
       },
       {
        "name" : "DirectoryPoller",
        "kind" : "class",
        "protection" : "public",
        "line" : 627,
        "char" : 16,
        "members" : [
         {
          "name" : "Entry",
          "kind" : "class",
          "protection" : "public",
          "line" : 628,
          "char" : 24,
          "members" : [
           {
            "name" : "parent",
            "kind" : "variable",
            "line" : 629,
            "char" : 10,
            "type" : "Entry"
           },
           {
            "name" : "name",
            "kind" : "variable",
            "line" : 630,
            "char" : 11,
            "type" : "string"
           },
           {
            "name" : "size",
            "kind" : "variable",
            "line" : 631,
            "char" : 10,
            "deco" : "m"
           },
           {
            "name" : "lastChange",
            "kind" : "variable",
            "line" : 632,
            "char" : 9,
            "deco" : "l"
           },
           {
            "name" : "this",
            "kind" : "constructor",
            "line" : 634,
            "char" : 4,
            "type" : "(Entry parent, string name, ulong size, long lastChange)",
            "parameters" : [
             {
              "name" : "parent",
              "type" : "Entry"
             },
             {
              "name" : "name",
              "type" : "string"
             },
             {
              "name" : "size",
              "deco" : "m"
             },
             {
              "name" : "lastChange",
              "deco" : "l"
             }
            ],
            "endline" : 640,
            "endchar" : 4
           },
           {
            "name" : "path",
            "kind" : "function",
            "line" : 642,
            "char" : 11,
            "type" : "string()",
            "endline" : 648,
            "endchar" : 4
           },
           {
            "name" : "isDir",
            "kind" : "function",
            "line" : 650,
            "char" : 9,
            "type" : "const bool()",
            "endline" : 650,
            "endchar" : 51
           }
          ]
         },
         {
          "name" : "Key",
          "kind" : "struct",
          "protection" : "public",
          "line" : 653,
          "char" : 11,
          "members" : [
           {
            "name" : "parent",
            "kind" : "variable",
            "line" : 654,
            "char" : 10,
            "type" : "Entry"
           },
           {
            "name" : "name",
            "kind" : "variable",
            "line" : 655,
            "char" : 11,
            "type" : "string"
           }
          ]
         },
         {
          "name" : "ChangeCallback",
          "kind" : "alias",
          "line" : 658,
          "char" : 3,
          "type" : "void delegate(FileChange) nothrow @safe"
         },
         {
          "name" : "m_basePath",
          "kind" : "variable",
          "line" : 661,
          "char" : 21,
          "storageClass" : [
           "immutable"
          ],
          "type" : "string"
         },
         {
          "name" : "m_recursive",
          "kind" : "variable",
          "line" : 662,
          "char" : 19,
          "storageClass" : [
           "immutable"
          ],
          "deco" : "b"
         },
         {
          "name" : "m_entries",
          "kind" : "variable",
          "line" : 664,
          "char" : 15,
          "type" : "Entry[Key]"
         },
         {
          "name" : "m_entryCount",
          "kind" : "variable",
          "line" : 665,
          "char" : 11,
          "type" : "size_t"
         },
         {
          "name" : "m_onChange",
          "kind" : "variable",
          "line" : 666,
          "char" : 19,
          "type" : "ChangeCallback"
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "line" : 669,
          "char" : 3,
          "type" : "(string path, bool recursive, ChangeCallback on_change)",
          "parameters" : [
           {
            "name" : "path",
            "type" : "string"
           },
           {
            "name" : "recursive",
            "deco" : "b"
           },
           {
            "name" : "on_change",
            "type" : "ChangeCallback"
           }
          ],
          "endline" : 674,
          "endchar" : 3
         },
         {
          "name" : "entryCount",
          "kind" : "function",
          "line" : 676,
          "char" : 20,
          "type" : "const @property size_t()",
          "endline" : 676,
          "endchar" : 62
         },
         {
          "name" : "addChange",
          "kind" : "function",
          "line" : 678,
          "char" : 16,
          "type" : "void(FileChangeKind kind, Key key)",
          "parameters" : [
           {
            "name" : "kind",
            "type" : "FileChangeKind"
           },
           {
            "name" : "key",
            "type" : "Key"
           }
          ],
          "endline" : 681,
          "endchar" : 3
         },
         {
          "name" : "scan",
          "kind" : "function",
          "line" : 683,
          "char" : 16,
          "type" : "nothrow @trusted void(bool generate_changes)",
          "parameters" : [
           {
            "name" : "generate_changes",
            "deco" : "b"
           }
          ],
          "endline" : 712,
          "endchar" : 3
         },
         {
          "name" : "scan",
          "kind" : "function",
          "line" : 714,
          "char" : 16,
          "type" : "nothrow @trusted void(Entry parent, bool generate_changes, ref Entry[Key] new_entries, ref Entry[] added, ref size_t ec)",
          "parameters" : [
           {
            "name" : "parent",
            "type" : "Entry"
           },
           {
            "name" : "generate_changes",
            "deco" : "b"
           },
           {
            "name" : "new_entries",
            "type" : "Entry[Key]",
            "storageClass" : [
             "ref"
            ]
           },
           {
            "name" : "added",
            "type" : "Entry[]",
            "storageClass" : [
             "ref"
            ]
           },
           {
            "name" : "ec",
            "type" : "size_t",
            "storageClass" : [
             "ref"
            ]
           }
          ],
          "endline" : 748,
          "endchar" : 3
         }
        ]
       }
      ]
     }
    ]
   },
   {
    "name" : "WatcherSlot",
    "kind" : "struct",
    "protection" : "package",
    "line" : 752,
    "char" : 9,
    "members" : [
     {
      "name" : "Handle",
      "kind" : "alias",
      "protection" : "public",
      "line" : 753,
      "char" : 2,
      "deco" : "S9eventcore6driver9WatcherID"
     },
     {
      "name" : "callback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 754,
      "char" : 22,
      "storageClass" : [
       "@safe"
      ],
      "deco" : "DFNbNfS9eventcore6driver9WatcherIDKxSQBeQx10FileChangeZv",
      "originalType" : "FileChangesCallback",
      "offset" : 0
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.threadedfile",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/threadedfile.d",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.ioworker",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "core.atomic",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "core.stdc.errno",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.algorithm.comparison",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "among",
     "min"
    ]
   },
   {
    "name" : "core.sys.posix.fcntl",
    "kind" : "import",
    "line" : 11,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.sys.posix.sys.stat",
    "kind" : "import",
    "line" : 12,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "core.sys.posix.unistd",
    "kind" : "import",
    "line" : 13,
    "char" : 9,
    "protection" : "private"
   },
   {
    "name" : "O_BINARY",
    "kind" : "variable",
    "protection" : "public",
    "line" : 46,
    "char" : 7,
    "storageClass" : [
     "enum"
    ],
    "deco" : "i",
    "init" : "0"
   },
   {
    "name" : "SEEK_SET",
    "kind" : "variable",
    "protection" : "private",
    "line" : 62,
    "char" : 7,
    "storageClass" : [
     "enum"
    ],
    "deco" : "i",
    "init" : "0"
   },
   {
    "name" : "SEEK_CUR",
    "kind" : "variable",
    "protection" : "private",
    "line" : 63,
    "char" : 7,
    "storageClass" : [
     "enum"
    ],
    "deco" : "i",
    "init" : "1"
   },
   {
    "name" : "SEEK_END",
    "kind" : "variable",
    "protection" : "private",
    "line" : 64,
    "char" : 7,
    "storageClass" : [
     "enum"
    ],
    "deco" : "i",
    "init" : "2"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 68,
    "char" : 7,
    "name" : "ThreadedFileEventDriver",
    "parameters" : [
     {
      "name" : "Events",
      "kind" : "type",
      "deco" : "C9eventcore6driver17EventDriverEvents"
     }
    ],
    "members" : [
     {
      "name" : "ThreadedFileEventDriver",
      "kind" : "class",
      "protection" : "public",
      "line" : 68,
      "char" : 7,
      "members" : [
       {
        "name" : "std.parallelism",
        "kind" : "import",
        "line" : 70,
        "char" : 9,
        "protection" : "private"
       },
       {
        "name" : "ThreadedFileStatus",
        "kind" : "enum",
        "line" : 73,
        "char" : 3,
        "members" : [
         {
          "name" : "idle",
          "kind" : "enum member",
          "line" : 74,
          "char" : 4
         },
         {
          "name" : "initiated",
          "kind" : "enum member",
          "line" : 75,
          "char" : 4
         },
         {
          "name" : "processing",
          "kind" : "enum member",
          "line" : 76,
          "char" : 4
         },
         {
          "name" : "cancelling",
          "kind" : "enum member",
          "line" : 77,
          "char" : 4
         },
         {
          "name" : "cancelled",
          "kind" : "enum member",
          "line" : 78,
          "char" : 4
         },
         {
          "name" : "finished",
          "kind" : "enum member",
          "line" : 79,
          "char" : 4
         }
        ]
       },
       {
        "name" : "IOInfo",
        "kind" : "struct",
        "protection" : "public",
        "line" : 82,
        "char" : 10,
        "members" : [
         {
          "name" : "callback",
          "kind" : "variable",
          "line" : 83,
          "char" : 19,
          "type" : "FileIOCallback"
         },
         {
          "name" : "status",
          "kind" : "variable",
          "line" : 84,
          "char" : 30,
          "storageClass" : [
           "shared"
          ],
          "type" : "ThreadedFileStatus"
         },
         {
          "name" : "bytesWritten",
          "kind" : "variable",
          "line" : 85,
          "char" : 18,
          "storageClass" : [
           "shared"
          ],
          "type" : "size_t"
         },
         {
          "name" : "ioStatus",
          "kind" : "variable",
          "line" : 86,
          "char" : 20,
          "storageClass" : [
           "shared"
          ],
          "type" : "IOStatus"
         },
         {
          "name" : "finalize",
          "kind" : "function",
          "line" : 88,
          "char" : 9,
          "type" : "nothrow @safe void(FileFD fd, scope void delegate() nothrow @safe pre_cb)",
          "parameters" : [
           {
            "name" : "fd",
            "type" : "FileFD"
           },
           {
            "name" : "pre_cb",
            "type" : "void delegate() nothrow @safe",
            "storageClass" : [
             "scope"
            ]
           }
          ],
          "endline" : 108,
          "endchar" : 4
         }
        ]
       },
       {
        "name" : "FileInfo",
        "kind" : "struct",
        "protection" : "public",
        "line" : 111,
        "char" : 10,
        "members" : [
         {
          "name" : "read",
          "kind" : "variable",
          "line" : 112,
          "char" : 11,
          "type" : "IOInfo"
         },
         {
          "name" : "write",
          "kind" : "variable",
          "line" : 113,
          "char" : 11,
          "type" : "IOInfo"
         },
         {
          "name" : "validationCounter",
          "kind" : "variable",
          "line" : 115,
          "char" : 9,
          "deco" : "k"
         },
         {
          "name" : "refCount",
          "kind" : "variable",
          "line" : 117,
          "char" : 8,
          "deco" : "i"
         },
         {
          "name" : "userDataDestructor",
          "kind" : "variable",
          "line" : 118,
          "char" : 20,
          "type" : "DataInitializer"
         },
         {
          "name" : "userData",
          "kind" : "variable",
          "line" : 119,
          "char" : 28,
          "type" : "ubyte[16 * size_t.sizeof]"
         }
        ]
       },
       {
        "name" : "m_fileThreadPool",
        "kind" : "variable",
        "line" : 122,
        "char" : 16,
        "type" : "IOWorkerPool"
       },
       {
        "name" : "m_files",
        "kind" : "variable",
        "line" : 123,
        "char" : 26,
        "type" : "ChoppedVector!FileInfo"
       },
       {
        "name" : "m_activeReads",
        "kind" : "variable",
        "line" : 124,
        "char" : 26,
        "type" : "SmallIntegerSet!size_t"
       },
       {
        "name" : "m_activeWrites",
        "kind" : "variable",
        "line" : 125,
        "char" : 26,
        "type" : "SmallIntegerSet!size_t"
       },
       {
        "name" : "m_readyEvent",
        "kind" : "variable",
        "line" : 126,
        "char" : 11,
        "type" : "EventID",
        "init" : "EventID.invalid"
       },
       {
        "name" : "m_waiting",
        "kind" : "variable",
        "line" : 127,
        "char" : 8,
        "deco" : "b"
       },
       {
        "name" : "m_events",
        "kind" : "variable",
        "line" : 128,
        "char" : 10,
        "type" : "Events"
       },
       {
        "name" : "this",
        "kind" : "constructor",
        "line" : 133,
        "char" : 2,
        "type" : "(Events events)",
        "parameters" : [
         {
          "name" : "events",
          "type" : "Events"
         }
        ],
        "endline" : 136,
        "endchar" : 2
       },
       {
        "name" : "dispose",
        "kind" : "function",
        "line" : 138,
        "char" : 7,
        "type" : "void()",
        "endline" : 151,
        "endchar" : 2
       },
       {
        "name" : "open",
        "kind" : "function",
        "line" : 153,
        "char" : 24,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "FileFD(string path, FileOpenMode mode)",
        "parameters" : [
         {
          "name" : "path",
          "type" : "string"
         },
         {
          "name" : "mode",
          "type" : "FileOpenMode"
         }
        ],
        "endline" : 169,
        "endchar" : 2
       },
       {
        "name" : "adopt",
        "kind" : "function",
        "line" : 171,
        "char" : 24,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "FileFD(int system_file_handle)",
        "parameters" : [
         {
          "name" : "system_file_handle",
          "deco" : "i"
         }
        ],
        "endline" : 186,
        "endchar" : 2
       },
       {
        "name" : "close",
        "kind" : "function",
        "line" : 188,
        "char" : 7,
        "type" : "void(FileFD file, FileCloseCallback on_closed)",
        "parameters" : [
         {
          "name" : "file",
          "type" : "FileFD"
         },
         {
          "name" : "on_closed",
          "type" : "FileCloseCallback"
         }
        ],
        "endline" : 204,
        "endchar" : 2
       },
       {
        "name" : "getSize",
        "kind" : "function",
        "line" : 206,
        "char" : 8,
        "type" : "ulong(FileFD file)",
        "parameters" : [
         {
          "name" : "file",
          "type" : "FileFD"
         }
        ],
        "endline" : 220,
        "endchar" : 2
       },
       {
        "name" : "truncate",
        "kind" : "function",
        "line" : 222,
        "char" : 16,
        "storageClass" : [
         "override"
        ],
        "type" : "void(FileFD file, ulong size, FileIOCallback on_finish)",
        "parameters" : [
         {
          "name" : "file",
          "type" : "FileFD"
         },
         {
          "name" : "size",
          "deco" : "m"
         },
         {
          "name" : "on_finish",
          "type" : "FileIOCallback"
         }
        ],
        "endline" : 261,
        "endchar" : 2
       },
       {
        "name" : "write",
        "kind" : "function",
        "line" : 264,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(FileFD file, ulong offset, const(ubyte)[] buffer, IOMode, FileIOCallback on_write_finish)",
        "parameters" : [
         {
          "name" : "file",
          "type" : "FileFD"
         },
         {
          "name" : "offset",
          "deco" : "m"
         },
         {
          "name" : "buffer",
          "type" : "const(ubyte)[]"
         },
         {
          "type" : "IOMode"
         },
         {
          "name" : "on_write_finish",
          "type" : "FileIOCallback"
         }
        ],
        "endline" : 291,
        "endchar" : 2
       },
       {
        "name" : "cancelWrite",
        "kind" : "function",
        "line" : 293,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(FileFD file)",
        "parameters" : [
         {
          "name" : "file",
          "type" : "FileFD"
         }
        ],
        "endline" : 304,
        "endchar" : 2
       },
       {
        "name" : "read",
        "kind" : "function",
        "line" : 306,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(FileFD file, ulong offset, ubyte[] buffer, IOMode, FileIOCallback on_read_finish)",
        "parameters" : [
         {
          "name" : "file",
          "type" : "FileFD"
         },
         {
          "name" : "offset",
          "deco" : "m"
         },
         {
          "name" : "buffer",
          "type" : "ubyte[]"
         },
         {
          "type" : "IOMode"
         },
         {
          "name" : "on_read_finish",
          "type" : "FileIOCallback"
         }
        ],
        "endline" : 332,
        "endchar" : 2
       },
       {
        "name" : "cancelRead",
        "kind" : "function",
        "line" : 334,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(FileFD file)",
        "parameters" : [
         {
          "name" : "file",
          "type" : "FileFD"
         }
        ],
        "endline" : 345,
        "endchar" : 2
       },
       {
        "name" : "isValid",
        "kind" : "function",
        "line" : 347,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "const bool(FileFD handle)",
        "parameters" : [
         {
          "name" : "handle",
          "type" : "FileFD"
         }
        ],
        "endline" : 351,
        "endchar" : 2
       },
       {
        "name" : "addRef",
        "kind" : "function",
        "line" : 353,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "void(FileFD descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "FileFD"
         }
        ],
        "endline" : 358,
        "endchar" : 2
       },
       {
        "name" : "releaseRef",
        "kind" : "function",
        "line" : 360,
        "char" : 22,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "bool(FileFD descriptor)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "FileFD"
         }
        ],
        "endline" : 372,
        "endchar" : 2
       },
       {
        "name" : "rawUserData",
        "kind" : "function",
        "line" : 374,
        "char" : 33,
        "storageClass" : [
         "final",
         "override"
        ],
        "type" : "@system void*(FileFD descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
        "parameters" : [
         {
          "name" : "descriptor",
          "type" : "FileFD"
         },
         {
          "name" : "size",
          "type" : "size_t"
         },
         {
          "name" : "initialize",
          "type" : "DataInitializer"
         },
         {
          "name" : "destroy",
          "type" : "DataInitializer"
         }
        ],
        "endline" : 388,
        "endchar" : 2
       },
       {
        "kind" : "template",
        "comment" : "private\n",
        "line" : 391,
        "char" : 14,
        "name" : "taskFun",
        "parameters" : [
         {
          "name" : "op",
          "kind" : "value",
          "type" : "string"
         },
         {
          "name" : "UB",
          "kind" : "type"
         }
        ],
        "members" : [
         {
          "name" : "taskFun",
          "kind" : "function",
          "line" : 391,
          "char" : 14,
          "type" : "void(shared(ThreadedFileEventDriver) files, shared(FileInfo)* fi, FileFD file, ulong offset, UB[] buffer)",
          "parameters" : [
           {
            "name" : "files",
            "type" : "shared(ThreadedFileEventDriver)"
           },
           {
            "name" : "fi",
            "type" : "shared(FileInfo)*"
           },
           {
            "name" : "file",
            "type" : "FileFD"
           },
           {
            "name" : "offset",
            "deco" : "m"
           },
           {
            "name" : "buffer",
            "type" : "UB[]"
           }
          ],
          "endline" : 431,
          "endchar" : 2
         }
        ]
       },
       {
        "name" : "onReady",
        "kind" : "function",
        "line" : 433,
        "char" : 15,
        "type" : "void(EventID)",
        "parameters" : [
         {
          "type" : "EventID"
         }
        ],
        "endline" : 448,
        "endchar" : 2
       },
       {
        "name" : "startWaiting",
        "kind" : "function",
        "line" : 450,
        "char" : 15,
        "type" : "void()",
        "endline" : 457,
        "endchar" : 2
       },
       {
        "name" : "threadSetup",
        "kind" : "function",
        "line" : 459,
        "char" : 15,
        "type" : "void()",
        "endline" : 469,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 472,
    "char" : 14,
    "name" : "safeAtomicLoad",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "safeAtomicLoad",
      "kind" : "function",
      "line" : 472,
      "char" : 14,
      "storageClass" : [
       "auto"
      ],
      "type" : "@trusted (ref shared(T) v)",
      "parameters" : [
       {
        "name" : "v",
        "type" : "shared(T)",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 472,
      "endchar" : 82
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 473,
    "char" : 14,
    "name" : "safeAtomicStore",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "safeAtomicStore",
      "kind" : "function",
      "line" : 473,
      "char" : 14,
      "storageClass" : [
       "auto"
      ],
      "type" : "@trusted (ref shared(T) v, T a)",
      "parameters" : [
       {
        "name" : "v",
        "type" : "shared(T)",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "a",
        "type" : "T"
       }
      ],
      "endline" : 473,
      "endchar" : 92
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 474,
    "char" : 14,
    "name" : "safeCAS",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "U",
      "kind" : "type"
     },
     {
      "name" : "V",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "safeCAS",
      "kind" : "function",
      "line" : 474,
      "char" : 14,
      "storageClass" : [
       "auto"
      ],
      "type" : "@trusted (ref shared(T) v, U a, V b)",
      "parameters" : [
       {
        "name" : "v",
        "type" : "shared(T)",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "a",
        "type" : "U"
       },
       {
        "name" : "b",
        "type" : "V"
       }
      ],
      "endline" : 474,
      "endchar" : 91
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 476,
    "char" : 14,
    "name" : "log",
    "parameters" : [
     {
      "name" : "ARGS",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "log",
      "kind" : "function",
      "line" : 476,
      "char" : 14,
      "type" : "nothrow @trusted void(string fmt, ARGS args)",
      "parameters" : [
       {
        "name" : "fmt",
        "type" : "string"
       },
       {
        "name" : "args",
        "type" : "ARGS"
       }
      ],
      "endline" : 485,
      "endchar" : 1
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.timer",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/timer.d",
  "comment" : "\tEfficient generic management of large numbers of timers.\n",
  "members" : [
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.consumablequeue",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.dlist",
    "kind" : "import",
    "line" : 8,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 9,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "mallocT",
     "freeT",
     "nogc_assert"
    ]
   },
   {
    "name" : "core.time",
    "kind" : "import",
    "line" : 10,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Duration",
     "MonoTime",
     "hnsecs"
    ]
   },
   {
    "name" : "LoopTimeoutTimerDriver",
    "kind" : "class",
    "protection" : "public",
    "line" : 12,
    "char" : 7,
    "interfaces" : [
     "eventcore.driver.EventDriverTimers"
    ],
    "members" : [
     {
      "name" : "std.experimental.allocator.building_blocks.free_list",
      "kind" : "import",
      "line" : 13,
      "char" : 9,
      "protection" : "private"
     },
     {
      "name" : "std.experimental.allocator.building_blocks.region",
      "kind" : "import",
      "line" : 14,
      "char" : 9,
      "protection" : "private"
     },
     {
      "name" : "std.experimental.allocator.mallocator",
      "kind" : "import",
      "line" : 15,
      "char" : 9,
      "protection" : "private"
     },
     {
      "name" : "std.experimental.allocator",
      "kind" : "import",
      "line" : 16,
      "char" : 9,
      "protection" : "private",
      "selective" : [
       "dispose",
       "make"
      ]
     },
     {
      "name" : "std.container.array",
      "kind" : "import",
      "line" : 17,
      "char" : 9,
      "protection" : "private"
     },
     {
      "name" : "std.datetime",
      "kind" : "import",
      "line" : 18,
      "char" : 9,
      "protection" : "private",
      "selective" : [
       "Clock"
      ]
     },
     {
      "name" : "std.range",
      "kind" : "import",
      "line" : 19,
      "char" : 9,
      "protection" : "private",
      "selective" : [
       "SortedRange",
       "assumeSorted",
       "take"
      ]
     },
     {
      "name" : "core.memory",
      "kind" : "import",
      "line" : 20,
      "char" : 9,
      "protection" : "private",
      "selective" : [
       "GC"
      ]
     },
     {
      "name" : "ms_allocator",
      "kind" : "variable",
      "protection" : "private",
      "line" : 23,
      "char" : 50,
      "storageClass" : [
       "static"
      ],
      "deco" : "S3std12experimental9allocator15building_blocks9free_list__T8FreeListTSQCrQCqQCf10mallocator10MallocatorVmi208Vmi208VEQEm8typecons__T4FlagVAyaa8_6164617074697665ZQBdi0ZQEe",
      "originalType" : "FreeList!(Mallocator, TimerSlot.sizeof)"
     },
     {
      "name" : "m_timers",
      "kind" : "variable",
      "protection" : "private",
      "line" : 24,
      "char" : 23,
      "deco" : "HS9eventcore6driver7TimerIDPSQBb7drivers5timer9TimerSlot",
      "offset" : 24
     },
     {
      "name" : "m_timerQueue",
      "kind" : "variable",
      "protection" : "private",
      "line" : 25,
      "char" : 24,
      "deco" : "S9eventcore8internal5dlist__T10StackDListTSQBq7drivers5timer9TimerSlotZQBq",
      "originalType" : "StackDList!TimerSlot",
      "offset" : 32
     },
     {
      "name" : "m_lastTimerID",
      "kind" : "variable",
      "protection" : "private",
      "line" : 26,
      "char" : 11,
      "deco" : "S9eventcore6driver7TimerID",
      "offset" : 56
     },
     {
      "name" : "m_firedTimers",
      "kind" : "variable",
      "protection" : "private",
      "line" : 27,
      "char" : 32,
      "deco" : "C9eventcore8internal15consumablequeue__T15ConsumableQueueTPSQCh7drivers5timer9TimerSlotZQBw",
      "originalType" : "ConsumableQueue!(TimerSlot*)",
      "offset" : 72
     },
     {
      "name" : "_staticCtor_L30_C2",
      "kind" : "static constructor",
      "protection" : "public",
      "line" : 30,
      "char" : 2,
      "storageClass" : [
       "static"
      ],
      "deco" : "FZv",
      "endline" : 33,
      "endchar" : 2
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "public",
      "line" : 35,
      "char" : 2,
      "deco" : "FNbNiNfZC9eventcore7drivers5timer22LoopTimeoutTimerDriver",
      "originalType" : "nothrow @nogc @safe ()",
      "endline" : 38,
      "endchar" : 2
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 40,
      "char" : 2,
      "deco" : "FNbNiNeZv",
      "endline" : 44,
      "endchar" : 2
     },
     {
      "name" : "pendingCount",
      "kind" : "function",
      "protection" : "package",
      "line" : 46,
      "char" : 27,
      "deco" : "xFNbNdNfZm",
      "originalType" : "const nothrow @property @safe size_t()",
      "endline" : 46,
      "endchar" : 92
     },
     {
      "name" : "getNextTimeout",
      "kind" : "function",
      "protection" : "package",
      "line" : 48,
      "char" : 25,
      "storageClass" : [
       "final"
      ],
      "deco" : "FNbNfS4core4time__T12MonoTimeImplVEQBdQBb9ClockTypei0ZQBjZSQCbQBz8Duration",
      "originalType" : "nothrow @safe Duration(MonoTime time)",
      "parameters" : [
       {
        "name" : "time",
        "deco" : "S4core4time__T12MonoTimeImplVEQBdQBb9ClockTypei0ZQBj"
       }
      ],
      "endline" : 52,
      "endchar" : 2
     },
     {
      "name" : "process",
      "kind" : "function",
      "protection" : "package",
      "line" : 54,
      "char" : 21,
      "storageClass" : [
       "final"
      ],
      "deco" : "FNbNeS4core4time__T12MonoTimeImplVEQBdQBb9ClockTypei0ZQBjZb",
      "originalType" : "nothrow @trusted bool(MonoTime time)",
      "parameters" : [
       {
        "name" : "time",
        "deco" : "S4core4time__T12MonoTimeImplVEQBdQBb9ClockTypei0ZQBj"
       }
      ],
      "endline" : 86,
      "endchar" : 2
     },
     {
      "name" : "create",
      "kind" : "function",
      "protection" : "public",
      "line" : 88,
      "char" : 25,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbNeZS9eventcore6driver7TimerID",
      "originalType" : "@trusted TimerID()",
      "endline" : 101,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.create"
      ]
     },
     {
      "name" : "set",
      "kind" : "function",
      "protection" : "public",
      "line" : 103,
      "char" : 22,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbNeS9eventcore6driver7TimerIDS4core4time8DurationQuZv",
      "originalType" : "@trusted void(TimerID timer, Duration timeout, Duration repeat)",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       },
       {
        "name" : "timeout",
        "deco" : "S4core4time8Duration"
       },
       {
        "name" : "repeat",
        "deco" : "S4core4time8Duration"
       }
      ],
      "endline" : 114,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.set"
      ]
     },
     {
      "name" : "stop",
      "kind" : "function",
      "protection" : "public",
      "line" : 116,
      "char" : 22,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbNeS9eventcore6driver7TimerIDZv",
      "originalType" : "@trusted void(TimerID timer)",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ],
      "endline" : 132,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.stop"
      ]
     },
     {
      "name" : "isPending",
      "kind" : "function",
      "protection" : "public",
      "line" : 134,
      "char" : 22,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZb",
      "originalType" : "bool(TimerID descriptor)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ],
      "endline" : 139,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.isPending"
      ]
     },
     {
      "name" : "isPeriodic",
      "kind" : "function",
      "protection" : "public",
      "line" : 141,
      "char" : 22,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZb",
      "originalType" : "bool(TimerID descriptor)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ],
      "endline" : 146,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.isPeriodic"
      ]
     },
     {
      "name" : "wait",
      "kind" : "function",
      "protection" : "public",
      "line" : 148,
      "char" : 22,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDDFNbNfQBgbZvZv",
      "originalType" : "void(TimerID timer, TimerCallback2 callback)",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       },
       {
        "name" : "callback",
        "deco" : "DFNbNfS9eventcore6driver7TimerIDbZv"
       }
      ],
      "endline" : 155,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.wait"
      ]
     },
     {
      "name" : "wait",
      "kind" : "alias",
      "protection" : "public",
      "line" : 156,
      "char" : 2,
      "originalType" : "EventDriverTimers.wait"
     },
     {
      "name" : "cancelWait",
      "kind" : "function",
      "protection" : "public",
      "line" : 158,
      "char" : 22,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZv",
      "originalType" : "void(TimerID timer)",
      "parameters" : [
       {
        "name" : "timer",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ],
      "endline" : 166,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.cancelWait"
      ]
     },
     {
      "name" : "isValid",
      "kind" : "function",
      "protection" : "public",
      "line" : 168,
      "char" : 16,
      "storageClass" : [
       "override"
      ],
      "deco" : "xFNbNiNfS9eventcore6driver7TimerIDZb",
      "originalType" : "const bool(TimerID handle)",
      "parameters" : [
       {
        "name" : "handle",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ],
      "endline" : 171,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.isValid"
      ]
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "line" : 173,
      "char" : 22,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZv",
      "originalType" : "void(TimerID descriptor)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ],
      "endline" : 178,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.addRef"
      ]
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "line" : 180,
      "char" : 22,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbNfS9eventcore6driver7TimerIDZb",
      "originalType" : "bool(TimerID descriptor)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ],
      "endline" : 211,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.releaseRef"
      ]
     },
     {
      "name" : "isUnique",
      "kind" : "function",
      "protection" : "public",
      "line" : 213,
      "char" : 13,
      "storageClass" : [
       "final"
      ],
      "deco" : "xFNbNfS9eventcore6driver7TimerIDZb",
      "originalType" : "const bool(TimerID descriptor)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       }
      ],
      "endline" : 218,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.isUnique"
      ]
     },
     {
      "name" : "rawUserData",
      "kind" : "function",
      "protection" : "protected",
      "line" : 220,
      "char" : 33,
      "storageClass" : [
       "final",
       "override"
      ],
      "deco" : "FNbS9eventcore6driver7TimerIDmPFNbNiPvZvQkZQh",
      "originalType" : "@system void*(TimerID descriptor, size_t size, DataInitializer initialize, DataInitializer destroy)",
      "parameters" : [
       {
        "name" : "descriptor",
        "deco" : "S9eventcore6driver7TimerID"
       },
       {
        "name" : "size",
        "deco" : "m"
       },
       {
        "name" : "initialize",
        "deco" : "PFNbNiPvZv"
       },
       {
        "name" : "destroy",
        "deco" : "PFNbNiPvZv"
       }
      ],
      "endline" : 234,
      "endchar" : 2,
      "overrides" : [
       "eventcore.driver.EventDriverTimers.rawUserData"
      ]
     },
     {
      "name" : "enqueueTimer",
      "kind" : "function",
      "protection" : "private",
      "line" : 236,
      "char" : 15,
      "deco" : "FNbPS9eventcore7drivers5timer9TimerSlotZv",
      "parameters" : [
       {
        "name" : "tm",
        "deco" : "PS9eventcore7drivers5timer9TimerSlot"
       }
      ],
      "endline" : 247,
      "endchar" : 2
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     }
    ]
   },
   {
    "name" : "TimerSlot",
    "kind" : "struct",
    "protection" : "public",
    "line" : 250,
    "char" : 1,
    "members" : [
     {
      "name" : "prev",
      "kind" : "variable",
      "protection" : "public",
      "line" : 251,
      "char" : 13,
      "deco" : "PS9eventcore7drivers5timer9TimerSlot",
      "offset" : 0
     },
     {
      "name" : "next",
      "kind" : "variable",
      "protection" : "public",
      "line" : 251,
      "char" : 19,
      "deco" : "PS9eventcore7drivers5timer9TimerSlot",
      "offset" : 8
     },
     {
      "name" : "id",
      "kind" : "variable",
      "protection" : "public",
      "line" : 252,
      "char" : 10,
      "deco" : "S9eventcore6driver7TimerID",
      "offset" : 16
     },
     {
      "name" : "refCount",
      "kind" : "variable",
      "protection" : "public",
      "line" : 253,
      "char" : 7,
      "deco" : "k",
      "offset" : 32
     },
     {
      "name" : "pending",
      "kind" : "variable",
      "protection" : "public",
      "line" : 254,
      "char" : 7,
      "deco" : "b",
      "offset" : 36
     },
     {
      "name" : "timeout",
      "kind" : "variable",
      "protection" : "public",
      "line" : 255,
      "char" : 11,
      "deco" : "S4core4time__T12MonoTimeImplVEQBdQBb9ClockTypei0ZQBj",
      "originalType" : "MonoTime",
      "offset" : 40
     },
     {
      "name" : "repeatDuration",
      "kind" : "variable",
      "protection" : "public",
      "line" : 256,
      "char" : 11,
      "deco" : "S4core4time8Duration",
      "offset" : 48
     },
     {
      "name" : "callback",
      "kind" : "variable",
      "protection" : "public",
      "line" : 257,
      "char" : 17,
      "deco" : "DFNbNfS9eventcore6driver7TimerIDbZv",
      "originalType" : "TimerCallback2",
      "offset" : 56
     },
     {
      "name" : "userDataDestructor",
      "kind" : "variable",
      "protection" : "public",
      "line" : 259,
      "char" : 18,
      "deco" : "PFNbNiPvZv",
      "originalType" : "DataInitializer",
      "offset" : 72
     },
     {
      "name" : "userData",
      "kind" : "variable",
      "protection" : "public",
      "line" : 260,
      "char" : 26,
      "deco" : "G128h",
      "originalType" : "ubyte[16 * size_t.sizeof]",
      "offset" : 80
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.drivers.winapi.core",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/core.d",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.winapi.dns",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/dns.d",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.winapi.driver",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/driver.d",
  "comment" : "\tWinAPI based event driver implementation.\n\n\tThis driver uses overlapped I/O to model asynchronous I/O operations\n\tefficiently. The driver's event loop processes UI messages, so that\n\tit integrates with GUI applications transparently.\n",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.winapi.events",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/events.d",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.winapi.files",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/files.d",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.winapi.pipes",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/pipes.d",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.winapi.processes",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/processes.d",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.winapi.signals",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/signals.d",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.winapi.sockets",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/sockets.d",
  "members" : []
 },
 {
  "name" : "eventcore.drivers.winapi.watchers",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/drivers/winapi/watchers.d",
  "members" : []
 },
 {
  "name" : "eventcore.internal.consumablequeue",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/internal/consumablequeue.d",
  "members" : [
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "mallocNT",
     "freeNT"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : " FIFO queue with support for chunk-wise consumption.\n",
    "line" : 8,
    "char" : 7,
    "name" : "ConsumableQueue",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "ConsumableQueue",
      "kind" : "class",
      "protection" : "public",
      "line" : 8,
      "char" : 7,
      "members" : [
       {
        "name" : "Slot",
        "kind" : "struct",
        "protection" : "public",
        "line" : 13,
        "char" : 3,
        "members" : [
         {
          "name" : "value",
          "kind" : "variable",
          "line" : 14,
          "char" : 6,
          "type" : "T"
         },
         {
          "name" : "rc",
          "kind" : "variable",
          "line" : 15,
          "char" : 9,
          "deco" : "k"
         }
        ]
       },
       {
        "name" : "m_storage",
        "kind" : "variable",
        "line" : 17,
        "char" : 10,
        "type" : "Slot[]"
       },
       {
        "name" : "m_capacityMask",
        "kind" : "variable",
        "line" : 18,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "m_first",
        "kind" : "variable",
        "line" : 19,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "m_consumedCount",
        "kind" : "variable",
        "line" : 20,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "m_pendingCount",
        "kind" : "variable",
        "line" : 21,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "~this",
        "kind" : "destructor",
        "line" : 24,
        "char" : 2,
        "storageClass" : [
         "nothrow",
         "@nogc",
         "@trusted"
        ],
        "endline" : 28,
        "endchar" : 2
       },
       {
        "name" : "length",
        "kind" : "function",
        "line" : 30,
        "char" : 19,
        "type" : "const @property size_t()",
        "endline" : 30,
        "endchar" : 59
       },
       {
        "name" : "empty",
        "kind" : "function",
        "line" : 32,
        "char" : 17,
        "type" : "const @property bool()",
        "endline" : 32,
        "endchar" : 53
       },
       {
        "name" : "put",
        "kind" : "function",
        "comment" : " Inserts a single element into the queue.\n",
        "line" : 36,
        "char" : 13,
        "type" : "@safe void(T element)",
        "parameters" : [
         {
          "name" : "element",
          "type" : "T"
         }
        ],
        "endline" : 41,
        "endchar" : 2
       },
       {
        "name" : "reserve",
        "kind" : "function",
        "comment" : " Reserves space for inserting at least `count` elements.\n",
        "line" : 45,
        "char" : 7,
        "type" : "@safe void(size_t count)",
        "parameters" : [
         {
          "name" : "count",
          "type" : "size_t"
         }
        ],
        "endline" : 65,
        "endchar" : 2
       },
       {
        "name" : "removePending",
        "kind" : "function",
        "line" : 67,
        "char" : 7,
        "type" : "void(T item)",
        "parameters" : [
         {
          "name" : "item",
          "type" : "T"
         }
        ],
        "endline" : 76,
        "endchar" : 2
       },
       {
        "name" : "consume",
        "kind" : "function",
        "comment" : " Consumes all elements of the queue and returns a range containing the\n\t\tconsumed elements.\n\n\t\tAny elements added after the call to `consume` will not show up in the\n\t\treturned range.\n",
        "line" : 84,
        "char" : 16,
        "type" : "@safe ConsumedRange()",
        "endline" : 92,
        "endchar" : 2
       },
       {
        "name" : "consumeOne",
        "kind" : "function",
        "line" : 94,
        "char" : 4,
        "type" : "T()",
        "endline" : 102,
        "endchar" : 2
       },
       {
        "name" : "ConsumedRange",
        "kind" : "struct",
        "protection" : "public",
        "line" : 104,
        "char" : 9,
        "members" : [
         {
          "name" : "m_queue",
          "kind" : "variable",
          "line" : 108,
          "char" : 20,
          "type" : "ConsumableQueue"
         },
         {
          "name" : "m_first",
          "kind" : "variable",
          "line" : 109,
          "char" : 11,
          "type" : "size_t"
         },
         {
          "name" : "m_count",
          "kind" : "variable",
          "line" : 110,
          "char" : 11,
          "type" : "size_t"
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "line" : 113,
          "char" : 3,
          "type" : "(ConsumableQueue queue, size_t first, size_t count)",
          "parameters" : [
           {
            "name" : "queue",
            "type" : "ConsumableQueue"
           },
           {
            "name" : "first",
            "type" : "size_t"
           },
           {
            "name" : "count",
            "type" : "size_t"
           }
          ],
          "endline" : 121,
          "endchar" : 3
         },
         {
          "name" : "~this",
          "kind" : "destructor",
          "line" : 129,
          "char" : 3,
          "endline" : 133,
          "endchar" : 3
         },
         {
          "name" : "save",
          "kind" : "function",
          "line" : 135,
          "char" : 27,
          "type" : "@property ConsumedRange()",
          "endline" : 135,
          "endchar" : 49
         },
         {
          "name" : "empty",
          "kind" : "function",
          "line" : 137,
          "char" : 18,
          "type" : "const @property bool()",
          "endline" : 137,
          "endchar" : 55
         },
         {
          "name" : "length",
          "kind" : "function",
          "line" : 139,
          "char" : 20,
          "type" : "const @property size_t()",
          "endline" : 139,
          "endchar" : 53
         },
         {
          "name" : "front",
          "kind" : "function",
          "line" : 141,
          "char" : 26,
          "type" : "inout @property ref inout(T)()",
          "endline" : 141,
          "endchar" : 108
         },
         {
          "name" : "popFront",
          "kind" : "function",
          "line" : 143,
          "char" : 8,
          "type" : "void()",
          "endline" : 148,
          "endchar" : 3
         },
         {
          "name" : "opIndex",
          "kind" : "function",
          "line" : 150,
          "char" : 16,
          "type" : "inout ref inout(T)(size_t idx)",
          "parameters" : [
           {
            "name" : "idx",
            "type" : "size_t"
           }
          ],
          "endline" : 150,
          "endchar" : 118
         },
         {
          "name" : "opApply",
          "kind" : "function",
          "line" : 152,
          "char" : 7,
          "type" : "int(scope int delegate(ref T) nothrow @safe del)",
          "parameters" : [
           {
            "name" : "del",
            "type" : "int delegate(ref T) nothrow @safe",
            "storageClass" : [
             "scope"
            ]
           }
          ],
          "endline" : 158,
          "endchar" : 3
         }
        ]
       },
       {
        "name" : "consumed",
        "kind" : "function",
        "line" : 161,
        "char" : 15,
        "type" : "void(size_t first, bool shift_up)",
        "parameters" : [
         {
          "name" : "first",
          "type" : "size_t"
         },
         {
          "name" : "shift_up",
          "deco" : "b"
         }
        ],
        "endline" : 178,
        "endchar" : 2
       },
       {
        "name" : "getPendingAt",
        "kind" : "function",
        "line" : 180,
        "char" : 16,
        "type" : "ref T(size_t idx)",
        "parameters" : [
         {
          "name" : "idx",
          "type" : "size_t"
         }
        ],
        "endline" : 184,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L188_C1",
    "kind" : "function",
    "protection" : "public",
    "comment" : "\n",
    "line" : 188,
    "char" : 1,
    "endline" : 239,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L239_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 239,
    "char" : 1,
    "endline" : 253,
    "endchar" : 1
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 253,
    "char" : 6,
    "name" : "filterPending",
    "parameters" : [
     {
      "name" : "pred",
      "kind" : "alias"
     },
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "filterPending",
      "kind" : "function",
      "line" : 253,
      "char" : 6,
      "type" : "void(ConsumableQueue!T q)",
      "parameters" : [
       {
        "name" : "q",
        "type" : "ConsumableQueue!T"
       }
      ],
      "endline" : 267,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "__unittest_L270_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 270,
    "char" : 1,
    "endline" : 283,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "eventcore.internal.corefoundation",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/internal/corefoundation.d",
  "members" : []
 },
 {
  "name" : "eventcore.internal.coreservices",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/internal/coreservices.d",
  "members" : [
   {
    "name" : "eventcore.internal.corefoundation",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private"
   }
  ]
 },
 {
  "name" : "eventcore.internal.dlist",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/internal/dlist.d",
  "members" : [
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 3,
    "char" : 1,
    "name" : "StackDList",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "StackDList",
      "kind" : "struct",
      "protection" : "public",
      "line" : 3,
      "char" : 1,
      "members" : [
       {
        "name" : "m_first",
        "kind" : "variable",
        "line" : 7,
        "char" : 6,
        "type" : "T*"
       },
       {
        "name" : "m_last",
        "kind" : "variable",
        "line" : 7,
        "char" : 15,
        "type" : "T*"
       },
       {
        "name" : "m_length",
        "kind" : "variable",
        "line" : 8,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "clear",
        "kind" : "function",
        "line" : 13,
        "char" : 7,
        "type" : "void()",
        "endline" : 23,
        "endchar" : 2
       },
       {
        "name" : "empty",
        "kind" : "function",
        "line" : 25,
        "char" : 17,
        "type" : "const @property bool()",
        "endline" : 25,
        "endchar" : 57
       },
       {
        "name" : "length",
        "kind" : "function",
        "line" : 27,
        "char" : 19,
        "type" : "const @property size_t()",
        "endline" : 27,
        "endchar" : 53
       },
       {
        "name" : "front",
        "kind" : "function",
        "line" : 29,
        "char" : 15,
        "type" : "@property T*()",
        "endline" : 29,
        "endchar" : 41
       },
       {
        "name" : "back",
        "kind" : "function",
        "line" : 30,
        "char" : 15,
        "type" : "@property T*()",
        "endline" : 30,
        "endchar" : 39
       },
       {
        "name" : "insertFront",
        "kind" : "function",
        "line" : 32,
        "char" : 7,
        "type" : "void(T* item)",
        "parameters" : [
         {
          "name" : "item",
          "type" : "T*"
         }
        ],
        "endline" : 44,
        "endchar" : 2
       },
       {
        "name" : "insertBack",
        "kind" : "function",
        "line" : 46,
        "char" : 7,
        "type" : "void(T* item)",
        "parameters" : [
         {
          "name" : "item",
          "type" : "T*"
         }
        ],
        "endline" : 58,
        "endchar" : 2
       },
       {
        "name" : "insertAfter",
        "kind" : "function",
        "line" : 60,
        "char" : 7,
        "type" : "void(T* item, T* after)",
        "parameters" : [
         {
          "name" : "item",
          "type" : "T*"
         },
         {
          "name" : "after",
          "type" : "T*"
         }
        ],
        "endline" : 72,
        "endchar" : 2
       },
       {
        "name" : "remove",
        "kind" : "function",
        "line" : 74,
        "char" : 7,
        "type" : "void(T* item)",
        "parameters" : [
         {
          "name" : "item",
          "type" : "T*"
         }
        ],
        "endline" : 83,
        "endchar" : 2
       },
       {
        "name" : "removeFront",
        "kind" : "function",
        "line" : 85,
        "char" : 7,
        "type" : "void()",
        "endline" : 89,
        "endchar" : 2
       },
       {
        "name" : "removeBack",
        "kind" : "function",
        "line" : 91,
        "char" : 7,
        "type" : "void()",
        "endline" : 95,
        "endchar" : 2
       },
       {
        "name" : "Range",
        "kind" : "struct",
        "protection" : "public",
        "line" : 97,
        "char" : 9,
        "members" : [
         {
          "name" : "m_first",
          "kind" : "variable",
          "line" : 98,
          "char" : 14,
          "type" : "T*"
         },
         {
          "name" : "m_last",
          "kind" : "variable",
          "line" : 98,
          "char" : 23,
          "type" : "T*"
         },
         {
          "name" : "this",
          "kind" : "constructor",
          "line" : 100,
          "char" : 3,
          "type" : "(T* first, T* last)",
          "parameters" : [
           {
            "name" : "first",
            "type" : "T*"
           },
           {
            "name" : "last",
            "type" : "T*"
           }
          ],
          "endline" : 104,
          "endchar" : 3
         },
         {
          "name" : "empty",
          "kind" : "function",
          "line" : 106,
          "char" : 18,
          "type" : "const @property bool()",
          "endline" : 106,
          "endchar" : 58
         },
         {
          "name" : "front",
          "kind" : "function",
          "line" : 107,
          "char" : 16,
          "type" : "@property T*()",
          "endline" : 107,
          "endchar" : 42
         },
         {
          "name" : "back",
          "kind" : "function",
          "line" : 108,
          "char" : 16,
          "type" : "@property T*()",
          "endline" : 108,
          "endchar" : 40
         },
         {
          "name" : "popFront",
          "kind" : "function",
          "line" : 110,
          "char" : 8,
          "type" : "void()",
          "endline" : 114,
          "endchar" : 3
         },
         {
          "name" : "popBack",
          "kind" : "function",
          "line" : 116,
          "char" : 8,
          "type" : "void()",
          "endline" : 120,
          "endchar" : 3
         }
        ]
       },
       {
        "name" : "opSlice",
        "kind" : "function",
        "line" : 123,
        "char" : 8,
        "type" : "Range()",
        "endline" : 123,
        "endchar" : 51
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L126_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 126,
    "char" : 1,
    "endline" : 157,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "eventcore.internal.ioworker",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/internal/ioworker.d",
  "comment" : " Provides a shared task pool for distributing tasks to worker threads.\n",
  "members" : [
   {
    "name" : "eventcore.internal.utils",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "std.parallelism",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "TaskPool",
     "Task",
     "task"
    ]
   },
   {
    "name" : "acquireIOWorkerPool",
    "kind" : "function",
    "protection" : "public",
    "line" : 10,
    "char" : 14,
    "deco" : "FNbNfZS9eventcore8internal8ioworker12IOWorkerPool",
    "endline" : 13,
    "endchar" : 1
   },
   {
    "name" : "IOWorkerPool",
    "kind" : "struct",
    "protection" : "public",
    "line" : 15,
    "char" : 1,
    "members" : [
     {
      "name" : "m_pool",
      "kind" : "variable",
      "protection" : "private",
      "line" : 17,
      "char" : 12,
      "deco" : "C3std11parallelism8TaskPool",
      "originalType" : "TaskPool",
      "offset" : 0
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "private",
      "line" : 22,
      "char" : 10,
      "deco" : "FNbNcNfbZS9eventcore8internal8ioworker12IOWorkerPool",
      "originalType" : "nothrow ref @safe (bool)",
      "parameters" : [
       {
        "name" : "_param_0",
        "deco" : "b"
       }
      ],
      "endline" : 22,
      "endchar" : 57
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 23,
      "char" : 2,
      "deco" : "FNbNfZv",
      "endline" : 23,
      "endchar" : 53
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 26,
      "char" : 7,
      "name" : "opCast",
      "parameters" : [
       {
        "name" : "T",
        "kind" : "type"
       }
      ],
      "constraint" : "is(T == bool)",
      "members" : [
       {
        "name" : "opCast",
        "kind" : "function",
        "line" : 26,
        "char" : 7,
        "type" : "const bool()",
        "endline" : 26,
        "endchar" : 63
       }
      ]
     },
     {
      "name" : "pool",
      "kind" : "function",
      "protection" : "public",
      "line" : 28,
      "char" : 21,
      "deco" : "FNbNdNfZC3std11parallelism8TaskPool",
      "endline" : 28,
      "endchar" : 45
     },
     {
      "kind" : "template",
      "protection" : "public",
      "line" : 32,
      "char" : 7,
      "name" : "run",
      "parameters" : [
       {
        "name" : "fun",
        "kind" : "alias"
       },
       {
        "name" : "ARGS",
        "kind" : "tuple"
       }
      ],
      "members" : [
       {
        "name" : "run",
        "kind" : "function",
        "line" : 32,
        "char" : 7,
        "storageClass" : [
         "auto"
        ],
        "type" : "(ARGS args)",
        "parameters" : [
         {
          "name" : "args",
          "type" : "ARGS"
         }
        ],
        "endline" : 38,
        "endchar" : 2
       }
      ]
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 15,
      "char" : 1,
      "deco" : "FNbNcNjNeS9eventcore8internal8ioworker12IOWorkerPoolZQBs",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S9eventcore8internal8ioworker12IOWorkerPool"
       }
      ]
     }
    ]
   },
   {
    "name" : "StaticTaskPool",
    "kind" : "struct",
    "protection" : "private",
    "line" : 42,
    "char" : 9,
    "members" : [
     {
      "name" : "core.sync.mutex",
      "kind" : "import",
      "line" : 43,
      "char" : 9,
      "protection" : "private",
      "selective" : [
       "Mutex"
      ]
     },
     {
      "name" : "m_mutex",
      "kind" : "variable",
      "protection" : "private",
      "line" : 46,
      "char" : 23,
      "storageClass" : [
       "static",
       "shared"
      ],
      "deco" : "OC4core4sync5mutex5Mutex",
      "originalType" : "Mutex"
     },
     {
      "name" : "m_pool",
      "kind" : "variable",
      "protection" : "private",
      "line" : 47,
      "char" : 29,
      "storageClass" : [
       "static",
       "__gshared"
      ],
      "deco" : "C3std11parallelism8TaskPool",
      "originalType" : "TaskPool"
     },
     {
      "name" : "m_refCount",
      "kind" : "variable",
      "protection" : "private",
      "line" : 48,
      "char" : 24,
      "storageClass" : [
       "static",
       "__gshared"
      ],
      "deco" : "i",
      "init" : "0"
     },
     {
      "name" : "_sharedStaticCtor_L51_C2",
      "kind" : "shared static constructor",
      "protection" : "public",
      "line" : 51,
      "char" : 2,
      "storageClass" : [
       "static"
      ],
      "deco" : "FZv",
      "endline" : 54,
      "endchar" : 2
     },
     {
      "name" : "addRef",
      "kind" : "function",
      "protection" : "public",
      "line" : 56,
      "char" : 18,
      "storageClass" : [
       "static"
      ],
      "deco" : "FNbNeZC3std11parallelism8TaskPool",
      "endline" : 71,
      "endchar" : 2
     },
     {
      "name" : "releaseRef",
      "kind" : "function",
      "protection" : "public",
      "line" : 73,
      "char" : 14,
      "storageClass" : [
       "static"
      ],
      "deco" : "FNbNeZv",
      "endline" : 96,
      "endchar" : 2
     }
    ]
   }
  ]
 },
 {
  "name" : "eventcore.internal.utils",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/internal/utils.d",
  "members" : [
   {
    "name" : "core.memory",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "GC"
    ]
   },
   {
    "name" : "std.traits",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "hasIndirections"
    ]
   },
   {
    "name" : "taggedalgebraic",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private"
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 8,
    "char" : 6,
    "name" : "print",
    "parameters" : [
     {
      "name" : "ARGS",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "print",
      "kind" : "function",
      "line" : 8,
      "char" : 6,
      "type" : "nothrow @nogc @trusted void(string str, ARGS args)",
      "parameters" : [
       {
        "name" : "str",
        "type" : "string"
       },
       {
        "name" : "args",
        "type" : "ARGS"
       }
      ],
      "endline" : 18,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 20,
    "char" : 3,
    "name" : "mallocT",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "ARGS",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "mallocT",
      "kind" : "function",
      "line" : 20,
      "char" : 3,
      "type" : "T(ARGS args)",
      "parameters" : [
       {
        "name" : "args",
        "type" : "ARGS"
       }
      ],
      "endline" : 33,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 35,
    "char" : 6,
    "name" : "freeT",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "constraint" : "is(T == class)",
    "members" : [
     {
      "name" : "freeT",
      "kind" : "function",
      "line" : 35,
      "char" : 6,
      "type" : "@nogc void(ref T inst)",
      "parameters" : [
       {
        "name" : "inst",
        "type" : "T",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 47,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 49,
    "char" : 5,
    "name" : "mallocNT",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "mallocNT",
      "kind" : "function",
      "line" : 49,
      "char" : 5,
      "type" : "@trusted T[](size_t cnt)",
      "parameters" : [
       {
        "name" : "cnt",
        "type" : "size_t"
       }
      ],
      "endline" : 62,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 64,
    "char" : 6,
    "name" : "freeNT",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "freeNT",
      "kind" : "function",
      "line" : 64,
      "char" : 6,
      "type" : "void(ref T[] arr)",
      "parameters" : [
       {
        "name" : "arr",
        "type" : "T[]",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 75,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "private",
    "line" : 77,
    "char" : 14,
    "name" : "noGCDestroy",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     }
    ],
    "members" : [
     {
      "name" : "noGCDestroy",
      "kind" : "function",
      "line" : 77,
      "char" : 14,
      "type" : "@trusted void(ref T t)",
      "parameters" : [
       {
        "name" : "t",
        "type" : "T",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 82,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "_d_traceContext",
    "kind" : "function",
    "protection" : "private",
    "line" : 84,
    "char" : 39,
    "linkage" : "c",
    "deco" : "UPvZC6object9Throwable9TraceInfo",
    "originalType" : "extern (C) Throwable.TraceInfo(void* ptr = null)",
    "parameters" : [
     {
      "name" : "ptr",
      "deco" : "Pv",
      "default" : "null"
     }
    ]
   },
   {
    "name" : "nogc_assert",
    "kind" : "function",
    "protection" : "public",
    "line" : 86,
    "char" : 6,
    "deco" : "FNbNiNebAyaQdiZv",
    "parameters" : [
     {
      "name" : "cond",
      "deco" : "b"
     },
     {
      "name" : "message",
      "deco" : "Aya"
     },
     {
      "name" : "file",
      "deco" : "Aya",
      "default" : "__FILE__"
     },
     {
      "name" : "line",
      "deco" : "i",
      "default" : "__LINE__"
     }
    ],
    "endline" : 107,
    "endchar" : 1
   },
   {
    "name" : "StdoutRange",
    "kind" : "struct",
    "protection" : "public",
    "line" : 109,
    "char" : 1,
    "members" : [
     {
      "name" : "core.stdc.stdio",
      "kind" : "import",
      "line" : 111,
      "char" : 9,
      "protection" : "private"
     },
     {
      "name" : "put",
      "kind" : "function",
      "protection" : "public",
      "line" : 113,
      "char" : 7,
      "deco" : "FNbNiNfAyaZv",
      "parameters" : [
       {
        "name" : "str",
        "deco" : "Aya"
       }
      ],
      "endline" : 116,
      "endchar" : 2
     },
     {
      "name" : "put",
      "kind" : "function",
      "protection" : "public",
      "line" : 118,
      "char" : 7,
      "deco" : "FNbNiNfaZv",
      "parameters" : [
       {
        "name" : "ch",
        "deco" : "a"
       }
      ],
      "endline" : 121,
      "endchar" : 2
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 124,
    "char" : 1,
    "name" : "ChoppedVector",
    "parameters" : [
     {
      "name" : "T",
      "kind" : "type"
     },
     {
      "name" : "CHUNK_SIZE",
      "kind" : "value",
      "deco" : "m",
      "defaultValue" : "16 * 64 * 1024 / nextPOT(T.sizeof)"
     }
    ],
    "members" : [
     {
      "name" : "ChoppedVector",
      "kind" : "struct",
      "protection" : "public",
      "line" : 124,
      "char" : 1,
      "members" : [
       {
        "name" : "core.stdc.stdlib",
        "kind" : "import",
        "line" : 129,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "calloc",
         "free",
         "malloc",
         "realloc"
        ]
       },
       {
        "name" : "chunkSize",
        "kind" : "alias",
        "line" : 131,
        "char" : 2,
        "type" : "CHUNK_SIZE"
       },
       {
        "name" : "Chunk",
        "kind" : "alias",
        "line" : 134,
        "char" : 3,
        "type" : "T[chunkSize]"
       },
       {
        "name" : "ChunkPtr",
        "kind" : "alias",
        "line" : 135,
        "char" : 3,
        "type" : "Chunk*"
       },
       {
        "name" : "m_chunks",
        "kind" : "variable",
        "line" : 136,
        "char" : 14,
        "type" : "ChunkPtr[]"
       },
       {
        "name" : "m_chunkCount",
        "kind" : "variable",
        "line" : 137,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "m_length",
        "kind" : "variable",
        "line" : 138,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "~this",
        "kind" : "destructor",
        "line" : 143,
        "char" : 2,
        "storageClass" : [
         "@nogc"
        ],
        "endline" : 146,
        "endchar" : 2
       },
       {
        "name" : "length",
        "kind" : "function",
        "line" : 148,
        "char" : 19,
        "type" : "const @nogc @property size_t()",
        "endline" : 148,
        "endchar" : 59
       },
       {
        "name" : "clear",
        "kind" : "function",
        "line" : 150,
        "char" : 7,
        "type" : "@nogc void()",
        "endline" : 164,
        "endchar" : 2
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "line" : 166,
        "char" : 8,
        "type" : "@nogc ref T(size_t index)",
        "parameters" : [
         {
          "name" : "index",
          "type" : "size_t"
         }
        ],
        "endline" : 173,
        "endchar" : 2
       },
       {
        "name" : "opIndex",
        "kind" : "function",
        "line" : 175,
        "char" : 15,
        "type" : "const @nogc ref const(T)(size_t index)",
        "parameters" : [
         {
          "name" : "index",
          "type" : "size_t"
         }
        ],
        "endline" : 185,
        "endchar" : 2
       },
       {
        "name" : "opApply",
        "kind" : "function",
        "line" : 187,
        "char" : 6,
        "type" : "int(scope int delegate(size_t idx, ref T) nothrow @safe del)",
        "parameters" : [
         {
          "name" : "del",
          "type" : "int delegate(size_t idx, ref T) nothrow @safe",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 203,
        "endchar" : 2
       },
       {
        "name" : "opApply",
        "kind" : "function",
        "line" : 205,
        "char" : 6,
        "type" : "const int(scope int delegate(size_t idx, ref const(T)) nothrow @safe del)",
        "parameters" : [
         {
          "name" : "del",
          "type" : "int delegate(size_t idx, ref const(T)) nothrow @safe",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 221,
        "endchar" : 2
       },
       {
        "name" : "reserveChunk",
        "kind" : "function",
        "line" : 223,
        "char" : 15,
        "type" : "@nogc void(size_t chunkidx)",
        "parameters" : [
         {
          "name" : "chunkidx",
          "type" : "size_t"
         }
        ],
        "endline" : 246,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 249,
    "char" : 1,
    "name" : "AlgebraicChoppedVector",
    "parameters" : [
     {
      "name" : "TCommon",
      "kind" : "type"
     },
     {
      "name" : "TSpecific",
      "kind" : "tuple"
     }
    ],
    "members" : [
     {
      "name" : "AlgebraicChoppedVector",
      "kind" : "struct",
      "protection" : "public",
      "line" : 249,
      "char" : 1,
      "members" : [
       {
        "name" : "std.conv",
        "kind" : "import",
        "line" : 251,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "to"
        ]
       },
       {
        "name" : "std.meta",
        "kind" : "import",
        "line" : 252,
        "char" : 9,
        "protection" : "private",
        "selective" : [
         "AliasSeq"
        ]
       },
       {
        "name" : "U",
        "kind" : "union",
        "protection" : "public",
        "line" : 254,
        "char" : 2,
        "members" : [
         {
          "name" : "none",
          "kind" : "variable",
          "line" : 255,
          "char" : 16,
          "type" : "typeof(null)"
         },
         {
          "name" : "fields!0",
          "kind" : "mixin",
          "protection" : "public",
          "line" : 256,
          "char" : 3
         }
        ]
       },
       {
        "name" : "FieldType",
        "kind" : "alias",
        "line" : 258,
        "char" : 2,
        "type" : "TaggedAlgebraic!U"
       },
       {
        "name" : "FullField",
        "kind" : "struct",
        "protection" : "public",
        "line" : 259,
        "char" : 9,
        "members" : [
         {
          "name" : "common",
          "kind" : "variable",
          "line" : 260,
          "char" : 11,
          "type" : "TCommon"
         },
         {
          "name" : "specific",
          "kind" : "variable",
          "line" : 261,
          "char" : 13,
          "type" : "FieldType"
         }
        ]
       },
       {
        "name" : "items",
        "kind" : "variable",
        "line" : 265,
        "char" : 28,
        "type" : "ChoppedVector!FullField"
       },
       {
        "name" : "accessors",
        "kind" : "function",
        "line" : 269,
        "char" : 24,
        "storageClass" : [
         "static"
        ],
        "type" : "string()",
        "endline" : 277,
        "endchar" : 2
       },
       {
        "kind" : "template",
        "line" : 279,
        "char" : 16,
        "name" : "fields",
        "parameters" : [
         {
          "name" : "i",
          "kind" : "value",
          "type" : "size_t"
         }
        ],
        "members" : [
         {
          "name" : "fields!(i + 1)",
          "kind" : "mixin",
          "protection" : "public",
          "line" : 282,
          "char" : 4
         }
        ]
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "comment" : " Efficient bit set of dynamic size.\n",
    "line" : 291,
    "char" : 1,
    "name" : "SmallIntegerSet",
    "parameters" : [
     {
      "name" : "V",
      "kind" : "type",
      "deco" : "m"
     }
    ],
    "members" : [
     {
      "name" : "SmallIntegerSet",
      "kind" : "struct",
      "protection" : "public",
      "line" : 291,
      "char" : 1,
      "members" : [
       {
        "name" : "m_bits",
        "kind" : "variable",
        "line" : 294,
        "char" : 13,
        "type" : "uint[][4]"
       },
       {
        "name" : "m_count",
        "kind" : "variable",
        "line" : 295,
        "char" : 10,
        "type" : "size_t"
       },
       {
        "name" : "empty",
        "kind" : "function",
        "line" : 300,
        "char" : 17,
        "type" : "const @property bool()",
        "endline" : 300,
        "endchar" : 54
       },
       {
        "name" : "insert",
        "kind" : "function",
        "line" : 302,
        "char" : 7,
        "type" : "void(V i)",
        "parameters" : [
         {
          "name" : "i",
          "type" : "V"
         }
        ],
        "endline" : 313,
        "endchar" : 2
       },
       {
        "name" : "remove",
        "kind" : "function",
        "line" : 315,
        "char" : 7,
        "type" : "void(V i)",
        "parameters" : [
         {
          "name" : "i",
          "type" : "V"
         }
        ],
        "endline" : 328,
        "endchar" : 2
       },
       {
        "name" : "contains",
        "kind" : "function",
        "line" : 330,
        "char" : 7,
        "type" : "const bool(V i)",
        "parameters" : [
         {
          "name" : "i",
          "type" : "V"
         }
        ],
        "endline" : 330,
        "endchar" : 95
       },
       {
        "name" : "opApply",
        "kind" : "function",
        "line" : 332,
        "char" : 6,
        "type" : "const @safe int(scope int delegate(V) nothrow @safe del)",
        "parameters" : [
         {
          "name" : "del",
          "type" : "int delegate(V) nothrow @safe",
          "storageClass" : [
           "scope"
          ]
         }
        ],
        "endline" : 355,
        "endchar" : 2
       }
      ]
     }
    ]
   },
   {
    "name" : "__unittest_L358_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 358,
    "char" : 1,
    "endline" : 390,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L390_C15",
    "kind" : "function",
    "protection" : "public",
    "line" : 390,
    "char" : 15,
    "storageClass" : [
     "nothrow",
     "@safe"
    ],
    "endline" : 421,
    "endchar" : 1
   },
   {
    "name" : "nextPOT",
    "kind" : "function",
    "protection" : "private",
    "line" : 421,
    "char" : 16,
    "deco" : "FNbNiNfmZm",
    "originalType" : "nothrow @nogc @safe size_t(size_t n)",
    "parameters" : [
     {
      "name" : "n",
      "deco" : "m"
     }
    ],
    "endline" : 430,
    "endchar" : 1
   },
   {
    "name" : "__unittest_L432_C1",
    "kind" : "function",
    "protection" : "public",
    "line" : 432,
    "char" : 1,
    "endline" : 439,
    "endchar" : 1
   }
  ]
 },
 {
  "name" : "eventcore.internal.win32",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/internal/win32.d",
  "members" : []
 },
 {
  "name" : "eventcore.socket",
  "kind" : "module",
  "file" : "../../../../.dub/packages/eventcore-0.9.17/eventcore/source/eventcore/socket.d",
  "members" : [
   {
    "name" : "eventcore.core",
    "kind" : "import",
    "line" : 3,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "eventDriver"
    ]
   },
   {
    "name" : "eventcore.driver",
    "kind" : "import",
    "line" : 4,
    "char" : 8,
    "protection" : "private"
   },
   {
    "name" : "core.time",
    "kind" : "import",
    "line" : 5,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Duration"
    ]
   },
   {
    "name" : "std.exception",
    "kind" : "import",
    "line" : 6,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "enforce"
    ]
   },
   {
    "name" : "std.socket",
    "kind" : "import",
    "line" : 7,
    "char" : 8,
    "protection" : "private",
    "selective" : [
     "Address"
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 10,
    "char" : 14,
    "name" : "connectStream",
    "parameters" : [
     {
      "name" : "callback",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "connectStream",
      "kind" : "function",
      "line" : 10,
      "char" : 14,
      "type" : "@safe StreamSocket(scope Address peer_address)",
      "parameters" : [
       {
        "name" : "peer_address",
        "type" : "Address",
        "storageClass" : [
         "scope"
        ]
       }
      ],
      "endline" : 22,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "listenStream",
    "kind" : "function",
    "protection" : "public",
    "line" : 24,
    "char" : 20,
    "deco" : "FNfMC3std6socket7AddressZS9eventcoreQBb18StreamListenSocket",
    "parameters" : [
     {
      "name" : "bind_address",
      "deco" : "C3std6socket7Address",
      "storageClass" : [
       "scope"
      ]
     }
    ],
    "endline" : 29,
    "endchar" : 1
   },
   {
    "name" : "createDatagramSocket",
    "kind" : "function",
    "protection" : "public",
    "line" : 31,
    "char" : 16,
    "deco" : "FNfMC3std6socket7AddressMQvZS9eventcoreQBe14DatagramSocket",
    "parameters" : [
     {
      "name" : "bind_address",
      "deco" : "C3std6socket7Address",
      "storageClass" : [
       "scope"
      ]
     },
     {
      "name" : "target_address",
      "deco" : "C3std6socket7Address",
      "storageClass" : [
       "scope"
      ],
      "default" : "null"
     }
    ],
    "endline" : 36,
    "endchar" : 1
   },
   {
    "name" : "StreamSocket",
    "kind" : "struct",
    "protection" : "public",
    "line" : 38,
    "char" : 1,
    "members" : [
     {
      "name" : "m_fd",
      "kind" : "variable",
      "protection" : "private",
      "line" : 41,
      "char" : 25,
      "storageClass" : [
       "nothrow",
       "@safe"
      ],
      "deco" : "S9eventcore6driver14StreamSocketFD",
      "offset" : 0
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "private",
      "line" : 43,
      "char" : 10,
      "deco" : "FNbNcNfS9eventcore6driver14StreamSocketFDZSQBj6socket12StreamSocket",
      "originalType" : "nothrow ref @safe (StreamSocketFD fd)",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver14StreamSocketFD"
       }
      ],
      "endline" : 46,
      "endchar" : 2
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 49,
      "char" : 2,
      "deco" : "FNbNfZv",
      "endline" : 49,
      "endchar" : 86
     },
     {
      "name" : "state",
      "kind" : "function",
      "protection" : "public",
      "line" : 51,
      "char" : 28,
      "deco" : "FNbNdNfZE9eventcore6driver15ConnectionState",
      "endline" : 51,
      "endchar" : 91
     },
     {
      "name" : "tcpNoDelay",
      "kind" : "function",
      "protection" : "public",
      "line" : 52,
      "char" : 17,
      "deco" : "FNbNdNfbZv",
      "parameters" : [
       {
        "name" : "enable",
        "deco" : "b"
       }
      ],
      "endline" : 52,
      "endchar" : 92
     },
     {
      "name" : "setKeepAlive",
      "kind" : "function",
      "protection" : "public",
      "line" : 53,
      "char" : 7,
      "deco" : "FNbNfbZv",
      "parameters" : [
       {
        "name" : "enable",
        "deco" : "b"
       }
      ],
      "endline" : 53,
      "endchar" : 83
     },
     {
      "name" : "setKeepAliveParams",
      "kind" : "function",
      "protection" : "public",
      "line" : 54,
      "char" : 7,
      "deco" : "FNbNfS4core4time8DurationQuiZv",
      "parameters" : [
       {
        "name" : "idle",
        "deco" : "S4core4time8Duration"
       },
       {
        "name" : "interval",
        "deco" : "S4core4time8Duration"
       },
       {
        "name" : "probeCount",
        "deco" : "i",
        "default" : "5"
       }
      ],
      "endline" : 56,
      "endchar" : 2
     },
     {
      "name" : "setUserTimeout",
      "kind" : "function",
      "protection" : "public",
      "line" : 57,
      "char" : 7,
      "deco" : "FNbNfS4core4time8DurationZv",
      "parameters" : [
       {
        "name" : "timeout",
        "deco" : "S4core4time8Duration"
       }
      ],
      "endline" : 57,
      "endchar" : 93
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 38,
      "char" : 1,
      "deco" : "FNbNcNjNeS9eventcore6socket12StreamSocketZQBh",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S9eventcore6socket12StreamSocket"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 60,
    "char" : 6,
    "name" : "read",
    "parameters" : [
     {
      "name" : "callback",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "read",
      "kind" : "function",
      "line" : 60,
      "char" : 6,
      "type" : "void(ref StreamSocket socket, ubyte[] buffer, IOMode mode)",
      "parameters" : [
       {
        "name" : "socket",
        "type" : "StreamSocket",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "buffer",
        "type" : "ubyte[]"
       },
       {
        "name" : "mode",
        "type" : "IOMode"
       }
      ],
      "endline" : 66,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "cancelRead",
    "kind" : "function",
    "protection" : "public",
    "line" : 67,
    "char" : 6,
    "deco" : "FNbNfKS9eventcore6socket12StreamSocketZv",
    "parameters" : [
     {
      "name" : "socket",
      "deco" : "S9eventcore6socket12StreamSocket",
      "storageClass" : [
       "ref"
      ]
     }
    ],
    "endline" : 67,
    "endchar" : 104
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 68,
    "char" : 6,
    "name" : "waitForData",
    "parameters" : [
     {
      "name" : "callback",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "waitForData",
      "kind" : "function",
      "line" : 68,
      "char" : 6,
      "type" : "void(ref StreamSocket socket)",
      "parameters" : [
       {
        "name" : "socket",
        "type" : "StreamSocket",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 74,
      "endchar" : 1
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 75,
    "char" : 6,
    "name" : "write",
    "parameters" : [
     {
      "name" : "callback",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "write",
      "kind" : "function",
      "line" : 75,
      "char" : 6,
      "type" : "void(ref StreamSocket socket, const(ubyte)[] buffer, IOMode mode)",
      "parameters" : [
       {
        "name" : "socket",
        "type" : "StreamSocket",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "buffer",
        "type" : "const(ubyte)[]"
       },
       {
        "name" : "mode",
        "type" : "IOMode"
       }
      ],
      "endline" : 81,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "cancelWrite",
    "kind" : "function",
    "protection" : "public",
    "line" : 82,
    "char" : 6,
    "deco" : "FNbNfKS9eventcore6socket12StreamSocketZv",
    "parameters" : [
     {
      "name" : "socket",
      "deco" : "S9eventcore6socket12StreamSocket",
      "storageClass" : [
       "ref"
      ]
     }
    ],
    "endline" : 82,
    "endchar" : 105
   },
   {
    "name" : "shutdown",
    "kind" : "function",
    "protection" : "public",
    "line" : 83,
    "char" : 6,
    "deco" : "FNbNfKS9eventcore6socket12StreamSocketbbZv",
    "parameters" : [
     {
      "name" : "socket",
      "deco" : "S9eventcore6socket12StreamSocket",
      "storageClass" : [
       "ref"
      ]
     },
     {
      "name" : "shut_read",
      "deco" : "b",
      "default" : "true"
     },
     {
      "name" : "shut_write",
      "deco" : "b",
      "default" : "true"
     }
    ],
    "endline" : 86,
    "endchar" : 1
   },
   {
    "name" : "StreamListenSocket",
    "kind" : "struct",
    "protection" : "public",
    "line" : 89,
    "char" : 1,
    "members" : [
     {
      "name" : "m_fd",
      "kind" : "variable",
      "protection" : "private",
      "line" : 92,
      "char" : 31,
      "storageClass" : [
       "nothrow",
       "@safe"
      ],
      "deco" : "S9eventcore6driver20StreamListenSocketFD",
      "offset" : 0
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "private",
      "line" : 94,
      "char" : 10,
      "deco" : "FNbNcNfS9eventcore6driver20StreamListenSocketFDZSQBp6socket18StreamListenSocket",
      "originalType" : "nothrow ref @safe (StreamListenSocketFD fd)",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver20StreamListenSocketFD"
       }
      ],
      "endline" : 97,
      "endchar" : 2
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 100,
      "char" : 2,
      "deco" : "FNbNfZv",
      "endline" : 100,
      "endchar" : 92
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 89,
      "char" : 1,
      "deco" : "FNbNcNjNeS9eventcore6socket18StreamListenSocketZQBn",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S9eventcore6socket18StreamListenSocket"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 103,
    "char" : 6,
    "name" : "waitForConnections",
    "parameters" : [
     {
      "name" : "callback",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "waitForConnections",
      "kind" : "function",
      "line" : 103,
      "char" : 6,
      "type" : "void(ref StreamListenSocket socket)",
      "parameters" : [
       {
        "name" : "socket",
        "type" : "StreamListenSocket",
        "storageClass" : [
         "ref"
        ]
       }
      ],
      "endline" : 110,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "DatagramSocket",
    "kind" : "struct",
    "protection" : "public",
    "line" : 113,
    "char" : 1,
    "members" : [
     {
      "name" : "m_fd",
      "kind" : "variable",
      "protection" : "private",
      "line" : 116,
      "char" : 27,
      "storageClass" : [
       "nothrow",
       "@safe"
      ],
      "deco" : "S9eventcore6driver16DatagramSocketFD",
      "offset" : 0
     },
     {
      "name" : "this",
      "kind" : "constructor",
      "protection" : "private",
      "line" : 118,
      "char" : 10,
      "deco" : "FNbNcNfS9eventcore6driver16DatagramSocketFDZSQBl6socket14DatagramSocket",
      "originalType" : "nothrow ref @safe (DatagramSocketFD fd)",
      "parameters" : [
       {
        "name" : "fd",
        "deco" : "S9eventcore6driver16DatagramSocketFD"
       }
      ],
      "endline" : 121,
      "endchar" : 2
     },
     {
      "name" : "~this",
      "kind" : "destructor",
      "protection" : "public",
      "line" : 124,
      "char" : 2,
      "deco" : "FNbNfZv",
      "endline" : 124,
      "endchar" : 88
     },
     {
      "name" : "broadcast",
      "kind" : "function",
      "protection" : "public",
      "line" : 126,
      "char" : 17,
      "deco" : "FNbNdNfbZv",
      "parameters" : [
       {
        "name" : "enable",
        "deco" : "b"
       }
      ],
      "endline" : 126,
      "endchar" : 90
     },
     {
      "name" : "__xdtor",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "__xpostblit",
      "kind" : "alias",
      "protection" : "public"
     },
     {
      "name" : "opAssign",
      "kind" : "generated function",
      "protection" : "public",
      "line" : 113,
      "char" : 1,
      "deco" : "FNbNcNjNeS9eventcore6socket14DatagramSocketZQBj",
      "parameters" : [
       {
        "name" : "p",
        "deco" : "S9eventcore6socket14DatagramSocket"
       }
      ]
     }
    ]
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 129,
    "char" : 6,
    "name" : "receive",
    "parameters" : [
     {
      "name" : "callback",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "receive",
      "kind" : "function",
      "line" : 129,
      "char" : 6,
      "type" : "void(ref DatagramSocket socket, ubyte[] buffer, IOMode mode)",
      "parameters" : [
       {
        "name" : "socket",
        "type" : "DatagramSocket",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "buffer",
        "type" : "ubyte[]"
       },
       {
        "name" : "mode",
        "type" : "IOMode"
       }
      ],
      "endline" : 134,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "cancelReceive",
    "kind" : "function",
    "protection" : "public",
    "line" : 135,
    "char" : 6,
    "deco" : "FKS9eventcore6socket14DatagramSocketZv",
    "parameters" : [
     {
      "name" : "socket",
      "deco" : "S9eventcore6socket14DatagramSocket",
      "storageClass" : [
       "ref"
      ]
     }
    ],
    "endline" : 135,
    "endchar" : 97
   },
   {
    "kind" : "template",
    "protection" : "public",
    "line" : 136,
    "char" : 6,
    "name" : "send",
    "parameters" : [
     {
      "name" : "callback",
      "kind" : "alias"
     }
    ],
    "members" : [
     {
      "name" : "send",
      "kind" : "function",
      "line" : 136,
      "char" : 6,
      "type" : "void(ref DatagramSocket socket, const(ubyte)[] buffer, IOMode mode, Address target_address = null)",
      "parameters" : [
       {
        "name" : "socket",
        "type" : "DatagramSocket",
        "storageClass" : [
         "ref"
        ]
       },
       {
        "name" : "buffer",
        "type" : "const(ubyte)[]"
       },
       {
        "name" : "mode",
        "type" : "IOMode"
       },
       {
        "name" : "target_address",
        "type" : "Address",
        "default" : "null"
       }
      ],
      "endline" : 141,
      "endchar" : 1
     }
    ]
   },
   {
    "name" : "cancelSend",
    "kind" : "function",
    "protection" : "public",
    "line" : 142,
    "char" : 6,
    "deco" : "FKS9eventcore6socket14DatagramSocketZv",
    "parameters" : [
     {
      "name" : "socket",
      "deco" : "S9eventcore6socket14DatagramSocket",
      "storageClass" : [
       "ref"
      ]
     }
    ],
    "endline" : 142,
    "endchar" : 91
   }
  ]
 }
]
